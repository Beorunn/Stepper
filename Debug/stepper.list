
stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047bc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  080048c8  080048c8  000058c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a6c  08004a6c  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004a6c  08004a6c  00005a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a74  08004a74  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a74  08004a74  00005a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a78  08004a78  00005a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004a7c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000005c  08004ad8  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08004ad8  000062c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bea8  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001beb  00000000  00000000  00011f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  00013b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000975  00000000  00000000  00014728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017af1  00000000  00000000  0001509d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6b7  00000000  00000000  0002cb8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a6c1  00000000  00000000  0003a245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4906  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ac8  00000000  00000000  000c494c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000c8414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080048b0 	.word	0x080048b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080048b0 	.word	0x080048b0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fbbe 	bl	80008e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f826 	bl	80001b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f92c 	bl	80003c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800016c:	f000 f900 	bl	8000370 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000170:	f000 f85c 	bl	800022c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000174:	2100      	movs	r1, #0
 8000176:	480b      	ldr	r0, [pc, #44]	@ (80001a4 <main+0x48>)
 8000178:	f001 fc28 	bl	80019cc <HAL_TIM_PWM_Start_IT>
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 800017c:	2201      	movs	r2, #1
 800017e:	490a      	ldr	r1, [pc, #40]	@ (80001a8 <main+0x4c>)
 8000180:	480a      	ldr	r0, [pc, #40]	@ (80001ac <main+0x50>)
 8000182:	f002 fcaf 	bl	8002ae4 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOA, CCW, GPIO_PIN_SET);
 8000186:	2201      	movs	r2, #1
 8000188:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800018c:	4808      	ldr	r0, [pc, #32]	@ (80001b0 <main+0x54>)
 800018e:	f000 ff4d 	bl	800102c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ENA, GPIO_PIN_RESET);
 8000192:	2200      	movs	r2, #0
 8000194:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000198:	4805      	ldr	r0, [pc, #20]	@ (80001b0 <main+0x54>)
 800019a:	f000 ff47 	bl	800102c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800019e:	bf00      	nop
 80001a0:	e7fd      	b.n	800019e <main+0x42>
 80001a2:	bf00      	nop
 80001a4:	20000078 	.word	0x20000078
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	200000c0 	.word	0x200000c0
 80001b0:	40010800 	.word	0x40010800

080001b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b090      	sub	sp, #64	@ 0x40
 80001b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	2228      	movs	r2, #40	@ 0x28
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f003 fa6e 	bl	80036a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]
 80001d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001d6:	2302      	movs	r3, #2
 80001d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001da:	2301      	movs	r3, #1
 80001dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001de:	2310      	movs	r3, #16
 80001e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001e2:	2300      	movs	r3, #0
 80001e4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e6:	f107 0318 	add.w	r3, r7, #24
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 ff36 	bl	800105c <HAL_RCC_OscConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001f6:	f000 f9d9 	bl	80005ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fa:	230f      	movs	r3, #15
 80001fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001fe:	2300      	movs	r3, #0
 8000200:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020a:	2300      	movs	r3, #0
 800020c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f001 f9a4 	bl	8001560 <HAL_RCC_ClockConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800021e:	f000 f9c5 	bl	80005ac <Error_Handler>
  }
}
 8000222:	bf00      	nop
 8000224:	3740      	adds	r7, #64	@ 0x40
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b096      	sub	sp, #88	@ 0x58
 8000230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000232:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000240:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800024a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
 8000258:	611a      	str	r2, [r3, #16]
 800025a:	615a      	str	r2, [r3, #20]
 800025c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2220      	movs	r2, #32
 8000262:	2100      	movs	r1, #0
 8000264:	4618      	mov	r0, r3
 8000266:	f003 fa1d 	bl	80036a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800026a:	4b3f      	ldr	r3, [pc, #252]	@ (8000368 <MX_TIM1_Init+0x13c>)
 800026c:	4a3f      	ldr	r2, [pc, #252]	@ (800036c <MX_TIM1_Init+0x140>)
 800026e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8000270:	4b3d      	ldr	r3, [pc, #244]	@ (8000368 <MX_TIM1_Init+0x13c>)
 8000272:	2207      	movs	r2, #7
 8000274:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000276:	4b3c      	ldr	r3, [pc, #240]	@ (8000368 <MX_TIM1_Init+0x13c>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800027c:	4b3a      	ldr	r3, [pc, #232]	@ (8000368 <MX_TIM1_Init+0x13c>)
 800027e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000282:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000284:	4b38      	ldr	r3, [pc, #224]	@ (8000368 <MX_TIM1_Init+0x13c>)
 8000286:	2200      	movs	r2, #0
 8000288:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800028a:	4b37      	ldr	r3, [pc, #220]	@ (8000368 <MX_TIM1_Init+0x13c>)
 800028c:	2200      	movs	r2, #0
 800028e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000290:	4b35      	ldr	r3, [pc, #212]	@ (8000368 <MX_TIM1_Init+0x13c>)
 8000292:	2280      	movs	r2, #128	@ 0x80
 8000294:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000296:	4834      	ldr	r0, [pc, #208]	@ (8000368 <MX_TIM1_Init+0x13c>)
 8000298:	f001 faf0 	bl	800187c <HAL_TIM_Base_Init>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80002a2:	f000 f983 	bl	80005ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80002ac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80002b0:	4619      	mov	r1, r3
 80002b2:	482d      	ldr	r0, [pc, #180]	@ (8000368 <MX_TIM1_Init+0x13c>)
 80002b4:	f001 fede 	bl	8002074 <HAL_TIM_ConfigClockSource>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80002be:	f000 f975 	bl	80005ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80002c2:	4829      	ldr	r0, [pc, #164]	@ (8000368 <MX_TIM1_Init+0x13c>)
 80002c4:	f001 fb29 	bl	800191a <HAL_TIM_PWM_Init>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80002ce:	f000 f96d 	bl	80005ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002d2:	2300      	movs	r3, #0
 80002d4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002d6:	2300      	movs	r3, #0
 80002d8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80002da:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80002de:	4619      	mov	r1, r3
 80002e0:	4821      	ldr	r0, [pc, #132]	@ (8000368 <MX_TIM1_Init+0x13c>)
 80002e2:	f002 fa63 	bl	80027ac <HAL_TIMEx_MasterConfigSynchronization>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80002ec:	f000 f95e 	bl	80005ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002f0:	2360      	movs	r3, #96	@ 0x60
 80002f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500;
 80002f4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80002f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002fa:	2300      	movs	r3, #0
 80002fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80002fe:	2300      	movs	r3, #0
 8000300:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000302:	2300      	movs	r3, #0
 8000304:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000306:	2300      	movs	r3, #0
 8000308:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800030a:	2300      	movs	r3, #0
 800030c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800030e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000312:	2200      	movs	r2, #0
 8000314:	4619      	mov	r1, r3
 8000316:	4814      	ldr	r0, [pc, #80]	@ (8000368 <MX_TIM1_Init+0x13c>)
 8000318:	f001 fdea 	bl	8001ef0 <HAL_TIM_PWM_ConfigChannel>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000322:	f000 f943 	bl	80005ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000326:	2300      	movs	r3, #0
 8000328:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800032a:	2300      	movs	r3, #0
 800032c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000332:	2300      	movs	r3, #0
 8000334:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000336:	2300      	movs	r3, #0
 8000338:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800033a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800033e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000340:	2300      	movs	r3, #0
 8000342:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	4619      	mov	r1, r3
 8000348:	4807      	ldr	r0, [pc, #28]	@ (8000368 <MX_TIM1_Init+0x13c>)
 800034a:	f002 fa8d 	bl	8002868 <HAL_TIMEx_ConfigBreakDeadTime>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000354:	f000 f92a 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000358:	4803      	ldr	r0, [pc, #12]	@ (8000368 <MX_TIM1_Init+0x13c>)
 800035a:	f000 f98d 	bl	8000678 <HAL_TIM_MspPostInit>

}
 800035e:	bf00      	nop
 8000360:	3758      	adds	r7, #88	@ 0x58
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000078 	.word	0x20000078
 800036c:	40012c00 	.word	0x40012c00

08000370 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000374:	4b11      	ldr	r3, [pc, #68]	@ (80003bc <MX_USART1_UART_Init+0x4c>)
 8000376:	4a12      	ldr	r2, [pc, #72]	@ (80003c0 <MX_USART1_UART_Init+0x50>)
 8000378:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800037a:	4b10      	ldr	r3, [pc, #64]	@ (80003bc <MX_USART1_UART_Init+0x4c>)
 800037c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000380:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000382:	4b0e      	ldr	r3, [pc, #56]	@ (80003bc <MX_USART1_UART_Init+0x4c>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000388:	4b0c      	ldr	r3, [pc, #48]	@ (80003bc <MX_USART1_UART_Init+0x4c>)
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800038e:	4b0b      	ldr	r3, [pc, #44]	@ (80003bc <MX_USART1_UART_Init+0x4c>)
 8000390:	2200      	movs	r2, #0
 8000392:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000394:	4b09      	ldr	r3, [pc, #36]	@ (80003bc <MX_USART1_UART_Init+0x4c>)
 8000396:	220c      	movs	r2, #12
 8000398:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800039a:	4b08      	ldr	r3, [pc, #32]	@ (80003bc <MX_USART1_UART_Init+0x4c>)
 800039c:	2200      	movs	r2, #0
 800039e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a0:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <MX_USART1_UART_Init+0x4c>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003a6:	4805      	ldr	r0, [pc, #20]	@ (80003bc <MX_USART1_UART_Init+0x4c>)
 80003a8:	f002 fac1 	bl	800292e <HAL_UART_Init>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003b2:	f000 f8fb 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	200000c0 	.word	0x200000c0
 80003c0:	40013800 	.word	0x40013800

080003c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ca:	f107 0308 	add.w	r3, r7, #8
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d8:	4b18      	ldr	r3, [pc, #96]	@ (800043c <MX_GPIO_Init+0x78>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a17      	ldr	r2, [pc, #92]	@ (800043c <MX_GPIO_Init+0x78>)
 80003de:	f043 0320 	orr.w	r3, r3, #32
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b15      	ldr	r3, [pc, #84]	@ (800043c <MX_GPIO_Init+0x78>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0320 	and.w	r3, r3, #32
 80003ec:	607b      	str	r3, [r7, #4]
 80003ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f0:	4b12      	ldr	r3, [pc, #72]	@ (800043c <MX_GPIO_Init+0x78>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a11      	ldr	r2, [pc, #68]	@ (800043c <MX_GPIO_Init+0x78>)
 80003f6:	f043 0304 	orr.w	r3, r3, #4
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b0f      	ldr	r3, [pc, #60]	@ (800043c <MX_GPIO_Init+0x78>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0304 	and.w	r3, r3, #4
 8000404:	603b      	str	r3, [r7, #0]
 8000406:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800040e:	480c      	ldr	r0, [pc, #48]	@ (8000440 <MX_GPIO_Init+0x7c>)
 8000410:	f000 fe0c 	bl	800102c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000414:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000418:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041a:	2301      	movs	r3, #1
 800041c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041e:	2300      	movs	r3, #0
 8000420:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000422:	2302      	movs	r3, #2
 8000424:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000426:	f107 0308 	add.w	r3, r7, #8
 800042a:	4619      	mov	r1, r3
 800042c:	4804      	ldr	r0, [pc, #16]	@ (8000440 <MX_GPIO_Init+0x7c>)
 800042e:	f000 fc79 	bl	8000d24 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000432:	bf00      	nop
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000
 8000440:	40010800 	.word	0x40010800

08000444 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM1 )
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a13      	ldr	r2, [pc, #76]	@ (80004a0 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d11f      	bne.n	8000496 <HAL_TIM_PWM_PulseFinishedCallback+0x52>
    {

        step_count++;
 8000456:	4b13      	ldr	r3, [pc, #76]	@ (80004a4 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 8000458:	881b      	ldrh	r3, [r3, #0]
 800045a:	3301      	adds	r3, #1
 800045c:	b29a      	uxth	r2, r3
 800045e:	4b11      	ldr	r3, [pc, #68]	@ (80004a4 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 8000460:	801a      	strh	r2, [r3, #0]
//        sprintf(msg, "Step: %lu\r\n", step_count);
//            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
        if(step_count >=250)
 8000462:	4b10      	ldr	r3, [pc, #64]	@ (80004a4 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 8000464:	881b      	ldrh	r3, [r3, #0]
 8000466:	2bf9      	cmp	r3, #249	@ 0xf9
 8000468:	d908      	bls.n	800047c <HAL_TIM_PWM_PulseFinishedCallback+0x38>
        {
        	CurrentRounds++;
 800046a:	4b0f      	ldr	r3, [pc, #60]	@ (80004a8 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	3301      	adds	r3, #1
 8000470:	b2da      	uxtb	r2, r3
 8000472:	4b0d      	ldr	r3, [pc, #52]	@ (80004a8 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8000474:	701a      	strb	r2, [r3, #0]
            step_count = 0;
 8000476:	4b0b      	ldr	r3, [pc, #44]	@ (80004a4 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 8000478:	2200      	movs	r2, #0
 800047a:	801a      	strh	r2, [r3, #0]
            //HAL_GPIO_TogglePin(GPIOA, CCW); // Đảo DIR

        }
        if(CurrentRounds >= rounds){
 800047c:	4b0a      	ldr	r3, [pc, #40]	@ (80004a8 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 800047e:	781a      	ldrb	r2, [r3, #0]
 8000480:	4b0a      	ldr	r3, [pc, #40]	@ (80004ac <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	429a      	cmp	r2, r3
 8000486:	d306      	bcc.n	8000496 <HAL_TIM_PWM_PulseFinishedCallback+0x52>
        	//HAL_GPIO_WritePin(GPIOA, ENA, GPIO_PIN_RESET);
        	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000488:	2100      	movs	r1, #0
 800048a:	4809      	ldr	r0, [pc, #36]	@ (80004b0 <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 800048c:	f001 fb8e 	bl	8001bac <HAL_TIM_PWM_Stop_IT>
        	CurrentRounds =0;
 8000490:	4b05      	ldr	r3, [pc, #20]	@ (80004a8 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8000492:	2200      	movs	r2, #0
 8000494:	701a      	strb	r2, [r3, #0]
        }


    }
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40012c00 	.word	0x40012c00
 80004a4:	20000108 	.word	0x20000108
 80004a8:	20000173 	.word	0x20000173
 80004ac:	20000171 	.word	0x20000171
 80004b0:	20000078 	.word	0x20000078

080004b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1){
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a2e      	ldr	r2, [pc, #184]	@ (800057c <HAL_UART_RxCpltCallback+0xc8>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d155      	bne.n	8000572 <HAL_UART_RxCpltCallback+0xbe>
		if(rxData == '\n'){
 80004c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000580 <HAL_UART_RxCpltCallback+0xcc>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b0a      	cmp	r3, #10
 80004cc:	d13d      	bne.n	800054a <HAL_UART_RxCpltCallback+0x96>
			rxBuffer[rxIndex] ='\0';
 80004ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000584 <HAL_UART_RxCpltCallback+0xd0>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	461a      	mov	r2, r3
 80004d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000588 <HAL_UART_RxCpltCallback+0xd4>)
 80004d6:	2100      	movs	r1, #0
 80004d8:	5499      	strb	r1, [r3, r2]

			sscanf((char*)rxBuffer, "%d %d", &rounds, &dir);
 80004da:	4b2c      	ldr	r3, [pc, #176]	@ (800058c <HAL_UART_RxCpltCallback+0xd8>)
 80004dc:	4a2c      	ldr	r2, [pc, #176]	@ (8000590 <HAL_UART_RxCpltCallback+0xdc>)
 80004de:	492d      	ldr	r1, [pc, #180]	@ (8000594 <HAL_UART_RxCpltCallback+0xe0>)
 80004e0:	4829      	ldr	r0, [pc, #164]	@ (8000588 <HAL_UART_RxCpltCallback+0xd4>)
 80004e2:	f003 f8b1 	bl	8003648 <siscanf>

			sprintf(msg, "Rounds=%d, Dir=%d\r\n", rounds, dir);
 80004e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000590 <HAL_UART_RxCpltCallback+0xdc>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	461a      	mov	r2, r3
 80004ec:	4b27      	ldr	r3, [pc, #156]	@ (800058c <HAL_UART_RxCpltCallback+0xd8>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	4929      	ldr	r1, [pc, #164]	@ (8000598 <HAL_UART_RxCpltCallback+0xe4>)
 80004f2:	482a      	ldr	r0, [pc, #168]	@ (800059c <HAL_UART_RxCpltCallback+0xe8>)
 80004f4:	f003 f886 	bl	8003604 <siprintf>
			if(dir==0)
 80004f8:	4b24      	ldr	r3, [pc, #144]	@ (800058c <HAL_UART_RxCpltCallback+0xd8>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d106      	bne.n	800050e <HAL_UART_RxCpltCallback+0x5a>
        	HAL_GPIO_WritePin(GPIOA, CCW, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000506:	4826      	ldr	r0, [pc, #152]	@ (80005a0 <HAL_UART_RxCpltCallback+0xec>)
 8000508:	f000 fd90 	bl	800102c <HAL_GPIO_WritePin>
 800050c:	e005      	b.n	800051a <HAL_UART_RxCpltCallback+0x66>
			else
	        HAL_GPIO_WritePin(GPIOA, CCW, GPIO_PIN_SET);
 800050e:	2201      	movs	r2, #1
 8000510:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000514:	4822      	ldr	r0, [pc, #136]	@ (80005a0 <HAL_UART_RxCpltCallback+0xec>)
 8000516:	f000 fd89 	bl	800102c <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800051a:	4820      	ldr	r0, [pc, #128]	@ (800059c <HAL_UART_RxCpltCallback+0xe8>)
 800051c:	f7ff fe16 	bl	800014c <strlen>
 8000520:	4603      	mov	r3, r0
 8000522:	b29a      	uxth	r2, r3
 8000524:	f04f 33ff 	mov.w	r3, #4294967295
 8000528:	491c      	ldr	r1, [pc, #112]	@ (800059c <HAL_UART_RxCpltCallback+0xe8>)
 800052a:	481e      	ldr	r0, [pc, #120]	@ (80005a4 <HAL_UART_RxCpltCallback+0xf0>)
 800052c:	f002 fa4f 	bl	80029ce <HAL_UART_Transmit>

			rxIndex =0;
 8000530:	4b14      	ldr	r3, [pc, #80]	@ (8000584 <HAL_UART_RxCpltCallback+0xd0>)
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]
			memset(rxBuffer, 0, sizeof(rxBuffer));
 8000536:	2220      	movs	r2, #32
 8000538:	2100      	movs	r1, #0
 800053a:	4813      	ldr	r0, [pc, #76]	@ (8000588 <HAL_UART_RxCpltCallback+0xd4>)
 800053c:	f003 f8b2 	bl	80036a4 <memset>
			HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000540:	2100      	movs	r1, #0
 8000542:	4819      	ldr	r0, [pc, #100]	@ (80005a8 <HAL_UART_RxCpltCallback+0xf4>)
 8000544:	f001 fa42 	bl	80019cc <HAL_TIM_PWM_Start_IT>
 8000548:	e00e      	b.n	8000568 <HAL_UART_RxCpltCallback+0xb4>
		}
		else {
            if (rxIndex < sizeof(rxBuffer) - 1) {
 800054a:	4b0e      	ldr	r3, [pc, #56]	@ (8000584 <HAL_UART_RxCpltCallback+0xd0>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b1e      	cmp	r3, #30
 8000550:	d80a      	bhi.n	8000568 <HAL_UART_RxCpltCallback+0xb4>
                rxBuffer[rxIndex++] = rxData;
 8000552:	4b0c      	ldr	r3, [pc, #48]	@ (8000584 <HAL_UART_RxCpltCallback+0xd0>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	b2d1      	uxtb	r1, r2
 800055a:	4a0a      	ldr	r2, [pc, #40]	@ (8000584 <HAL_UART_RxCpltCallback+0xd0>)
 800055c:	7011      	strb	r1, [r2, #0]
 800055e:	461a      	mov	r2, r3
 8000560:	4b07      	ldr	r3, [pc, #28]	@ (8000580 <HAL_UART_RxCpltCallback+0xcc>)
 8000562:	7819      	ldrb	r1, [r3, #0]
 8000564:	4b08      	ldr	r3, [pc, #32]	@ (8000588 <HAL_UART_RxCpltCallback+0xd4>)
 8000566:	5499      	strb	r1, [r3, r2]
            }
		}
		HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8000568:	2201      	movs	r2, #1
 800056a:	4905      	ldr	r1, [pc, #20]	@ (8000580 <HAL_UART_RxCpltCallback+0xcc>)
 800056c:	480d      	ldr	r0, [pc, #52]	@ (80005a4 <HAL_UART_RxCpltCallback+0xf0>)
 800056e:	f002 fab9 	bl	8002ae4 <HAL_UART_Receive_IT>

	}
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40013800 	.word	0x40013800
 8000580:	2000014c 	.word	0x2000014c
 8000584:	20000170 	.word	0x20000170
 8000588:	20000150 	.word	0x20000150
 800058c:	20000172 	.word	0x20000172
 8000590:	20000171 	.word	0x20000171
 8000594:	080048c8 	.word	0x080048c8
 8000598:	080048d0 	.word	0x080048d0
 800059c:	2000010c 	.word	0x2000010c
 80005a0:	40010800 	.word	0x40010800
 80005a4:	200000c0 	.word	0x200000c0
 80005a8:	20000078 	.word	0x20000078

080005ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b0:	b672      	cpsid	i
}
 80005b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <Error_Handler+0x8>

080005b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005be:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <HAL_MspInit+0x5c>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	4a14      	ldr	r2, [pc, #80]	@ (8000614 <HAL_MspInit+0x5c>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6193      	str	r3, [r2, #24]
 80005ca:	4b12      	ldr	r3, [pc, #72]	@ (8000614 <HAL_MspInit+0x5c>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <HAL_MspInit+0x5c>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	4a0e      	ldr	r2, [pc, #56]	@ (8000614 <HAL_MspInit+0x5c>)
 80005dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e0:	61d3      	str	r3, [r2, #28]
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <HAL_MspInit+0x5c>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <HAL_MspInit+0x60>)
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	4a04      	ldr	r2, [pc, #16]	@ (8000618 <HAL_MspInit+0x60>)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	40021000 	.word	0x40021000
 8000618:	40010000 	.word	0x40010000

0800061c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a11      	ldr	r2, [pc, #68]	@ (8000670 <HAL_TIM_Base_MspInit+0x54>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d11b      	bne.n	8000666 <HAL_TIM_Base_MspInit+0x4a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <HAL_TIM_Base_MspInit+0x58>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	4a10      	ldr	r2, [pc, #64]	@ (8000674 <HAL_TIM_Base_MspInit+0x58>)
 8000634:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000638:	6193      	str	r3, [r2, #24]
 800063a:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <HAL_TIM_Base_MspInit+0x58>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2100      	movs	r1, #0
 800064a:	2019      	movs	r0, #25
 800064c:	f000 fa81 	bl	8000b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000650:	2019      	movs	r0, #25
 8000652:	f000 fa9a 	bl	8000b8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000656:	2200      	movs	r2, #0
 8000658:	2100      	movs	r1, #0
 800065a:	201b      	movs	r0, #27
 800065c:	f000 fa79 	bl	8000b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000660:	201b      	movs	r0, #27
 8000662:	f000 fa92 	bl	8000b8a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40012c00 	.word	0x40012c00
 8000674:	40021000 	.word	0x40021000

08000678 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a10      	ldr	r2, [pc, #64]	@ (80006d4 <HAL_TIM_MspPostInit+0x5c>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d118      	bne.n	80006ca <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000698:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <HAL_TIM_MspPostInit+0x60>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a0e      	ldr	r2, [pc, #56]	@ (80006d8 <HAL_TIM_MspPostInit+0x60>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <HAL_TIM_MspPostInit+0x60>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0304 	and.w	r3, r3, #4
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b6:	2302      	movs	r3, #2
 80006b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	2302      	movs	r3, #2
 80006bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	@ (80006dc <HAL_TIM_MspPostInit+0x64>)
 80006c6:	f000 fb2d 	bl	8000d24 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80006ca:	bf00      	nop
 80006cc:	3720      	adds	r7, #32
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40012c00 	.word	0x40012c00
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40010800 	.word	0x40010800

080006e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <HAL_UART_MspInit+0x9c>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d139      	bne.n	8000774 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000700:	4b1f      	ldr	r3, [pc, #124]	@ (8000780 <HAL_UART_MspInit+0xa0>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a1e      	ldr	r2, [pc, #120]	@ (8000780 <HAL_UART_MspInit+0xa0>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b1c      	ldr	r3, [pc, #112]	@ (8000780 <HAL_UART_MspInit+0xa0>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b19      	ldr	r3, [pc, #100]	@ (8000780 <HAL_UART_MspInit+0xa0>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a18      	ldr	r2, [pc, #96]	@ (8000780 <HAL_UART_MspInit+0xa0>)
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b16      	ldr	r3, [pc, #88]	@ (8000780 <HAL_UART_MspInit+0xa0>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0304 	and.w	r3, r3, #4
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000730:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000734:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000736:	2302      	movs	r3, #2
 8000738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073a:	2303      	movs	r3, #3
 800073c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073e:	f107 0310 	add.w	r3, r7, #16
 8000742:	4619      	mov	r1, r3
 8000744:	480f      	ldr	r0, [pc, #60]	@ (8000784 <HAL_UART_MspInit+0xa4>)
 8000746:	f000 faed 	bl	8000d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800074a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800074e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	4619      	mov	r1, r3
 800075e:	4809      	ldr	r0, [pc, #36]	@ (8000784 <HAL_UART_MspInit+0xa4>)
 8000760:	f000 fae0 	bl	8000d24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2100      	movs	r1, #0
 8000768:	2025      	movs	r0, #37	@ 0x25
 800076a:	f000 f9f2 	bl	8000b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800076e:	2025      	movs	r0, #37	@ 0x25
 8000770:	f000 fa0b 	bl	8000b8a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000774:	bf00      	nop
 8000776:	3720      	adds	r7, #32
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40013800 	.word	0x40013800
 8000780:	40021000 	.word	0x40021000
 8000784:	40010800 	.word	0x40010800

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <NMI_Handler+0x4>

08000790 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <HardFault_Handler+0x4>

08000798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <MemManage_Handler+0x4>

080007a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <BusFault_Handler+0x4>

080007a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <UsageFault_Handler+0x4>

080007b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d8:	f000 f8c8 	bl	800096c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007e4:	4802      	ldr	r0, [pc, #8]	@ (80007f0 <TIM1_UP_IRQHandler+0x10>)
 80007e6:	f001 fa93 	bl	8001d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000078 	.word	0x20000078

080007f4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007f8:	4802      	ldr	r0, [pc, #8]	@ (8000804 <TIM1_CC_IRQHandler+0x10>)
 80007fa:	f001 fa89 	bl	8001d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000078 	.word	0x20000078

08000808 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800080c:	4802      	ldr	r0, [pc, #8]	@ (8000818 <USART1_IRQHandler+0x10>)
 800080e:	f002 f98f 	bl	8002b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200000c0 	.word	0x200000c0

0800081c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000824:	4a14      	ldr	r2, [pc, #80]	@ (8000878 <_sbrk+0x5c>)
 8000826:	4b15      	ldr	r3, [pc, #84]	@ (800087c <_sbrk+0x60>)
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000830:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <_sbrk+0x64>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d102      	bne.n	800083e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000838:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <_sbrk+0x64>)
 800083a:	4a12      	ldr	r2, [pc, #72]	@ (8000884 <_sbrk+0x68>)
 800083c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800083e:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <_sbrk+0x64>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	693a      	ldr	r2, [r7, #16]
 8000848:	429a      	cmp	r2, r3
 800084a:	d207      	bcs.n	800085c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800084c:	f002 ff32 	bl	80036b4 <__errno>
 8000850:	4603      	mov	r3, r0
 8000852:	220c      	movs	r2, #12
 8000854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000856:	f04f 33ff 	mov.w	r3, #4294967295
 800085a:	e009      	b.n	8000870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800085c:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <_sbrk+0x64>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000862:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <_sbrk+0x64>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4413      	add	r3, r2
 800086a:	4a05      	ldr	r2, [pc, #20]	@ (8000880 <_sbrk+0x64>)
 800086c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800086e:	68fb      	ldr	r3, [r7, #12]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20005000 	.word	0x20005000
 800087c:	00000400 	.word	0x00000400
 8000880:	20000174 	.word	0x20000174
 8000884:	200002c8 	.word	0x200002c8

08000888 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr

08000894 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000894:	f7ff fff8 	bl	8000888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000898:	480b      	ldr	r0, [pc, #44]	@ (80008c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800089a:	490c      	ldr	r1, [pc, #48]	@ (80008cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800089c:	4a0c      	ldr	r2, [pc, #48]	@ (80008d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a0:	e002      	b.n	80008a8 <LoopCopyDataInit>

080008a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a6:	3304      	adds	r3, #4

080008a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ac:	d3f9      	bcc.n	80008a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ae:	4a09      	ldr	r2, [pc, #36]	@ (80008d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008b0:	4c09      	ldr	r4, [pc, #36]	@ (80008d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b4:	e001      	b.n	80008ba <LoopFillZerobss>

080008b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b8:	3204      	adds	r2, #4

080008ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008bc:	d3fb      	bcc.n	80008b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008be:	f002 feff 	bl	80036c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008c2:	f7ff fc4b 	bl	800015c <main>
  bx lr
 80008c6:	4770      	bx	lr
  ldr r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008cc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008d0:	08004a7c 	.word	0x08004a7c
  ldr r2, =_sbss
 80008d4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008d8:	200002c4 	.word	0x200002c4

080008dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008dc:	e7fe      	b.n	80008dc <ADC1_2_IRQHandler>
	...

080008e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e4:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <HAL_Init+0x28>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a07      	ldr	r2, [pc, #28]	@ (8000908 <HAL_Init+0x28>)
 80008ea:	f043 0310 	orr.w	r3, r3, #16
 80008ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f0:	2003      	movs	r0, #3
 80008f2:	f000 f923 	bl	8000b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f6:	200f      	movs	r0, #15
 80008f8:	f000 f808 	bl	800090c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008fc:	f7ff fe5c 	bl	80005b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40022000 	.word	0x40022000

0800090c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <HAL_InitTick+0x54>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <HAL_InitTick+0x58>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4619      	mov	r1, r3
 800091e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000922:	fbb3 f3f1 	udiv	r3, r3, r1
 8000926:	fbb2 f3f3 	udiv	r3, r2, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f000 f93b 	bl	8000ba6 <HAL_SYSTICK_Config>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	e00e      	b.n	8000958 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b0f      	cmp	r3, #15
 800093e:	d80a      	bhi.n	8000956 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000940:	2200      	movs	r2, #0
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	f000 f903 	bl	8000b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800094c:	4a06      	ldr	r2, [pc, #24]	@ (8000968 <HAL_InitTick+0x5c>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000952:	2300      	movs	r3, #0
 8000954:	e000      	b.n	8000958 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000000 	.word	0x20000000
 8000964:	20000008 	.word	0x20000008
 8000968:	20000004 	.word	0x20000004

0800096c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000970:	4b05      	ldr	r3, [pc, #20]	@ (8000988 <HAL_IncTick+0x1c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	4b05      	ldr	r3, [pc, #20]	@ (800098c <HAL_IncTick+0x20>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4413      	add	r3, r2
 800097c:	4a03      	ldr	r2, [pc, #12]	@ (800098c <HAL_IncTick+0x20>)
 800097e:	6013      	str	r3, [r2, #0]
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	20000008 	.word	0x20000008
 800098c:	20000178 	.word	0x20000178

08000990 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return uwTick;
 8000994:	4b02      	ldr	r3, [pc, #8]	@ (80009a0 <HAL_GetTick+0x10>)
 8000996:	681b      	ldr	r3, [r3, #0]
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr
 80009a0:	20000178 	.word	0x20000178

080009a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b4:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009c0:	4013      	ands	r3, r2
 80009c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009d6:	4a04      	ldr	r2, [pc, #16]	@ (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	60d3      	str	r3, [r2, #12]
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f0:	4b04      	ldr	r3, [pc, #16]	@ (8000a04 <__NVIC_GetPriorityGrouping+0x18>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	0a1b      	lsrs	r3, r3, #8
 80009f6:	f003 0307 	and.w	r3, r3, #7
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	db0b      	blt.n	8000a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	f003 021f 	and.w	r2, r3, #31
 8000a20:	4906      	ldr	r1, [pc, #24]	@ (8000a3c <__NVIC_EnableIRQ+0x34>)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	095b      	lsrs	r3, r3, #5
 8000a28:	2001      	movs	r0, #1
 8000a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	e000e100 	.word	0xe000e100

08000a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	db0a      	blt.n	8000a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	490c      	ldr	r1, [pc, #48]	@ (8000a8c <__NVIC_SetPriority+0x4c>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	0112      	lsls	r2, r2, #4
 8000a60:	b2d2      	uxtb	r2, r2
 8000a62:	440b      	add	r3, r1
 8000a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a68:	e00a      	b.n	8000a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4908      	ldr	r1, [pc, #32]	@ (8000a90 <__NVIC_SetPriority+0x50>)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	f003 030f 	and.w	r3, r3, #15
 8000a76:	3b04      	subs	r3, #4
 8000a78:	0112      	lsls	r2, r2, #4
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	440b      	add	r3, r1
 8000a7e:	761a      	strb	r2, [r3, #24]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000e100 	.word	0xe000e100
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b089      	sub	sp, #36	@ 0x24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	f1c3 0307 	rsb	r3, r3, #7
 8000aae:	2b04      	cmp	r3, #4
 8000ab0:	bf28      	it	cs
 8000ab2:	2304      	movcs	r3, #4
 8000ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	2b06      	cmp	r3, #6
 8000abc:	d902      	bls.n	8000ac4 <NVIC_EncodePriority+0x30>
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3b03      	subs	r3, #3
 8000ac2:	e000      	b.n	8000ac6 <NVIC_EncodePriority+0x32>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43da      	mvns	r2, r3
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000adc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	43d9      	mvns	r1, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	4313      	orrs	r3, r2
         );
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3724      	adds	r7, #36	@ 0x24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b08:	d301      	bcc.n	8000b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00f      	b.n	8000b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b38 <SysTick_Config+0x40>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b16:	210f      	movs	r1, #15
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f7ff ff90 	bl	8000a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b20:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <SysTick_Config+0x40>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b26:	4b04      	ldr	r3, [pc, #16]	@ (8000b38 <SysTick_Config+0x40>)
 8000b28:	2207      	movs	r2, #7
 8000b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	e000e010 	.word	0xe000e010

08000b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ff2d 	bl	80009a4 <__NVIC_SetPriorityGrouping>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b64:	f7ff ff42 	bl	80009ec <__NVIC_GetPriorityGrouping>
 8000b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	68b9      	ldr	r1, [r7, #8]
 8000b6e:	6978      	ldr	r0, [r7, #20]
 8000b70:	f7ff ff90 	bl	8000a94 <NVIC_EncodePriority>
 8000b74:	4602      	mov	r2, r0
 8000b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff5f 	bl	8000a40 <__NVIC_SetPriority>
}
 8000b82:	bf00      	nop
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff35 	bl	8000a08 <__NVIC_EnableIRQ>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffa2 	bl	8000af8 <SysTick_Config>
 8000bb4:	4603      	mov	r3, r0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b085      	sub	sp, #20
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d008      	beq.n	8000be8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2204      	movs	r2, #4
 8000bda:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e020      	b.n	8000c2a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f022 020e 	bic.w	r2, r2, #14
 8000bf6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f022 0201 	bic.w	r2, r2, #1
 8000c06:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c10:	2101      	movs	r1, #1
 8000c12:	fa01 f202 	lsl.w	r2, r1, r2
 8000c16:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d005      	beq.n	8000c58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2204      	movs	r2, #4
 8000c50:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	73fb      	strb	r3, [r7, #15]
 8000c56:	e051      	b.n	8000cfc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f022 020e 	bic.w	r2, r2, #14
 8000c66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f022 0201 	bic.w	r2, r2, #1
 8000c76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a22      	ldr	r2, [pc, #136]	@ (8000d08 <HAL_DMA_Abort_IT+0xd4>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d029      	beq.n	8000cd6 <HAL_DMA_Abort_IT+0xa2>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a21      	ldr	r2, [pc, #132]	@ (8000d0c <HAL_DMA_Abort_IT+0xd8>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d022      	beq.n	8000cd2 <HAL_DMA_Abort_IT+0x9e>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a1f      	ldr	r2, [pc, #124]	@ (8000d10 <HAL_DMA_Abort_IT+0xdc>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d01a      	beq.n	8000ccc <HAL_DMA_Abort_IT+0x98>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8000d14 <HAL_DMA_Abort_IT+0xe0>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d012      	beq.n	8000cc6 <HAL_DMA_Abort_IT+0x92>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8000d18 <HAL_DMA_Abort_IT+0xe4>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d00a      	beq.n	8000cc0 <HAL_DMA_Abort_IT+0x8c>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a1b      	ldr	r2, [pc, #108]	@ (8000d1c <HAL_DMA_Abort_IT+0xe8>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d102      	bne.n	8000cba <HAL_DMA_Abort_IT+0x86>
 8000cb4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000cb8:	e00e      	b.n	8000cd8 <HAL_DMA_Abort_IT+0xa4>
 8000cba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000cbe:	e00b      	b.n	8000cd8 <HAL_DMA_Abort_IT+0xa4>
 8000cc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cc4:	e008      	b.n	8000cd8 <HAL_DMA_Abort_IT+0xa4>
 8000cc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cca:	e005      	b.n	8000cd8 <HAL_DMA_Abort_IT+0xa4>
 8000ccc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cd0:	e002      	b.n	8000cd8 <HAL_DMA_Abort_IT+0xa4>
 8000cd2:	2310      	movs	r3, #16
 8000cd4:	e000      	b.n	8000cd8 <HAL_DMA_Abort_IT+0xa4>
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	4a11      	ldr	r2, [pc, #68]	@ (8000d20 <HAL_DMA_Abort_IT+0xec>)
 8000cda:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d003      	beq.n	8000cfc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	4798      	blx	r3
    } 
  }
  return status;
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40020008 	.word	0x40020008
 8000d0c:	4002001c 	.word	0x4002001c
 8000d10:	40020030 	.word	0x40020030
 8000d14:	40020044 	.word	0x40020044
 8000d18:	40020058 	.word	0x40020058
 8000d1c:	4002006c 	.word	0x4002006c
 8000d20:	40020000 	.word	0x40020000

08000d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b08b      	sub	sp, #44	@ 0x2c
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d32:	2300      	movs	r3, #0
 8000d34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d36:	e169      	b.n	800100c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	69fa      	ldr	r2, [r7, #28]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f040 8158 	bne.w	8001006 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	4a9a      	ldr	r2, [pc, #616]	@ (8000fc4 <HAL_GPIO_Init+0x2a0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d05e      	beq.n	8000e1e <HAL_GPIO_Init+0xfa>
 8000d60:	4a98      	ldr	r2, [pc, #608]	@ (8000fc4 <HAL_GPIO_Init+0x2a0>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d875      	bhi.n	8000e52 <HAL_GPIO_Init+0x12e>
 8000d66:	4a98      	ldr	r2, [pc, #608]	@ (8000fc8 <HAL_GPIO_Init+0x2a4>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d058      	beq.n	8000e1e <HAL_GPIO_Init+0xfa>
 8000d6c:	4a96      	ldr	r2, [pc, #600]	@ (8000fc8 <HAL_GPIO_Init+0x2a4>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d86f      	bhi.n	8000e52 <HAL_GPIO_Init+0x12e>
 8000d72:	4a96      	ldr	r2, [pc, #600]	@ (8000fcc <HAL_GPIO_Init+0x2a8>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d052      	beq.n	8000e1e <HAL_GPIO_Init+0xfa>
 8000d78:	4a94      	ldr	r2, [pc, #592]	@ (8000fcc <HAL_GPIO_Init+0x2a8>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d869      	bhi.n	8000e52 <HAL_GPIO_Init+0x12e>
 8000d7e:	4a94      	ldr	r2, [pc, #592]	@ (8000fd0 <HAL_GPIO_Init+0x2ac>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d04c      	beq.n	8000e1e <HAL_GPIO_Init+0xfa>
 8000d84:	4a92      	ldr	r2, [pc, #584]	@ (8000fd0 <HAL_GPIO_Init+0x2ac>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d863      	bhi.n	8000e52 <HAL_GPIO_Init+0x12e>
 8000d8a:	4a92      	ldr	r2, [pc, #584]	@ (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d046      	beq.n	8000e1e <HAL_GPIO_Init+0xfa>
 8000d90:	4a90      	ldr	r2, [pc, #576]	@ (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d85d      	bhi.n	8000e52 <HAL_GPIO_Init+0x12e>
 8000d96:	2b12      	cmp	r3, #18
 8000d98:	d82a      	bhi.n	8000df0 <HAL_GPIO_Init+0xcc>
 8000d9a:	2b12      	cmp	r3, #18
 8000d9c:	d859      	bhi.n	8000e52 <HAL_GPIO_Init+0x12e>
 8000d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8000da4 <HAL_GPIO_Init+0x80>)
 8000da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da4:	08000e1f 	.word	0x08000e1f
 8000da8:	08000df9 	.word	0x08000df9
 8000dac:	08000e0b 	.word	0x08000e0b
 8000db0:	08000e4d 	.word	0x08000e4d
 8000db4:	08000e53 	.word	0x08000e53
 8000db8:	08000e53 	.word	0x08000e53
 8000dbc:	08000e53 	.word	0x08000e53
 8000dc0:	08000e53 	.word	0x08000e53
 8000dc4:	08000e53 	.word	0x08000e53
 8000dc8:	08000e53 	.word	0x08000e53
 8000dcc:	08000e53 	.word	0x08000e53
 8000dd0:	08000e53 	.word	0x08000e53
 8000dd4:	08000e53 	.word	0x08000e53
 8000dd8:	08000e53 	.word	0x08000e53
 8000ddc:	08000e53 	.word	0x08000e53
 8000de0:	08000e53 	.word	0x08000e53
 8000de4:	08000e53 	.word	0x08000e53
 8000de8:	08000e01 	.word	0x08000e01
 8000dec:	08000e15 	.word	0x08000e15
 8000df0:	4a79      	ldr	r2, [pc, #484]	@ (8000fd8 <HAL_GPIO_Init+0x2b4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d013      	beq.n	8000e1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000df6:	e02c      	b.n	8000e52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	623b      	str	r3, [r7, #32]
          break;
 8000dfe:	e029      	b.n	8000e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	3304      	adds	r3, #4
 8000e06:	623b      	str	r3, [r7, #32]
          break;
 8000e08:	e024      	b.n	8000e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	3308      	adds	r3, #8
 8000e10:	623b      	str	r3, [r7, #32]
          break;
 8000e12:	e01f      	b.n	8000e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	330c      	adds	r3, #12
 8000e1a:	623b      	str	r3, [r7, #32]
          break;
 8000e1c:	e01a      	b.n	8000e54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d102      	bne.n	8000e2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e26:	2304      	movs	r3, #4
 8000e28:	623b      	str	r3, [r7, #32]
          break;
 8000e2a:	e013      	b.n	8000e54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d105      	bne.n	8000e40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e34:	2308      	movs	r3, #8
 8000e36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	69fa      	ldr	r2, [r7, #28]
 8000e3c:	611a      	str	r2, [r3, #16]
          break;
 8000e3e:	e009      	b.n	8000e54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e40:	2308      	movs	r3, #8
 8000e42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69fa      	ldr	r2, [r7, #28]
 8000e48:	615a      	str	r2, [r3, #20]
          break;
 8000e4a:	e003      	b.n	8000e54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	623b      	str	r3, [r7, #32]
          break;
 8000e50:	e000      	b.n	8000e54 <HAL_GPIO_Init+0x130>
          break;
 8000e52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	2bff      	cmp	r3, #255	@ 0xff
 8000e58:	d801      	bhi.n	8000e5e <HAL_GPIO_Init+0x13a>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	e001      	b.n	8000e62 <HAL_GPIO_Init+0x13e>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3304      	adds	r3, #4
 8000e62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	2bff      	cmp	r3, #255	@ 0xff
 8000e68:	d802      	bhi.n	8000e70 <HAL_GPIO_Init+0x14c>
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	e002      	b.n	8000e76 <HAL_GPIO_Init+0x152>
 8000e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e72:	3b08      	subs	r3, #8
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	210f      	movs	r1, #15
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	fa01 f303 	lsl.w	r3, r1, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	401a      	ands	r2, r3
 8000e88:	6a39      	ldr	r1, [r7, #32]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e90:	431a      	orrs	r2, r3
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f000 80b1 	beq.w	8001006 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ea4:	4b4d      	ldr	r3, [pc, #308]	@ (8000fdc <HAL_GPIO_Init+0x2b8>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a4c      	ldr	r2, [pc, #304]	@ (8000fdc <HAL_GPIO_Init+0x2b8>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b4a      	ldr	r3, [pc, #296]	@ (8000fdc <HAL_GPIO_Init+0x2b8>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ebc:	4a48      	ldr	r2, [pc, #288]	@ (8000fe0 <HAL_GPIO_Init+0x2bc>)
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec0:	089b      	lsrs	r3, r3, #2
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	220f      	movs	r2, #15
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	4013      	ands	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a40      	ldr	r2, [pc, #256]	@ (8000fe4 <HAL_GPIO_Init+0x2c0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d013      	beq.n	8000f10 <HAL_GPIO_Init+0x1ec>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a3f      	ldr	r2, [pc, #252]	@ (8000fe8 <HAL_GPIO_Init+0x2c4>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d00d      	beq.n	8000f0c <HAL_GPIO_Init+0x1e8>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a3e      	ldr	r2, [pc, #248]	@ (8000fec <HAL_GPIO_Init+0x2c8>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d007      	beq.n	8000f08 <HAL_GPIO_Init+0x1e4>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a3d      	ldr	r2, [pc, #244]	@ (8000ff0 <HAL_GPIO_Init+0x2cc>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d101      	bne.n	8000f04 <HAL_GPIO_Init+0x1e0>
 8000f00:	2303      	movs	r3, #3
 8000f02:	e006      	b.n	8000f12 <HAL_GPIO_Init+0x1ee>
 8000f04:	2304      	movs	r3, #4
 8000f06:	e004      	b.n	8000f12 <HAL_GPIO_Init+0x1ee>
 8000f08:	2302      	movs	r3, #2
 8000f0a:	e002      	b.n	8000f12 <HAL_GPIO_Init+0x1ee>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e000      	b.n	8000f12 <HAL_GPIO_Init+0x1ee>
 8000f10:	2300      	movs	r3, #0
 8000f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f14:	f002 0203 	and.w	r2, r2, #3
 8000f18:	0092      	lsls	r2, r2, #2
 8000f1a:	4093      	lsls	r3, r2
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f22:	492f      	ldr	r1, [pc, #188]	@ (8000fe0 <HAL_GPIO_Init+0x2bc>)
 8000f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	3302      	adds	r3, #2
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d006      	beq.n	8000f4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	492c      	ldr	r1, [pc, #176]	@ (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	608b      	str	r3, [r1, #8]
 8000f48:	e006      	b.n	8000f58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	4928      	ldr	r1, [pc, #160]	@ (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000f54:	4013      	ands	r3, r2
 8000f56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d006      	beq.n	8000f72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f64:	4b23      	ldr	r3, [pc, #140]	@ (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000f66:	68da      	ldr	r2, [r3, #12]
 8000f68:	4922      	ldr	r1, [pc, #136]	@ (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	60cb      	str	r3, [r1, #12]
 8000f70:	e006      	b.n	8000f80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f72:	4b20      	ldr	r3, [pc, #128]	@ (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000f74:	68da      	ldr	r2, [r3, #12]
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	491e      	ldr	r1, [pc, #120]	@ (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d006      	beq.n	8000f9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	4918      	ldr	r1, [pc, #96]	@ (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	604b      	str	r3, [r1, #4]
 8000f98:	e006      	b.n	8000fa8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f9a:	4b16      	ldr	r3, [pc, #88]	@ (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	4914      	ldr	r1, [pc, #80]	@ (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d021      	beq.n	8000ff8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	490e      	ldr	r1, [pc, #56]	@ (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	600b      	str	r3, [r1, #0]
 8000fc0:	e021      	b.n	8001006 <HAL_GPIO_Init+0x2e2>
 8000fc2:	bf00      	nop
 8000fc4:	10320000 	.word	0x10320000
 8000fc8:	10310000 	.word	0x10310000
 8000fcc:	10220000 	.word	0x10220000
 8000fd0:	10210000 	.word	0x10210000
 8000fd4:	10120000 	.word	0x10120000
 8000fd8:	10110000 	.word	0x10110000
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40010000 	.word	0x40010000
 8000fe4:	40010800 	.word	0x40010800
 8000fe8:	40010c00 	.word	0x40010c00
 8000fec:	40011000 	.word	0x40011000
 8000ff0:	40011400 	.word	0x40011400
 8000ff4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <HAL_GPIO_Init+0x304>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	4909      	ldr	r1, [pc, #36]	@ (8001028 <HAL_GPIO_Init+0x304>)
 8001002:	4013      	ands	r3, r2
 8001004:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001008:	3301      	adds	r3, #1
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001012:	fa22 f303 	lsr.w	r3, r2, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	f47f ae8e 	bne.w	8000d38 <HAL_GPIO_Init+0x14>
  }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	372c      	adds	r7, #44	@ 0x2c
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr
 8001028:	40010400 	.word	0x40010400

0800102c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	807b      	strh	r3, [r7, #2]
 8001038:	4613      	mov	r3, r2
 800103a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800103c:	787b      	ldrb	r3, [r7, #1]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001042:	887a      	ldrh	r2, [r7, #2]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001048:	e003      	b.n	8001052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800104a:	887b      	ldrh	r3, [r7, #2]
 800104c:	041a      	lsls	r2, r3, #16
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	611a      	str	r2, [r3, #16]
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e272      	b.n	8001554 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 8087 	beq.w	800118a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800107c:	4b92      	ldr	r3, [pc, #584]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 030c 	and.w	r3, r3, #12
 8001084:	2b04      	cmp	r3, #4
 8001086:	d00c      	beq.n	80010a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001088:	4b8f      	ldr	r3, [pc, #572]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 030c 	and.w	r3, r3, #12
 8001090:	2b08      	cmp	r3, #8
 8001092:	d112      	bne.n	80010ba <HAL_RCC_OscConfig+0x5e>
 8001094:	4b8c      	ldr	r3, [pc, #560]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800109c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010a0:	d10b      	bne.n	80010ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a2:	4b89      	ldr	r3, [pc, #548]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d06c      	beq.n	8001188 <HAL_RCC_OscConfig+0x12c>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d168      	bne.n	8001188 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e24c      	b.n	8001554 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010c2:	d106      	bne.n	80010d2 <HAL_RCC_OscConfig+0x76>
 80010c4:	4b80      	ldr	r3, [pc, #512]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a7f      	ldr	r2, [pc, #508]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	e02e      	b.n	8001130 <HAL_RCC_OscConfig+0xd4>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10c      	bne.n	80010f4 <HAL_RCC_OscConfig+0x98>
 80010da:	4b7b      	ldr	r3, [pc, #492]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a7a      	ldr	r2, [pc, #488]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	4b78      	ldr	r3, [pc, #480]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a77      	ldr	r2, [pc, #476]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e01d      	b.n	8001130 <HAL_RCC_OscConfig+0xd4>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0xbc>
 80010fe:	4b72      	ldr	r3, [pc, #456]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a71      	ldr	r2, [pc, #452]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 8001104:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	4b6f      	ldr	r3, [pc, #444]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a6e      	ldr	r2, [pc, #440]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 8001110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e00b      	b.n	8001130 <HAL_RCC_OscConfig+0xd4>
 8001118:	4b6b      	ldr	r3, [pc, #428]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a6a      	ldr	r2, [pc, #424]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 800111e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	4b68      	ldr	r3, [pc, #416]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a67      	ldr	r2, [pc, #412]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 800112a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800112e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d013      	beq.n	8001160 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001138:	f7ff fc2a 	bl	8000990 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001140:	f7ff fc26 	bl	8000990 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b64      	cmp	r3, #100	@ 0x64
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e200      	b.n	8001554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001152:	4b5d      	ldr	r3, [pc, #372]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0f0      	beq.n	8001140 <HAL_RCC_OscConfig+0xe4>
 800115e:	e014      	b.n	800118a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001160:	f7ff fc16 	bl	8000990 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001168:	f7ff fc12 	bl	8000990 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b64      	cmp	r3, #100	@ 0x64
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e1ec      	b.n	8001554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117a:	4b53      	ldr	r3, [pc, #332]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f0      	bne.n	8001168 <HAL_RCC_OscConfig+0x10c>
 8001186:	e000      	b.n	800118a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d063      	beq.n	800125e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001196:	4b4c      	ldr	r3, [pc, #304]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 030c 	and.w	r3, r3, #12
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00b      	beq.n	80011ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011a2:	4b49      	ldr	r3, [pc, #292]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 030c 	and.w	r3, r3, #12
 80011aa:	2b08      	cmp	r3, #8
 80011ac:	d11c      	bne.n	80011e8 <HAL_RCC_OscConfig+0x18c>
 80011ae:	4b46      	ldr	r3, [pc, #280]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d116      	bne.n	80011e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ba:	4b43      	ldr	r3, [pc, #268]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d005      	beq.n	80011d2 <HAL_RCC_OscConfig+0x176>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d001      	beq.n	80011d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e1c0      	b.n	8001554 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d2:	4b3d      	ldr	r3, [pc, #244]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4939      	ldr	r1, [pc, #228]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e6:	e03a      	b.n	800125e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d020      	beq.n	8001232 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011f0:	4b36      	ldr	r3, [pc, #216]	@ (80012cc <HAL_RCC_OscConfig+0x270>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f6:	f7ff fbcb 	bl	8000990 <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011fe:	f7ff fbc7 	bl	8000990 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e1a1      	b.n	8001554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001210:	4b2d      	ldr	r3, [pc, #180]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f0      	beq.n	80011fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121c:	4b2a      	ldr	r3, [pc, #168]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	4927      	ldr	r1, [pc, #156]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 800122c:	4313      	orrs	r3, r2
 800122e:	600b      	str	r3, [r1, #0]
 8001230:	e015      	b.n	800125e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001232:	4b26      	ldr	r3, [pc, #152]	@ (80012cc <HAL_RCC_OscConfig+0x270>)
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff fbaa 	bl	8000990 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001240:	f7ff fba6 	bl	8000990 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e180      	b.n	8001554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001252:	4b1d      	ldr	r3, [pc, #116]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	2b00      	cmp	r3, #0
 8001268:	d03a      	beq.n	80012e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d019      	beq.n	80012a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001272:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <HAL_RCC_OscConfig+0x274>)
 8001274:	2201      	movs	r2, #1
 8001276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001278:	f7ff fb8a 	bl	8000990 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001280:	f7ff fb86 	bl	8000990 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e160      	b.n	8001554 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001292:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <HAL_RCC_OscConfig+0x26c>)
 8001294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f0      	beq.n	8001280 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800129e:	2001      	movs	r0, #1
 80012a0:	f000 face 	bl	8001840 <RCC_Delay>
 80012a4:	e01c      	b.n	80012e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a6:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <HAL_RCC_OscConfig+0x274>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ac:	f7ff fb70 	bl	8000990 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b2:	e00f      	b.n	80012d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b4:	f7ff fb6c 	bl	8000990 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d908      	bls.n	80012d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e146      	b.n	8001554 <HAL_RCC_OscConfig+0x4f8>
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000
 80012cc:	42420000 	.word	0x42420000
 80012d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d4:	4b92      	ldr	r3, [pc, #584]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 80012d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1e9      	bne.n	80012b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80a6 	beq.w	800143a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f2:	4b8b      	ldr	r3, [pc, #556]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10d      	bne.n	800131a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	4b88      	ldr	r3, [pc, #544]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	4a87      	ldr	r2, [pc, #540]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001308:	61d3      	str	r3, [r2, #28]
 800130a:	4b85      	ldr	r3, [pc, #532]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001316:	2301      	movs	r3, #1
 8001318:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131a:	4b82      	ldr	r3, [pc, #520]	@ (8001524 <HAL_RCC_OscConfig+0x4c8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001322:	2b00      	cmp	r3, #0
 8001324:	d118      	bne.n	8001358 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001326:	4b7f      	ldr	r3, [pc, #508]	@ (8001524 <HAL_RCC_OscConfig+0x4c8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a7e      	ldr	r2, [pc, #504]	@ (8001524 <HAL_RCC_OscConfig+0x4c8>)
 800132c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001332:	f7ff fb2d 	bl	8000990 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800133a:	f7ff fb29 	bl	8000990 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b64      	cmp	r3, #100	@ 0x64
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e103      	b.n	8001554 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134c:	4b75      	ldr	r3, [pc, #468]	@ (8001524 <HAL_RCC_OscConfig+0x4c8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0f0      	beq.n	800133a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d106      	bne.n	800136e <HAL_RCC_OscConfig+0x312>
 8001360:	4b6f      	ldr	r3, [pc, #444]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	4a6e      	ldr	r2, [pc, #440]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6213      	str	r3, [r2, #32]
 800136c:	e02d      	b.n	80013ca <HAL_RCC_OscConfig+0x36e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10c      	bne.n	8001390 <HAL_RCC_OscConfig+0x334>
 8001376:	4b6a      	ldr	r3, [pc, #424]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	4a69      	ldr	r2, [pc, #420]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 800137c:	f023 0301 	bic.w	r3, r3, #1
 8001380:	6213      	str	r3, [r2, #32]
 8001382:	4b67      	ldr	r3, [pc, #412]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 8001384:	6a1b      	ldr	r3, [r3, #32]
 8001386:	4a66      	ldr	r2, [pc, #408]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 8001388:	f023 0304 	bic.w	r3, r3, #4
 800138c:	6213      	str	r3, [r2, #32]
 800138e:	e01c      	b.n	80013ca <HAL_RCC_OscConfig+0x36e>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	2b05      	cmp	r3, #5
 8001396:	d10c      	bne.n	80013b2 <HAL_RCC_OscConfig+0x356>
 8001398:	4b61      	ldr	r3, [pc, #388]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	4a60      	ldr	r2, [pc, #384]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 800139e:	f043 0304 	orr.w	r3, r3, #4
 80013a2:	6213      	str	r3, [r2, #32]
 80013a4:	4b5e      	ldr	r3, [pc, #376]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	4a5d      	ldr	r2, [pc, #372]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6213      	str	r3, [r2, #32]
 80013b0:	e00b      	b.n	80013ca <HAL_RCC_OscConfig+0x36e>
 80013b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	4a5a      	ldr	r2, [pc, #360]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 80013b8:	f023 0301 	bic.w	r3, r3, #1
 80013bc:	6213      	str	r3, [r2, #32]
 80013be:	4b58      	ldr	r3, [pc, #352]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	4a57      	ldr	r2, [pc, #348]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	f023 0304 	bic.w	r3, r3, #4
 80013c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d015      	beq.n	80013fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d2:	f7ff fadd 	bl	8000990 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d8:	e00a      	b.n	80013f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013da:	f7ff fad9 	bl	8000990 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e0b1      	b.n	8001554 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0ee      	beq.n	80013da <HAL_RCC_OscConfig+0x37e>
 80013fc:	e014      	b.n	8001428 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fe:	f7ff fac7 	bl	8000990 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001404:	e00a      	b.n	800141c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001406:	f7ff fac3 	bl	8000990 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001414:	4293      	cmp	r3, r2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e09b      	b.n	8001554 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141c:	4b40      	ldr	r3, [pc, #256]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1ee      	bne.n	8001406 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001428:	7dfb      	ldrb	r3, [r7, #23]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d105      	bne.n	800143a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800142e:	4b3c      	ldr	r3, [pc, #240]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	4a3b      	ldr	r2, [pc, #236]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 8001434:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001438:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 8087 	beq.w	8001552 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001444:	4b36      	ldr	r3, [pc, #216]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 030c 	and.w	r3, r3, #12
 800144c:	2b08      	cmp	r3, #8
 800144e:	d061      	beq.n	8001514 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	2b02      	cmp	r3, #2
 8001456:	d146      	bne.n	80014e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001458:	4b33      	ldr	r3, [pc, #204]	@ (8001528 <HAL_RCC_OscConfig+0x4cc>)
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145e:	f7ff fa97 	bl	8000990 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001466:	f7ff fa93 	bl	8000990 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e06d      	b.n	8001554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001478:	4b29      	ldr	r3, [pc, #164]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1f0      	bne.n	8001466 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800148c:	d108      	bne.n	80014a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800148e:	4b24      	ldr	r3, [pc, #144]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	4921      	ldr	r1, [pc, #132]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a19      	ldr	r1, [r3, #32]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b0:	430b      	orrs	r3, r1
 80014b2:	491b      	ldr	r1, [pc, #108]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <HAL_RCC_OscConfig+0x4cc>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014be:	f7ff fa67 	bl	8000990 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c6:	f7ff fa63 	bl	8000990 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e03d      	b.n	8001554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014d8:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x46a>
 80014e4:	e035      	b.n	8001552 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <HAL_RCC_OscConfig+0x4cc>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fa50 	bl	8000990 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f4:	f7ff fa4c 	bl	8000990 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e026      	b.n	8001554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <HAL_RCC_OscConfig+0x4c4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x498>
 8001512:	e01e      	b.n	8001552 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d107      	bne.n	800152c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e019      	b.n	8001554 <HAL_RCC_OscConfig+0x4f8>
 8001520:	40021000 	.word	0x40021000
 8001524:	40007000 	.word	0x40007000
 8001528:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800152c:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <HAL_RCC_OscConfig+0x500>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	429a      	cmp	r2, r3
 800153e:	d106      	bne.n	800154e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154a:	429a      	cmp	r2, r3
 800154c:	d001      	beq.n	8001552 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40021000 	.word	0x40021000

08001560 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0d0      	b.n	8001716 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001574:	4b6a      	ldr	r3, [pc, #424]	@ (8001720 <HAL_RCC_ClockConfig+0x1c0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d910      	bls.n	80015a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001582:	4b67      	ldr	r3, [pc, #412]	@ (8001720 <HAL_RCC_ClockConfig+0x1c0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f023 0207 	bic.w	r2, r3, #7
 800158a:	4965      	ldr	r1, [pc, #404]	@ (8001720 <HAL_RCC_ClockConfig+0x1c0>)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001592:	4b63      	ldr	r3, [pc, #396]	@ (8001720 <HAL_RCC_ClockConfig+0x1c0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e0b8      	b.n	8001716 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d020      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015bc:	4b59      	ldr	r3, [pc, #356]	@ (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	4a58      	ldr	r2, [pc, #352]	@ (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 80015c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015d4:	4b53      	ldr	r3, [pc, #332]	@ (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	4a52      	ldr	r2, [pc, #328]	@ (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 80015da:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80015de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e0:	4b50      	ldr	r3, [pc, #320]	@ (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	494d      	ldr	r1, [pc, #308]	@ (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d040      	beq.n	8001680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d107      	bne.n	8001616 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001606:	4b47      	ldr	r3, [pc, #284]	@ (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d115      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e07f      	b.n	8001716 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d107      	bne.n	800162e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161e:	4b41      	ldr	r3, [pc, #260]	@ (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d109      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e073      	b.n	8001716 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162e:	4b3d      	ldr	r3, [pc, #244]	@ (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e06b      	b.n	8001716 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800163e:	4b39      	ldr	r3, [pc, #228]	@ (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f023 0203 	bic.w	r2, r3, #3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	4936      	ldr	r1, [pc, #216]	@ (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001650:	f7ff f99e 	bl	8000990 <HAL_GetTick>
 8001654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001656:	e00a      	b.n	800166e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001658:	f7ff f99a 	bl	8000990 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001666:	4293      	cmp	r3, r2
 8001668:	d901      	bls.n	800166e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e053      	b.n	8001716 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166e:	4b2d      	ldr	r3, [pc, #180]	@ (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 020c 	and.w	r2, r3, #12
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	429a      	cmp	r2, r3
 800167e:	d1eb      	bne.n	8001658 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001680:	4b27      	ldr	r3, [pc, #156]	@ (8001720 <HAL_RCC_ClockConfig+0x1c0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d210      	bcs.n	80016b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168e:	4b24      	ldr	r3, [pc, #144]	@ (8001720 <HAL_RCC_ClockConfig+0x1c0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 0207 	bic.w	r2, r3, #7
 8001696:	4922      	ldr	r1, [pc, #136]	@ (8001720 <HAL_RCC_ClockConfig+0x1c0>)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	4313      	orrs	r3, r2
 800169c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800169e:	4b20      	ldr	r3, [pc, #128]	@ (8001720 <HAL_RCC_ClockConfig+0x1c0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e032      	b.n	8001716 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d008      	beq.n	80016ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016bc:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	4916      	ldr	r1, [pc, #88]	@ (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d009      	beq.n	80016ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016da:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	490e      	ldr	r1, [pc, #56]	@ (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016ee:	f000 f821 	bl	8001734 <HAL_RCC_GetSysClockFreq>
 80016f2:	4602      	mov	r2, r0
 80016f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	091b      	lsrs	r3, r3, #4
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	490a      	ldr	r1, [pc, #40]	@ (8001728 <HAL_RCC_ClockConfig+0x1c8>)
 8001700:	5ccb      	ldrb	r3, [r1, r3]
 8001702:	fa22 f303 	lsr.w	r3, r2, r3
 8001706:	4a09      	ldr	r2, [pc, #36]	@ (800172c <HAL_RCC_ClockConfig+0x1cc>)
 8001708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800170a:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <HAL_RCC_ClockConfig+0x1d0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff f8fc 	bl	800090c <HAL_InitTick>

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40022000 	.word	0x40022000
 8001724:	40021000 	.word	0x40021000
 8001728:	080048f0 	.word	0x080048f0
 800172c:	20000000 	.word	0x20000000
 8001730:	20000004 	.word	0x20000004

08001734 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001734:	b480      	push	{r7}
 8001736:	b087      	sub	sp, #28
 8001738:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800174e:	4b1e      	ldr	r3, [pc, #120]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b04      	cmp	r3, #4
 800175c:	d002      	beq.n	8001764 <HAL_RCC_GetSysClockFreq+0x30>
 800175e:	2b08      	cmp	r3, #8
 8001760:	d003      	beq.n	800176a <HAL_RCC_GetSysClockFreq+0x36>
 8001762:	e027      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001764:	4b19      	ldr	r3, [pc, #100]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x98>)
 8001766:	613b      	str	r3, [r7, #16]
      break;
 8001768:	e027      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	0c9b      	lsrs	r3, r3, #18
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	4a17      	ldr	r2, [pc, #92]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001774:	5cd3      	ldrb	r3, [r2, r3]
 8001776:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d010      	beq.n	80017a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001782:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	0c5b      	lsrs	r3, r3, #17
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	4a11      	ldr	r2, [pc, #68]	@ (80017d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800178e:	5cd3      	ldrb	r3, [r2, r3]
 8001790:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a0d      	ldr	r2, [pc, #52]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x98>)
 8001796:	fb03 f202 	mul.w	r2, r3, r2
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	e004      	b.n	80017ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a0c      	ldr	r2, [pc, #48]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017a8:	fb02 f303 	mul.w	r3, r2, r3
 80017ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	613b      	str	r3, [r7, #16]
      break;
 80017b2:	e002      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017b4:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x98>)
 80017b6:	613b      	str	r3, [r7, #16]
      break;
 80017b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ba:	693b      	ldr	r3, [r7, #16]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	371c      	adds	r7, #28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000
 80017cc:	007a1200 	.word	0x007a1200
 80017d0:	08004908 	.word	0x08004908
 80017d4:	08004918 	.word	0x08004918
 80017d8:	003d0900 	.word	0x003d0900

080017dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017e0:	4b02      	ldr	r3, [pc, #8]	@ (80017ec <HAL_RCC_GetHCLKFreq+0x10>)
 80017e2:	681b      	ldr	r3, [r3, #0]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	20000000 	.word	0x20000000

080017f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017f4:	f7ff fff2 	bl	80017dc <HAL_RCC_GetHCLKFreq>
 80017f8:	4602      	mov	r2, r0
 80017fa:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	0a1b      	lsrs	r3, r3, #8
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	4903      	ldr	r1, [pc, #12]	@ (8001814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001806:	5ccb      	ldrb	r3, [r1, r3]
 8001808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800180c:	4618      	mov	r0, r3
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40021000 	.word	0x40021000
 8001814:	08004900 	.word	0x08004900

08001818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800181c:	f7ff ffde 	bl	80017dc <HAL_RCC_GetHCLKFreq>
 8001820:	4602      	mov	r2, r0
 8001822:	4b05      	ldr	r3, [pc, #20]	@ (8001838 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	0adb      	lsrs	r3, r3, #11
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	4903      	ldr	r1, [pc, #12]	@ (800183c <HAL_RCC_GetPCLK2Freq+0x24>)
 800182e:	5ccb      	ldrb	r3, [r1, r3]
 8001830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001834:	4618      	mov	r0, r3
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40021000 	.word	0x40021000
 800183c:	08004900 	.word	0x08004900

08001840 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001848:	4b0a      	ldr	r3, [pc, #40]	@ (8001874 <RCC_Delay+0x34>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0a      	ldr	r2, [pc, #40]	@ (8001878 <RCC_Delay+0x38>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	0a5b      	lsrs	r3, r3, #9
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	fb02 f303 	mul.w	r3, r2, r3
 800185a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800185c:	bf00      	nop
  }
  while (Delay --);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1e5a      	subs	r2, r3, #1
 8001862:	60fa      	str	r2, [r7, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f9      	bne.n	800185c <RCC_Delay+0x1c>
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	20000000 	.word	0x20000000
 8001878:	10624dd3 	.word	0x10624dd3

0800187c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e041      	b.n	8001912 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d106      	bne.n	80018a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7fe feba 	bl	800061c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2202      	movs	r2, #2
 80018ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3304      	adds	r3, #4
 80018b8:	4619      	mov	r1, r3
 80018ba:	4610      	mov	r0, r2
 80018bc:	f000 fcc6 	bl	800224c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e041      	b.n	80019b0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d106      	bne.n	8001946 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f839 	bl	80019b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2202      	movs	r2, #2
 800194a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3304      	adds	r3, #4
 8001956:	4619      	mov	r1, r3
 8001958:	4610      	mov	r0, r2
 800195a:	f000 fc77 	bl	800224c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
	...

080019cc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d109      	bne.n	80019f4 <HAL_TIM_PWM_Start_IT+0x28>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	bf14      	ite	ne
 80019ec:	2301      	movne	r3, #1
 80019ee:	2300      	moveq	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	e022      	b.n	8001a3a <HAL_TIM_PWM_Start_IT+0x6e>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d109      	bne.n	8001a0e <HAL_TIM_PWM_Start_IT+0x42>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	bf14      	ite	ne
 8001a06:	2301      	movne	r3, #1
 8001a08:	2300      	moveq	r3, #0
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	e015      	b.n	8001a3a <HAL_TIM_PWM_Start_IT+0x6e>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d109      	bne.n	8001a28 <HAL_TIM_PWM_Start_IT+0x5c>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	bf14      	ite	ne
 8001a20:	2301      	movne	r3, #1
 8001a22:	2300      	moveq	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	e008      	b.n	8001a3a <HAL_TIM_PWM_Start_IT+0x6e>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	bf14      	ite	ne
 8001a34:	2301      	movne	r3, #1
 8001a36:	2300      	moveq	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0a9      	b.n	8001b96 <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d104      	bne.n	8001a52 <HAL_TIM_PWM_Start_IT+0x86>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a50:	e013      	b.n	8001a7a <HAL_TIM_PWM_Start_IT+0xae>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d104      	bne.n	8001a62 <HAL_TIM_PWM_Start_IT+0x96>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a60:	e00b      	b.n	8001a7a <HAL_TIM_PWM_Start_IT+0xae>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d104      	bne.n	8001a72 <HAL_TIM_PWM_Start_IT+0xa6>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a70:	e003      	b.n	8001a7a <HAL_TIM_PWM_Start_IT+0xae>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2202      	movs	r2, #2
 8001a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	2b0c      	cmp	r3, #12
 8001a7e:	d841      	bhi.n	8001b04 <HAL_TIM_PWM_Start_IT+0x138>
 8001a80:	a201      	add	r2, pc, #4	@ (adr r2, 8001a88 <HAL_TIM_PWM_Start_IT+0xbc>)
 8001a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a86:	bf00      	nop
 8001a88:	08001abd 	.word	0x08001abd
 8001a8c:	08001b05 	.word	0x08001b05
 8001a90:	08001b05 	.word	0x08001b05
 8001a94:	08001b05 	.word	0x08001b05
 8001a98:	08001acf 	.word	0x08001acf
 8001a9c:	08001b05 	.word	0x08001b05
 8001aa0:	08001b05 	.word	0x08001b05
 8001aa4:	08001b05 	.word	0x08001b05
 8001aa8:	08001ae1 	.word	0x08001ae1
 8001aac:	08001b05 	.word	0x08001b05
 8001ab0:	08001b05 	.word	0x08001b05
 8001ab4:	08001b05 	.word	0x08001b05
 8001ab8:	08001af3 	.word	0x08001af3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0202 	orr.w	r2, r2, #2
 8001aca:	60da      	str	r2, [r3, #12]
      break;
 8001acc:	e01d      	b.n	8001b0a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 0204 	orr.w	r2, r2, #4
 8001adc:	60da      	str	r2, [r3, #12]
      break;
 8001ade:	e014      	b.n	8001b0a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0208 	orr.w	r2, r2, #8
 8001aee:	60da      	str	r2, [r3, #12]
      break;
 8001af0:	e00b      	b.n	8001b0a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f042 0210 	orr.w	r2, r2, #16
 8001b00:	60da      	str	r2, [r3, #12]
      break;
 8001b02:	e002      	b.n	8001b0a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
      break;
 8001b08:	bf00      	nop
  }

  if (status == HAL_OK)
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d141      	bne.n	8001b94 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2201      	movs	r2, #1
 8001b16:	6839      	ldr	r1, [r7, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 fe23 	bl	8002764 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a1f      	ldr	r2, [pc, #124]	@ (8001ba0 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d107      	bne.n	8001b38 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b36:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a18      	ldr	r2, [pc, #96]	@ (8001ba0 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d00e      	beq.n	8001b60 <HAL_TIM_PWM_Start_IT+0x194>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b4a:	d009      	beq.n	8001b60 <HAL_TIM_PWM_Start_IT+0x194>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a14      	ldr	r2, [pc, #80]	@ (8001ba4 <HAL_TIM_PWM_Start_IT+0x1d8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d004      	beq.n	8001b60 <HAL_TIM_PWM_Start_IT+0x194>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a13      	ldr	r2, [pc, #76]	@ (8001ba8 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d111      	bne.n	8001b84 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d010      	beq.n	8001b94 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0201 	orr.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b82:	e007      	b.n	8001b94 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0201 	orr.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40012c00 	.word	0x40012c00
 8001ba4:	40000400 	.word	0x40000400
 8001ba8:	40000800 	.word	0x40000800

08001bac <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	2b0c      	cmp	r3, #12
 8001bbe:	d841      	bhi.n	8001c44 <HAL_TIM_PWM_Stop_IT+0x98>
 8001bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8001bc8 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8001bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc6:	bf00      	nop
 8001bc8:	08001bfd 	.word	0x08001bfd
 8001bcc:	08001c45 	.word	0x08001c45
 8001bd0:	08001c45 	.word	0x08001c45
 8001bd4:	08001c45 	.word	0x08001c45
 8001bd8:	08001c0f 	.word	0x08001c0f
 8001bdc:	08001c45 	.word	0x08001c45
 8001be0:	08001c45 	.word	0x08001c45
 8001be4:	08001c45 	.word	0x08001c45
 8001be8:	08001c21 	.word	0x08001c21
 8001bec:	08001c45 	.word	0x08001c45
 8001bf0:	08001c45 	.word	0x08001c45
 8001bf4:	08001c45 	.word	0x08001c45
 8001bf8:	08001c33 	.word	0x08001c33
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0202 	bic.w	r2, r2, #2
 8001c0a:	60da      	str	r2, [r3, #12]
      break;
 8001c0c:	e01d      	b.n	8001c4a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0204 	bic.w	r2, r2, #4
 8001c1c:	60da      	str	r2, [r3, #12]
      break;
 8001c1e:	e014      	b.n	8001c4a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0208 	bic.w	r2, r2, #8
 8001c2e:	60da      	str	r2, [r3, #12]
      break;
 8001c30:	e00b      	b.n	8001c4a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0210 	bic.w	r2, r2, #16
 8001c40:	60da      	str	r2, [r3, #12]
      break;
 8001c42:	e002      	b.n	8001c4a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
      break;
 8001c48:	bf00      	nop
  }

  if (status == HAL_OK)
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d157      	bne.n	8001d00 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2200      	movs	r2, #0
 8001c56:	6839      	ldr	r1, [r7, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 fd83 	bl	8002764 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a2a      	ldr	r2, [pc, #168]	@ (8001d0c <HAL_TIM_PWM_Stop_IT+0x160>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d117      	bne.n	8001c98 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6a1a      	ldr	r2, [r3, #32]
 8001c6e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10f      	bne.n	8001c98 <HAL_TIM_PWM_Stop_IT+0xec>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6a1a      	ldr	r2, [r3, #32]
 8001c7e:	f240 4344 	movw	r3, #1092	@ 0x444
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d107      	bne.n	8001c98 <HAL_TIM_PWM_Stop_IT+0xec>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c96:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6a1a      	ldr	r2, [r3, #32]
 8001c9e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10f      	bne.n	8001cc8 <HAL_TIM_PWM_Stop_IT+0x11c>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6a1a      	ldr	r2, [r3, #32]
 8001cae:	f240 4344 	movw	r3, #1092	@ 0x444
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d107      	bne.n	8001cc8 <HAL_TIM_PWM_Stop_IT+0x11c>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0201 	bic.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d104      	bne.n	8001cd8 <HAL_TIM_PWM_Stop_IT+0x12c>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cd6:	e013      	b.n	8001d00 <HAL_TIM_PWM_Stop_IT+0x154>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d104      	bne.n	8001ce8 <HAL_TIM_PWM_Stop_IT+0x13c>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ce6:	e00b      	b.n	8001d00 <HAL_TIM_PWM_Stop_IT+0x154>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d104      	bne.n	8001cf8 <HAL_TIM_PWM_Stop_IT+0x14c>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cf6:	e003      	b.n	8001d00 <HAL_TIM_PWM_Stop_IT+0x154>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40012c00 	.word	0x40012c00

08001d10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d020      	beq.n	8001d74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d01b      	beq.n	8001d74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0202 	mvn.w	r2, #2
 8001d44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 fa63 	bl	8002226 <HAL_TIM_IC_CaptureCallback>
 8001d60:	e005      	b.n	8001d6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fa56 	bl	8002214 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7fe fb6b 	bl	8000444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d020      	beq.n	8001dc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d01b      	beq.n	8001dc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0204 	mvn.w	r2, #4
 8001d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2202      	movs	r2, #2
 8001d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 fa3d 	bl	8002226 <HAL_TIM_IC_CaptureCallback>
 8001dac:	e005      	b.n	8001dba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 fa30 	bl	8002214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7fe fb45 	bl	8000444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d020      	beq.n	8001e0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01b      	beq.n	8001e0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 0208 	mvn.w	r2, #8
 8001ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2204      	movs	r2, #4
 8001de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 fa17 	bl	8002226 <HAL_TIM_IC_CaptureCallback>
 8001df8:	e005      	b.n	8001e06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 fa0a 	bl	8002214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7fe fb1f 	bl	8000444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d020      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f003 0310 	and.w	r3, r3, #16
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d01b      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0210 	mvn.w	r2, #16
 8001e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2208      	movs	r2, #8
 8001e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f9f1 	bl	8002226 <HAL_TIM_IC_CaptureCallback>
 8001e44:	e005      	b.n	8001e52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f9e4 	bl	8002214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7fe faf9 	bl	8000444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00c      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d007      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0201 	mvn.w	r2, #1
 8001e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f9c3 	bl	8002202 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00c      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d007      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 fd3e 	bl	800291c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00c      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d007      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f9ba 	bl	8002238 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f003 0320 	and.w	r3, r3, #32
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00c      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f003 0320 	and.w	r3, r3, #32
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d007      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0220 	mvn.w	r2, #32
 8001ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 fd11 	bl	800290a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ee8:	bf00      	nop
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e0ae      	b.n	800206c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b0c      	cmp	r3, #12
 8001f1a:	f200 809f 	bhi.w	800205c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f24:	08001f59 	.word	0x08001f59
 8001f28:	0800205d 	.word	0x0800205d
 8001f2c:	0800205d 	.word	0x0800205d
 8001f30:	0800205d 	.word	0x0800205d
 8001f34:	08001f99 	.word	0x08001f99
 8001f38:	0800205d 	.word	0x0800205d
 8001f3c:	0800205d 	.word	0x0800205d
 8001f40:	0800205d 	.word	0x0800205d
 8001f44:	08001fdb 	.word	0x08001fdb
 8001f48:	0800205d 	.word	0x0800205d
 8001f4c:	0800205d 	.word	0x0800205d
 8001f50:	0800205d 	.word	0x0800205d
 8001f54:	0800201b 	.word	0x0800201b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 f9e2 	bl	8002328 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699a      	ldr	r2, [r3, #24]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0208 	orr.w	r2, r2, #8
 8001f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699a      	ldr	r2, [r3, #24]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0204 	bic.w	r2, r2, #4
 8001f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6999      	ldr	r1, [r3, #24]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	619a      	str	r2, [r3, #24]
      break;
 8001f96:	e064      	b.n	8002062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 fa28 	bl	80023f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	699a      	ldr	r2, [r3, #24]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699a      	ldr	r2, [r3, #24]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6999      	ldr	r1, [r3, #24]
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	021a      	lsls	r2, r3, #8
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	619a      	str	r2, [r3, #24]
      break;
 8001fd8:	e043      	b.n	8002062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68b9      	ldr	r1, [r7, #8]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 fa71 	bl	80024c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	69da      	ldr	r2, [r3, #28]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f042 0208 	orr.w	r2, r2, #8
 8001ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	69da      	ldr	r2, [r3, #28]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0204 	bic.w	r2, r2, #4
 8002004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	69d9      	ldr	r1, [r3, #28]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	61da      	str	r2, [r3, #28]
      break;
 8002018:	e023      	b.n	8002062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68b9      	ldr	r1, [r7, #8]
 8002020:	4618      	mov	r0, r3
 8002022:	f000 fabb 	bl	800259c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	69da      	ldr	r2, [r3, #28]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	69da      	ldr	r2, [r3, #28]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	69d9      	ldr	r1, [r3, #28]
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	021a      	lsls	r2, r3, #8
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	61da      	str	r2, [r3, #28]
      break;
 800205a:	e002      	b.n	8002062 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	75fb      	strb	r3, [r7, #23]
      break;
 8002060:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800206a:	7dfb      	ldrb	r3, [r7, #23]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_TIM_ConfigClockSource+0x1c>
 800208c:	2302      	movs	r3, #2
 800208e:	e0b4      	b.n	80021fa <HAL_TIM_ConfigClockSource+0x186>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2202      	movs	r2, #2
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80020ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80020b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020c8:	d03e      	beq.n	8002148 <HAL_TIM_ConfigClockSource+0xd4>
 80020ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020ce:	f200 8087 	bhi.w	80021e0 <HAL_TIM_ConfigClockSource+0x16c>
 80020d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020d6:	f000 8086 	beq.w	80021e6 <HAL_TIM_ConfigClockSource+0x172>
 80020da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020de:	d87f      	bhi.n	80021e0 <HAL_TIM_ConfigClockSource+0x16c>
 80020e0:	2b70      	cmp	r3, #112	@ 0x70
 80020e2:	d01a      	beq.n	800211a <HAL_TIM_ConfigClockSource+0xa6>
 80020e4:	2b70      	cmp	r3, #112	@ 0x70
 80020e6:	d87b      	bhi.n	80021e0 <HAL_TIM_ConfigClockSource+0x16c>
 80020e8:	2b60      	cmp	r3, #96	@ 0x60
 80020ea:	d050      	beq.n	800218e <HAL_TIM_ConfigClockSource+0x11a>
 80020ec:	2b60      	cmp	r3, #96	@ 0x60
 80020ee:	d877      	bhi.n	80021e0 <HAL_TIM_ConfigClockSource+0x16c>
 80020f0:	2b50      	cmp	r3, #80	@ 0x50
 80020f2:	d03c      	beq.n	800216e <HAL_TIM_ConfigClockSource+0xfa>
 80020f4:	2b50      	cmp	r3, #80	@ 0x50
 80020f6:	d873      	bhi.n	80021e0 <HAL_TIM_ConfigClockSource+0x16c>
 80020f8:	2b40      	cmp	r3, #64	@ 0x40
 80020fa:	d058      	beq.n	80021ae <HAL_TIM_ConfigClockSource+0x13a>
 80020fc:	2b40      	cmp	r3, #64	@ 0x40
 80020fe:	d86f      	bhi.n	80021e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002100:	2b30      	cmp	r3, #48	@ 0x30
 8002102:	d064      	beq.n	80021ce <HAL_TIM_ConfigClockSource+0x15a>
 8002104:	2b30      	cmp	r3, #48	@ 0x30
 8002106:	d86b      	bhi.n	80021e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002108:	2b20      	cmp	r3, #32
 800210a:	d060      	beq.n	80021ce <HAL_TIM_ConfigClockSource+0x15a>
 800210c:	2b20      	cmp	r3, #32
 800210e:	d867      	bhi.n	80021e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002110:	2b00      	cmp	r3, #0
 8002112:	d05c      	beq.n	80021ce <HAL_TIM_ConfigClockSource+0x15a>
 8002114:	2b10      	cmp	r3, #16
 8002116:	d05a      	beq.n	80021ce <HAL_TIM_ConfigClockSource+0x15a>
 8002118:	e062      	b.n	80021e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800212a:	f000 fafc 	bl	8002726 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800213c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	609a      	str	r2, [r3, #8]
      break;
 8002146:	e04f      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002158:	f000 fae5 	bl	8002726 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800216a:	609a      	str	r2, [r3, #8]
      break;
 800216c:	e03c      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800217a:	461a      	mov	r2, r3
 800217c:	f000 fa5c 	bl	8002638 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2150      	movs	r1, #80	@ 0x50
 8002186:	4618      	mov	r0, r3
 8002188:	f000 fab3 	bl	80026f2 <TIM_ITRx_SetConfig>
      break;
 800218c:	e02c      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800219a:	461a      	mov	r2, r3
 800219c:	f000 fa7a 	bl	8002694 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2160      	movs	r1, #96	@ 0x60
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 faa3 	bl	80026f2 <TIM_ITRx_SetConfig>
      break;
 80021ac:	e01c      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ba:	461a      	mov	r2, r3
 80021bc:	f000 fa3c 	bl	8002638 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2140      	movs	r1, #64	@ 0x40
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 fa93 	bl	80026f2 <TIM_ITRx_SetConfig>
      break;
 80021cc:	e00c      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4619      	mov	r1, r3
 80021d8:	4610      	mov	r0, r2
 80021da:	f000 fa8a 	bl	80026f2 <TIM_ITRx_SetConfig>
      break;
 80021de:	e003      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
      break;
 80021e4:	e000      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80021e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr

08002226 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
	...

0800224c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a2f      	ldr	r2, [pc, #188]	@ (800231c <TIM_Base_SetConfig+0xd0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d00b      	beq.n	800227c <TIM_Base_SetConfig+0x30>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800226a:	d007      	beq.n	800227c <TIM_Base_SetConfig+0x30>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a2c      	ldr	r2, [pc, #176]	@ (8002320 <TIM_Base_SetConfig+0xd4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d003      	beq.n	800227c <TIM_Base_SetConfig+0x30>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a2b      	ldr	r2, [pc, #172]	@ (8002324 <TIM_Base_SetConfig+0xd8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d108      	bne.n	800228e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	4313      	orrs	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a22      	ldr	r2, [pc, #136]	@ (800231c <TIM_Base_SetConfig+0xd0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00b      	beq.n	80022ae <TIM_Base_SetConfig+0x62>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800229c:	d007      	beq.n	80022ae <TIM_Base_SetConfig+0x62>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002320 <TIM_Base_SetConfig+0xd4>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d003      	beq.n	80022ae <TIM_Base_SetConfig+0x62>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002324 <TIM_Base_SetConfig+0xd8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d108      	bne.n	80022c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4313      	orrs	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a0d      	ldr	r2, [pc, #52]	@ (800231c <TIM_Base_SetConfig+0xd0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d103      	bne.n	80022f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f023 0201 	bic.w	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	611a      	str	r2, [r3, #16]
  }
}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	40012c00 	.word	0x40012c00
 8002320:	40000400 	.word	0x40000400
 8002324:	40000800 	.word	0x40000800

08002328 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	f023 0201 	bic.w	r2, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 0303 	bic.w	r3, r3, #3
 800235e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f023 0302 	bic.w	r3, r3, #2
 8002370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4313      	orrs	r3, r2
 800237a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a1c      	ldr	r2, [pc, #112]	@ (80023f0 <TIM_OC1_SetConfig+0xc8>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d10c      	bne.n	800239e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f023 0308 	bic.w	r3, r3, #8
 800238a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	4313      	orrs	r3, r2
 8002394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f023 0304 	bic.w	r3, r3, #4
 800239c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a13      	ldr	r2, [pc, #76]	@ (80023f0 <TIM_OC1_SetConfig+0xc8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d111      	bne.n	80023ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80023b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	621a      	str	r2, [r3, #32]
}
 80023e4:	bf00      	nop
 80023e6:	371c      	adds	r7, #28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40012c00 	.word	0x40012c00

080023f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b087      	sub	sp, #28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	f023 0210 	bic.w	r2, r3, #16
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800242a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	021b      	lsls	r3, r3, #8
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4313      	orrs	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f023 0320 	bic.w	r3, r3, #32
 800243e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4313      	orrs	r3, r2
 800244a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a1d      	ldr	r2, [pc, #116]	@ (80024c4 <TIM_OC2_SetConfig+0xd0>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d10d      	bne.n	8002470 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800245a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	4313      	orrs	r3, r2
 8002466:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800246e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a14      	ldr	r2, [pc, #80]	@ (80024c4 <TIM_OC2_SetConfig+0xd0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d113      	bne.n	80024a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800247e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002486:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	621a      	str	r2, [r3, #32]
}
 80024ba:	bf00      	nop
 80024bc:	371c      	adds	r7, #28
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	40012c00 	.word	0x40012c00

080024c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f023 0303 	bic.w	r3, r3, #3
 80024fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4313      	orrs	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	021b      	lsls	r3, r3, #8
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	4313      	orrs	r3, r2
 800251c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a1d      	ldr	r2, [pc, #116]	@ (8002598 <TIM_OC3_SetConfig+0xd0>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d10d      	bne.n	8002542 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800252c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	021b      	lsls	r3, r3, #8
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	4313      	orrs	r3, r2
 8002538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a14      	ldr	r2, [pc, #80]	@ (8002598 <TIM_OC3_SetConfig+0xd0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d113      	bne.n	8002572 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	621a      	str	r2, [r3, #32]
}
 800258c:	bf00      	nop
 800258e:	371c      	adds	r7, #28
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40012c00 	.word	0x40012c00

0800259c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800259c:	b480      	push	{r7}
 800259e:	b087      	sub	sp, #28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	021b      	lsls	r3, r3, #8
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4313      	orrs	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80025e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	031b      	lsls	r3, r3, #12
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002634 <TIM_OC4_SetConfig+0x98>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d109      	bne.n	8002610 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002602:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	019b      	lsls	r3, r3, #6
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4313      	orrs	r3, r2
 800260e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	621a      	str	r2, [r3, #32]
}
 800262a:	bf00      	nop
 800262c:	371c      	adds	r7, #28
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr
 8002634:	40012c00 	.word	0x40012c00

08002638 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	f023 0201 	bic.w	r2, r3, #1
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002662:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f023 030a 	bic.w	r3, r3, #10
 8002674:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	4313      	orrs	r3, r2
 800267c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	621a      	str	r2, [r3, #32]
}
 800268a:	bf00      	nop
 800268c:	371c      	adds	r7, #28
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	f023 0210 	bic.w	r2, r3, #16
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80026be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	031b      	lsls	r3, r3, #12
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80026d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4313      	orrs	r3, r2
 80026da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	621a      	str	r2, [r3, #32]
}
 80026e8:	bf00      	nop
 80026ea:	371c      	adds	r7, #28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr

080026f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b085      	sub	sp, #20
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002708:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	f043 0307 	orr.w	r3, r3, #7
 8002714:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	609a      	str	r2, [r3, #8]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002726:	b480      	push	{r7}
 8002728:	b087      	sub	sp, #28
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002740:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	021a      	lsls	r2, r3, #8
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	431a      	orrs	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	4313      	orrs	r3, r2
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4313      	orrs	r3, r2
 8002752:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	609a      	str	r2, [r3, #8]
}
 800275a:	bf00      	nop
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	2201      	movs	r2, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a1a      	ldr	r2, [r3, #32]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	43db      	mvns	r3, r3
 8002786:	401a      	ands	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a1a      	ldr	r2, [r3, #32]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	fa01 f303 	lsl.w	r3, r1, r3
 800279c:	431a      	orrs	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	621a      	str	r2, [r3, #32]
}
 80027a2:	bf00      	nop
 80027a4:	371c      	adds	r7, #28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e046      	b.n	8002852 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a16      	ldr	r2, [pc, #88]	@ (800285c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00e      	beq.n	8002826 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002810:	d009      	beq.n	8002826 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a12      	ldr	r2, [pc, #72]	@ (8002860 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a10      	ldr	r2, [pc, #64]	@ (8002864 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d10c      	bne.n	8002840 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800282c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	4313      	orrs	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr
 800285c:	40012c00 	.word	0x40012c00
 8002860:	40000400 	.word	0x40000400
 8002864:	40000800 	.word	0x40000800

08002868 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002880:	2302      	movs	r3, #2
 8002882:	e03d      	b.n	8002900 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	4313      	orrs	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	4313      	orrs	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr

0800290a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr

0800292e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e042      	b.n	80029c6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d106      	bne.n	800295a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7fd fec3 	bl	80006e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2224      	movs	r2, #36	@ 0x24
 800295e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002970:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fdb8 	bl	80034e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691a      	ldr	r2, [r3, #16]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002986:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002996:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b08a      	sub	sp, #40	@ 0x28
 80029d2:	af02      	add	r7, sp, #8
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	603b      	str	r3, [r7, #0]
 80029da:	4613      	mov	r3, r2
 80029dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b20      	cmp	r3, #32
 80029ec:	d175      	bne.n	8002ada <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <HAL_UART_Transmit+0x2c>
 80029f4:	88fb      	ldrh	r3, [r7, #6]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e06e      	b.n	8002adc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2221      	movs	r2, #33	@ 0x21
 8002a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a0c:	f7fd ffc0 	bl	8000990 <HAL_GetTick>
 8002a10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	88fa      	ldrh	r2, [r7, #6]
 8002a16:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	88fa      	ldrh	r2, [r7, #6]
 8002a1c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a26:	d108      	bne.n	8002a3a <HAL_UART_Transmit+0x6c>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d104      	bne.n	8002a3a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	61bb      	str	r3, [r7, #24]
 8002a38:	e003      	b.n	8002a42 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a42:	e02e      	b.n	8002aa2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2180      	movs	r1, #128	@ 0x80
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 fb1d 	bl	800308e <UART_WaitOnFlagUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e03a      	b.n	8002adc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10b      	bne.n	8002a84 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a7a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	3302      	adds	r3, #2
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	e007      	b.n	8002a94 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	781a      	ldrb	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3301      	adds	r3, #1
 8002a92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1cb      	bne.n	8002a44 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2140      	movs	r1, #64	@ 0x40
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 fae9 	bl	800308e <UART_WaitOnFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e006      	b.n	8002adc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	e000      	b.n	8002adc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002ada:	2302      	movs	r3, #2
  }
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3720      	adds	r7, #32
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	4613      	mov	r3, r2
 8002af0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	d112      	bne.n	8002b24 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_UART_Receive_IT+0x26>
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e00b      	b.n	8002b26 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	461a      	mov	r2, r3
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 fb10 	bl	8003140 <UART_Start_Receive_IT>
 8002b20:	4603      	mov	r3, r0
 8002b22:	e000      	b.n	8002b26 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002b24:	2302      	movs	r3, #2
  }
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b0ba      	sub	sp, #232	@ 0xe8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002b6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10f      	bne.n	8002b96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <HAL_UART_IRQHandler+0x66>
 8002b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fbec 	bl	800336c <UART_Receive_IT>
      return;
 8002b94:	e25b      	b.n	800304e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 80de 	beq.w	8002d5c <HAL_UART_IRQHandler+0x22c>
 8002ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d106      	bne.n	8002bba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bb0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80d1 	beq.w	8002d5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00b      	beq.n	8002bde <HAL_UART_IRQHandler+0xae>
 8002bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd6:	f043 0201 	orr.w	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00b      	beq.n	8002c02 <HAL_UART_IRQHandler+0xd2>
 8002bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	f043 0202 	orr.w	r2, r3, #2
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00b      	beq.n	8002c26 <HAL_UART_IRQHandler+0xf6>
 8002c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1e:	f043 0204 	orr.w	r2, r3, #4
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d011      	beq.n	8002c56 <HAL_UART_IRQHandler+0x126>
 8002c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d105      	bne.n	8002c4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4e:	f043 0208 	orr.w	r2, r3, #8
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 81f2 	beq.w	8003044 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c64:	f003 0320 	and.w	r3, r3, #32
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_UART_IRQHandler+0x14e>
 8002c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c70:	f003 0320 	and.w	r3, r3, #32
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 fb77 	bl	800336c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	bf14      	ite	ne
 8002c8c:	2301      	movne	r3, #1
 8002c8e:	2300      	moveq	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d103      	bne.n	8002caa <HAL_UART_IRQHandler+0x17a>
 8002ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d04f      	beq.n	8002d4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fa81 	bl	80031b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d041      	beq.n	8002d42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3314      	adds	r3, #20
 8002cc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ccc:	e853 3f00 	ldrex	r3, [r3]
 8002cd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	3314      	adds	r3, #20
 8002ce6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002cea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002cee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002cf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002cfa:	e841 2300 	strex	r3, r2, [r1]
 8002cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002d02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1d9      	bne.n	8002cbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d013      	beq.n	8002d3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d16:	4a7e      	ldr	r2, [pc, #504]	@ (8002f10 <HAL_UART_IRQHandler+0x3e0>)
 8002d18:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd ff88 	bl	8000c34 <HAL_DMA_Abort_IT>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d016      	beq.n	8002d58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d34:	4610      	mov	r0, r2
 8002d36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d38:	e00e      	b.n	8002d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f993 	bl	8003066 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d40:	e00a      	b.n	8002d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f98f 	bl	8003066 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d48:	e006      	b.n	8002d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f98b 	bl	8003066 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002d56:	e175      	b.n	8003044 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d58:	bf00      	nop
    return;
 8002d5a:	e173      	b.n	8003044 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	f040 814f 	bne.w	8003004 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 8148 	beq.w	8003004 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 8141 	beq.w	8003004 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 80b6 	beq.w	8002f14 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002db4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 8145 	beq.w	8003048 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002dc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	f080 813e 	bcs.w	8003048 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002dd2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2b20      	cmp	r3, #32
 8002ddc:	f000 8088 	beq.w	8002ef0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	330c      	adds	r3, #12
 8002de6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002dee:	e853 3f00 	ldrex	r3, [r3]
 8002df2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002df6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002dfa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dfe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	330c      	adds	r3, #12
 8002e08:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002e0c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e14:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002e18:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002e1c:	e841 2300 	strex	r3, r2, [r1]
 8002e20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002e24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1d9      	bne.n	8002de0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3314      	adds	r3, #20
 8002e32:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e36:	e853 3f00 	ldrex	r3, [r3]
 8002e3a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002e3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e3e:	f023 0301 	bic.w	r3, r3, #1
 8002e42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3314      	adds	r3, #20
 8002e4c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e50:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002e54:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e56:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002e58:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002e5c:	e841 2300 	strex	r3, r2, [r1]
 8002e60:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002e62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1e1      	bne.n	8002e2c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3314      	adds	r3, #20
 8002e6e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e72:	e853 3f00 	ldrex	r3, [r3]
 8002e76:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002e78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3314      	adds	r3, #20
 8002e88:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002e8c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e8e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e90:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002e92:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e94:	e841 2300 	strex	r3, r2, [r1]
 8002e98:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002e9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1e3      	bne.n	8002e68 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	330c      	adds	r3, #12
 8002eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002eb8:	e853 3f00 	ldrex	r3, [r3]
 8002ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002ebe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ec0:	f023 0310 	bic.w	r3, r3, #16
 8002ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	330c      	adds	r3, #12
 8002ece:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002ed2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002ed4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ed8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002eda:	e841 2300 	strex	r3, r2, [r1]
 8002ede:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002ee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1e3      	bne.n	8002eae <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fd fe67 	bl	8000bbe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	4619      	mov	r1, r3
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f8b6 	bl	8003078 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f0c:	e09c      	b.n	8003048 <HAL_UART_IRQHandler+0x518>
 8002f0e:	bf00      	nop
 8002f10:	08003277 	.word	0x08003277
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 808e 	beq.w	800304c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002f30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 8089 	beq.w	800304c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	330c      	adds	r3, #12
 8002f40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f44:	e853 3f00 	ldrex	r3, [r3]
 8002f48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	330c      	adds	r3, #12
 8002f5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002f5e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002f60:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f66:	e841 2300 	strex	r3, r2, [r1]
 8002f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1e3      	bne.n	8002f3a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3314      	adds	r3, #20
 8002f78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7c:	e853 3f00 	ldrex	r3, [r3]
 8002f80:	623b      	str	r3, [r7, #32]
   return(result);
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	f023 0301 	bic.w	r3, r3, #1
 8002f88:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	3314      	adds	r3, #20
 8002f92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f96:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f9e:	e841 2300 	strex	r3, r2, [r1]
 8002fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1e3      	bne.n	8002f72 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	330c      	adds	r3, #12
 8002fbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	e853 3f00 	ldrex	r3, [r3]
 8002fc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0310 	bic.w	r3, r3, #16
 8002fce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	330c      	adds	r3, #12
 8002fd8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002fdc:	61fa      	str	r2, [r7, #28]
 8002fde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe0:	69b9      	ldr	r1, [r7, #24]
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	e841 2300 	strex	r3, r2, [r1]
 8002fe8:	617b      	str	r3, [r7, #20]
   return(result);
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1e3      	bne.n	8002fb8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ff6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f83b 	bl	8003078 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003002:	e023      	b.n	800304c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300c:	2b00      	cmp	r3, #0
 800300e:	d009      	beq.n	8003024 <HAL_UART_IRQHandler+0x4f4>
 8003010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003014:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f93e 	bl	800329e <UART_Transmit_IT>
    return;
 8003022:	e014      	b.n	800304e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00e      	beq.n	800304e <HAL_UART_IRQHandler+0x51e>
 8003030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f97d 	bl	800333c <UART_EndTransmit_IT>
    return;
 8003042:	e004      	b.n	800304e <HAL_UART_IRQHandler+0x51e>
    return;
 8003044:	bf00      	nop
 8003046:	e002      	b.n	800304e <HAL_UART_IRQHandler+0x51e>
      return;
 8003048:	bf00      	nop
 800304a:	e000      	b.n	800304e <HAL_UART_IRQHandler+0x51e>
      return;
 800304c:	bf00      	nop
  }
}
 800304e:	37e8      	adds	r7, #232	@ 0xe8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr

08003066 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr

08003078 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b086      	sub	sp, #24
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	603b      	str	r3, [r7, #0]
 800309a:	4613      	mov	r3, r2
 800309c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800309e:	e03b      	b.n	8003118 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a6:	d037      	beq.n	8003118 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a8:	f7fd fc72 	bl	8000990 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	6a3a      	ldr	r2, [r7, #32]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d302      	bcc.n	80030be <UART_WaitOnFlagUntilTimeout+0x30>
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e03a      	b.n	8003138 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d023      	beq.n	8003118 <UART_WaitOnFlagUntilTimeout+0x8a>
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b80      	cmp	r3, #128	@ 0x80
 80030d4:	d020      	beq.n	8003118 <UART_WaitOnFlagUntilTimeout+0x8a>
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b40      	cmp	r3, #64	@ 0x40
 80030da:	d01d      	beq.n	8003118 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d116      	bne.n	8003118 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 f856 	bl	80031b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2208      	movs	r2, #8
 800310a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e00f      	b.n	8003138 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	4013      	ands	r3, r2
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	429a      	cmp	r2, r3
 8003126:	bf0c      	ite	eq
 8003128:	2301      	moveq	r3, #1
 800312a:	2300      	movne	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	461a      	mov	r2, r3
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	429a      	cmp	r2, r3
 8003134:	d0b4      	beq.n	80030a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	4613      	mov	r3, r2
 800314c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	88fa      	ldrh	r2, [r7, #6]
 8003158:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	88fa      	ldrh	r2, [r7, #6]
 800315e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2222      	movs	r2, #34	@ 0x22
 800316a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d007      	beq.n	8003186 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003184:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0201 	orr.w	r2, r2, #1
 8003194:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 0220 	orr.w	r2, r2, #32
 80031a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr

080031b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b095      	sub	sp, #84	@ 0x54
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	330c      	adds	r3, #12
 80031c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c4:	e853 3f00 	ldrex	r3, [r3]
 80031c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	330c      	adds	r3, #12
 80031d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031da:	643a      	str	r2, [r7, #64]	@ 0x40
 80031dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031e2:	e841 2300 	strex	r3, r2, [r1]
 80031e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1e5      	bne.n	80031ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3314      	adds	r3, #20
 80031f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	e853 3f00 	ldrex	r3, [r3]
 80031fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	3314      	adds	r3, #20
 800320c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800320e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003210:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003212:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003214:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003216:	e841 2300 	strex	r3, r2, [r1]
 800321a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800321c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1e5      	bne.n	80031ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003226:	2b01      	cmp	r3, #1
 8003228:	d119      	bne.n	800325e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	330c      	adds	r3, #12
 8003230:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	e853 3f00 	ldrex	r3, [r3]
 8003238:	60bb      	str	r3, [r7, #8]
   return(result);
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f023 0310 	bic.w	r3, r3, #16
 8003240:	647b      	str	r3, [r7, #68]	@ 0x44
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	330c      	adds	r3, #12
 8003248:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800324a:	61ba      	str	r2, [r7, #24]
 800324c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324e:	6979      	ldr	r1, [r7, #20]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	e841 2300 	strex	r3, r2, [r1]
 8003256:	613b      	str	r3, [r7, #16]
   return(result);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1e5      	bne.n	800322a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800326c:	bf00      	nop
 800326e:	3754      	adds	r7, #84	@ 0x54
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr

08003276 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b084      	sub	sp, #16
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f7ff fee8 	bl	8003066 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003296:	bf00      	nop
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800329e:	b480      	push	{r7}
 80032a0:	b085      	sub	sp, #20
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b21      	cmp	r3, #33	@ 0x21
 80032b0:	d13e      	bne.n	8003330 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ba:	d114      	bne.n	80032e6 <UART_Transmit_IT+0x48>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d110      	bne.n	80032e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	1c9a      	adds	r2, r3, #2
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	621a      	str	r2, [r3, #32]
 80032e4:	e008      	b.n	80032f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	1c59      	adds	r1, r3, #1
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6211      	str	r1, [r2, #32]
 80032f0:	781a      	ldrb	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29b      	uxth	r3, r3
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	4619      	mov	r1, r3
 8003306:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10f      	bne.n	800332c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800331a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800332a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	e000      	b.n	8003332 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003330:	2302      	movs	r3, #2
  }
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr

0800333c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003352:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7ff fe79 	bl	8003054 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08c      	sub	sp, #48	@ 0x30
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b22      	cmp	r3, #34	@ 0x22
 800337e:	f040 80ae 	bne.w	80034de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800338a:	d117      	bne.n	80033bc <UART_Receive_IT+0x50>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d113      	bne.n	80033bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003394:	2300      	movs	r3, #0
 8003396:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b4:	1c9a      	adds	r2, r3, #2
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80033ba:	e026      	b.n	800340a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ce:	d007      	beq.n	80033e0 <UART_Receive_IT+0x74>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10a      	bne.n	80033ee <UART_Receive_IT+0x82>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d106      	bne.n	80033ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ea:	701a      	strb	r2, [r3, #0]
 80033ec:	e008      	b.n	8003400 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29b      	uxth	r3, r3
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	4619      	mov	r1, r3
 8003418:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800341a:	2b00      	cmp	r3, #0
 800341c:	d15d      	bne.n	80034da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0220 	bic.w	r2, r2, #32
 800342c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800343c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0201 	bic.w	r2, r2, #1
 800344c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2220      	movs	r2, #32
 8003452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003460:	2b01      	cmp	r3, #1
 8003462:	d135      	bne.n	80034d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	330c      	adds	r3, #12
 8003470:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	e853 3f00 	ldrex	r3, [r3]
 8003478:	613b      	str	r3, [r7, #16]
   return(result);
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f023 0310 	bic.w	r3, r3, #16
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	330c      	adds	r3, #12
 8003488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800348a:	623a      	str	r2, [r7, #32]
 800348c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348e:	69f9      	ldr	r1, [r7, #28]
 8003490:	6a3a      	ldr	r2, [r7, #32]
 8003492:	e841 2300 	strex	r3, r2, [r1]
 8003496:	61bb      	str	r3, [r7, #24]
   return(result);
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1e5      	bne.n	800346a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	2b10      	cmp	r3, #16
 80034aa:	d10a      	bne.n	80034c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034c6:	4619      	mov	r1, r3
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff fdd5 	bl	8003078 <HAL_UARTEx_RxEventCallback>
 80034ce:	e002      	b.n	80034d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7fc ffef 	bl	80004b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	e002      	b.n	80034e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	e000      	b.n	80034e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80034de:	2302      	movs	r3, #2
  }
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3730      	adds	r7, #48	@ 0x30
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003522:	f023 030c 	bic.w	r3, r3, #12
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	430b      	orrs	r3, r1
 800352e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a2c      	ldr	r2, [pc, #176]	@ (80035fc <UART_SetConfig+0x114>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d103      	bne.n	8003558 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003550:	f7fe f962 	bl	8001818 <HAL_RCC_GetPCLK2Freq>
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	e002      	b.n	800355e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003558:	f7fe f94a 	bl	80017f0 <HAL_RCC_GetPCLK1Freq>
 800355c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	009a      	lsls	r2, r3, #2
 8003568:	441a      	add	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	fbb2 f3f3 	udiv	r3, r2, r3
 8003574:	4a22      	ldr	r2, [pc, #136]	@ (8003600 <UART_SetConfig+0x118>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	0119      	lsls	r1, r3, #4
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	009a      	lsls	r2, r3, #2
 8003588:	441a      	add	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	fbb2 f2f3 	udiv	r2, r2, r3
 8003594:	4b1a      	ldr	r3, [pc, #104]	@ (8003600 <UART_SetConfig+0x118>)
 8003596:	fba3 0302 	umull	r0, r3, r3, r2
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	2064      	movs	r0, #100	@ 0x64
 800359e:	fb00 f303 	mul.w	r3, r0, r3
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	3332      	adds	r3, #50	@ 0x32
 80035a8:	4a15      	ldr	r2, [pc, #84]	@ (8003600 <UART_SetConfig+0x118>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035b4:	4419      	add	r1, r3
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	009a      	lsls	r2, r3, #2
 80035c0:	441a      	add	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003600 <UART_SetConfig+0x118>)
 80035ce:	fba3 0302 	umull	r0, r3, r3, r2
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	2064      	movs	r0, #100	@ 0x64
 80035d6:	fb00 f303 	mul.w	r3, r0, r3
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	3332      	adds	r3, #50	@ 0x32
 80035e0:	4a07      	ldr	r2, [pc, #28]	@ (8003600 <UART_SetConfig+0x118>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	f003 020f 	and.w	r2, r3, #15
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	440a      	add	r2, r1
 80035f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40013800 	.word	0x40013800
 8003600:	51eb851f 	.word	0x51eb851f

08003604 <siprintf>:
 8003604:	b40e      	push	{r1, r2, r3}
 8003606:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800360a:	b510      	push	{r4, lr}
 800360c:	2400      	movs	r4, #0
 800360e:	b09d      	sub	sp, #116	@ 0x74
 8003610:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003612:	9002      	str	r0, [sp, #8]
 8003614:	9006      	str	r0, [sp, #24]
 8003616:	9107      	str	r1, [sp, #28]
 8003618:	9104      	str	r1, [sp, #16]
 800361a:	4809      	ldr	r0, [pc, #36]	@ (8003640 <siprintf+0x3c>)
 800361c:	4909      	ldr	r1, [pc, #36]	@ (8003644 <siprintf+0x40>)
 800361e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003622:	9105      	str	r1, [sp, #20]
 8003624:	6800      	ldr	r0, [r0, #0]
 8003626:	a902      	add	r1, sp, #8
 8003628:	9301      	str	r3, [sp, #4]
 800362a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800362c:	f000 f9c0 	bl	80039b0 <_svfiprintf_r>
 8003630:	9b02      	ldr	r3, [sp, #8]
 8003632:	701c      	strb	r4, [r3, #0]
 8003634:	b01d      	add	sp, #116	@ 0x74
 8003636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800363a:	b003      	add	sp, #12
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	2000000c 	.word	0x2000000c
 8003644:	ffff0208 	.word	0xffff0208

08003648 <siscanf>:
 8003648:	b40e      	push	{r1, r2, r3}
 800364a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800364e:	b570      	push	{r4, r5, r6, lr}
 8003650:	2500      	movs	r5, #0
 8003652:	b09d      	sub	sp, #116	@ 0x74
 8003654:	ac21      	add	r4, sp, #132	@ 0x84
 8003656:	f854 6b04 	ldr.w	r6, [r4], #4
 800365a:	f8ad 2014 	strh.w	r2, [sp, #20]
 800365e:	951b      	str	r5, [sp, #108]	@ 0x6c
 8003660:	9002      	str	r0, [sp, #8]
 8003662:	9006      	str	r0, [sp, #24]
 8003664:	f7fc fd72 	bl	800014c <strlen>
 8003668:	4b0b      	ldr	r3, [pc, #44]	@ (8003698 <siscanf+0x50>)
 800366a:	9003      	str	r0, [sp, #12]
 800366c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800366e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003672:	9007      	str	r0, [sp, #28]
 8003674:	4809      	ldr	r0, [pc, #36]	@ (800369c <siscanf+0x54>)
 8003676:	f8ad 3016 	strh.w	r3, [sp, #22]
 800367a:	4632      	mov	r2, r6
 800367c:	4623      	mov	r3, r4
 800367e:	a902      	add	r1, sp, #8
 8003680:	6800      	ldr	r0, [r0, #0]
 8003682:	950f      	str	r5, [sp, #60]	@ 0x3c
 8003684:	9514      	str	r5, [sp, #80]	@ 0x50
 8003686:	9401      	str	r4, [sp, #4]
 8003688:	f000 fae8 	bl	8003c5c <__ssvfiscanf_r>
 800368c:	b01d      	add	sp, #116	@ 0x74
 800368e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003692:	b003      	add	sp, #12
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	080036a1 	.word	0x080036a1
 800369c:	2000000c 	.word	0x2000000c

080036a0 <__seofread>:
 80036a0:	2000      	movs	r0, #0
 80036a2:	4770      	bx	lr

080036a4 <memset>:
 80036a4:	4603      	mov	r3, r0
 80036a6:	4402      	add	r2, r0
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d100      	bne.n	80036ae <memset+0xa>
 80036ac:	4770      	bx	lr
 80036ae:	f803 1b01 	strb.w	r1, [r3], #1
 80036b2:	e7f9      	b.n	80036a8 <memset+0x4>

080036b4 <__errno>:
 80036b4:	4b01      	ldr	r3, [pc, #4]	@ (80036bc <__errno+0x8>)
 80036b6:	6818      	ldr	r0, [r3, #0]
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	2000000c 	.word	0x2000000c

080036c0 <__libc_init_array>:
 80036c0:	b570      	push	{r4, r5, r6, lr}
 80036c2:	2600      	movs	r6, #0
 80036c4:	4d0c      	ldr	r5, [pc, #48]	@ (80036f8 <__libc_init_array+0x38>)
 80036c6:	4c0d      	ldr	r4, [pc, #52]	@ (80036fc <__libc_init_array+0x3c>)
 80036c8:	1b64      	subs	r4, r4, r5
 80036ca:	10a4      	asrs	r4, r4, #2
 80036cc:	42a6      	cmp	r6, r4
 80036ce:	d109      	bne.n	80036e4 <__libc_init_array+0x24>
 80036d0:	f001 f8ee 	bl	80048b0 <_init>
 80036d4:	2600      	movs	r6, #0
 80036d6:	4d0a      	ldr	r5, [pc, #40]	@ (8003700 <__libc_init_array+0x40>)
 80036d8:	4c0a      	ldr	r4, [pc, #40]	@ (8003704 <__libc_init_array+0x44>)
 80036da:	1b64      	subs	r4, r4, r5
 80036dc:	10a4      	asrs	r4, r4, #2
 80036de:	42a6      	cmp	r6, r4
 80036e0:	d105      	bne.n	80036ee <__libc_init_array+0x2e>
 80036e2:	bd70      	pop	{r4, r5, r6, pc}
 80036e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e8:	4798      	blx	r3
 80036ea:	3601      	adds	r6, #1
 80036ec:	e7ee      	b.n	80036cc <__libc_init_array+0xc>
 80036ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80036f2:	4798      	blx	r3
 80036f4:	3601      	adds	r6, #1
 80036f6:	e7f2      	b.n	80036de <__libc_init_array+0x1e>
 80036f8:	08004a74 	.word	0x08004a74
 80036fc:	08004a74 	.word	0x08004a74
 8003700:	08004a74 	.word	0x08004a74
 8003704:	08004a78 	.word	0x08004a78

08003708 <__retarget_lock_acquire_recursive>:
 8003708:	4770      	bx	lr

0800370a <__retarget_lock_release_recursive>:
 800370a:	4770      	bx	lr

0800370c <_free_r>:
 800370c:	b538      	push	{r3, r4, r5, lr}
 800370e:	4605      	mov	r5, r0
 8003710:	2900      	cmp	r1, #0
 8003712:	d040      	beq.n	8003796 <_free_r+0x8a>
 8003714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003718:	1f0c      	subs	r4, r1, #4
 800371a:	2b00      	cmp	r3, #0
 800371c:	bfb8      	it	lt
 800371e:	18e4      	addlt	r4, r4, r3
 8003720:	f000 f8de 	bl	80038e0 <__malloc_lock>
 8003724:	4a1c      	ldr	r2, [pc, #112]	@ (8003798 <_free_r+0x8c>)
 8003726:	6813      	ldr	r3, [r2, #0]
 8003728:	b933      	cbnz	r3, 8003738 <_free_r+0x2c>
 800372a:	6063      	str	r3, [r4, #4]
 800372c:	6014      	str	r4, [r2, #0]
 800372e:	4628      	mov	r0, r5
 8003730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003734:	f000 b8da 	b.w	80038ec <__malloc_unlock>
 8003738:	42a3      	cmp	r3, r4
 800373a:	d908      	bls.n	800374e <_free_r+0x42>
 800373c:	6820      	ldr	r0, [r4, #0]
 800373e:	1821      	adds	r1, r4, r0
 8003740:	428b      	cmp	r3, r1
 8003742:	bf01      	itttt	eq
 8003744:	6819      	ldreq	r1, [r3, #0]
 8003746:	685b      	ldreq	r3, [r3, #4]
 8003748:	1809      	addeq	r1, r1, r0
 800374a:	6021      	streq	r1, [r4, #0]
 800374c:	e7ed      	b.n	800372a <_free_r+0x1e>
 800374e:	461a      	mov	r2, r3
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	b10b      	cbz	r3, 8003758 <_free_r+0x4c>
 8003754:	42a3      	cmp	r3, r4
 8003756:	d9fa      	bls.n	800374e <_free_r+0x42>
 8003758:	6811      	ldr	r1, [r2, #0]
 800375a:	1850      	adds	r0, r2, r1
 800375c:	42a0      	cmp	r0, r4
 800375e:	d10b      	bne.n	8003778 <_free_r+0x6c>
 8003760:	6820      	ldr	r0, [r4, #0]
 8003762:	4401      	add	r1, r0
 8003764:	1850      	adds	r0, r2, r1
 8003766:	4283      	cmp	r3, r0
 8003768:	6011      	str	r1, [r2, #0]
 800376a:	d1e0      	bne.n	800372e <_free_r+0x22>
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	4408      	add	r0, r1
 8003772:	6010      	str	r0, [r2, #0]
 8003774:	6053      	str	r3, [r2, #4]
 8003776:	e7da      	b.n	800372e <_free_r+0x22>
 8003778:	d902      	bls.n	8003780 <_free_r+0x74>
 800377a:	230c      	movs	r3, #12
 800377c:	602b      	str	r3, [r5, #0]
 800377e:	e7d6      	b.n	800372e <_free_r+0x22>
 8003780:	6820      	ldr	r0, [r4, #0]
 8003782:	1821      	adds	r1, r4, r0
 8003784:	428b      	cmp	r3, r1
 8003786:	bf01      	itttt	eq
 8003788:	6819      	ldreq	r1, [r3, #0]
 800378a:	685b      	ldreq	r3, [r3, #4]
 800378c:	1809      	addeq	r1, r1, r0
 800378e:	6021      	streq	r1, [r4, #0]
 8003790:	6063      	str	r3, [r4, #4]
 8003792:	6054      	str	r4, [r2, #4]
 8003794:	e7cb      	b.n	800372e <_free_r+0x22>
 8003796:	bd38      	pop	{r3, r4, r5, pc}
 8003798:	200002c0 	.word	0x200002c0

0800379c <sbrk_aligned>:
 800379c:	b570      	push	{r4, r5, r6, lr}
 800379e:	4e0f      	ldr	r6, [pc, #60]	@ (80037dc <sbrk_aligned+0x40>)
 80037a0:	460c      	mov	r4, r1
 80037a2:	6831      	ldr	r1, [r6, #0]
 80037a4:	4605      	mov	r5, r0
 80037a6:	b911      	cbnz	r1, 80037ae <sbrk_aligned+0x12>
 80037a8:	f000 ff34 	bl	8004614 <_sbrk_r>
 80037ac:	6030      	str	r0, [r6, #0]
 80037ae:	4621      	mov	r1, r4
 80037b0:	4628      	mov	r0, r5
 80037b2:	f000 ff2f 	bl	8004614 <_sbrk_r>
 80037b6:	1c43      	adds	r3, r0, #1
 80037b8:	d103      	bne.n	80037c2 <sbrk_aligned+0x26>
 80037ba:	f04f 34ff 	mov.w	r4, #4294967295
 80037be:	4620      	mov	r0, r4
 80037c0:	bd70      	pop	{r4, r5, r6, pc}
 80037c2:	1cc4      	adds	r4, r0, #3
 80037c4:	f024 0403 	bic.w	r4, r4, #3
 80037c8:	42a0      	cmp	r0, r4
 80037ca:	d0f8      	beq.n	80037be <sbrk_aligned+0x22>
 80037cc:	1a21      	subs	r1, r4, r0
 80037ce:	4628      	mov	r0, r5
 80037d0:	f000 ff20 	bl	8004614 <_sbrk_r>
 80037d4:	3001      	adds	r0, #1
 80037d6:	d1f2      	bne.n	80037be <sbrk_aligned+0x22>
 80037d8:	e7ef      	b.n	80037ba <sbrk_aligned+0x1e>
 80037da:	bf00      	nop
 80037dc:	200002bc 	.word	0x200002bc

080037e0 <_malloc_r>:
 80037e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037e4:	1ccd      	adds	r5, r1, #3
 80037e6:	f025 0503 	bic.w	r5, r5, #3
 80037ea:	3508      	adds	r5, #8
 80037ec:	2d0c      	cmp	r5, #12
 80037ee:	bf38      	it	cc
 80037f0:	250c      	movcc	r5, #12
 80037f2:	2d00      	cmp	r5, #0
 80037f4:	4606      	mov	r6, r0
 80037f6:	db01      	blt.n	80037fc <_malloc_r+0x1c>
 80037f8:	42a9      	cmp	r1, r5
 80037fa:	d904      	bls.n	8003806 <_malloc_r+0x26>
 80037fc:	230c      	movs	r3, #12
 80037fe:	6033      	str	r3, [r6, #0]
 8003800:	2000      	movs	r0, #0
 8003802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003806:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80038dc <_malloc_r+0xfc>
 800380a:	f000 f869 	bl	80038e0 <__malloc_lock>
 800380e:	f8d8 3000 	ldr.w	r3, [r8]
 8003812:	461c      	mov	r4, r3
 8003814:	bb44      	cbnz	r4, 8003868 <_malloc_r+0x88>
 8003816:	4629      	mov	r1, r5
 8003818:	4630      	mov	r0, r6
 800381a:	f7ff ffbf 	bl	800379c <sbrk_aligned>
 800381e:	1c43      	adds	r3, r0, #1
 8003820:	4604      	mov	r4, r0
 8003822:	d158      	bne.n	80038d6 <_malloc_r+0xf6>
 8003824:	f8d8 4000 	ldr.w	r4, [r8]
 8003828:	4627      	mov	r7, r4
 800382a:	2f00      	cmp	r7, #0
 800382c:	d143      	bne.n	80038b6 <_malloc_r+0xd6>
 800382e:	2c00      	cmp	r4, #0
 8003830:	d04b      	beq.n	80038ca <_malloc_r+0xea>
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	4639      	mov	r1, r7
 8003836:	4630      	mov	r0, r6
 8003838:	eb04 0903 	add.w	r9, r4, r3
 800383c:	f000 feea 	bl	8004614 <_sbrk_r>
 8003840:	4581      	cmp	r9, r0
 8003842:	d142      	bne.n	80038ca <_malloc_r+0xea>
 8003844:	6821      	ldr	r1, [r4, #0]
 8003846:	4630      	mov	r0, r6
 8003848:	1a6d      	subs	r5, r5, r1
 800384a:	4629      	mov	r1, r5
 800384c:	f7ff ffa6 	bl	800379c <sbrk_aligned>
 8003850:	3001      	adds	r0, #1
 8003852:	d03a      	beq.n	80038ca <_malloc_r+0xea>
 8003854:	6823      	ldr	r3, [r4, #0]
 8003856:	442b      	add	r3, r5
 8003858:	6023      	str	r3, [r4, #0]
 800385a:	f8d8 3000 	ldr.w	r3, [r8]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	bb62      	cbnz	r2, 80038bc <_malloc_r+0xdc>
 8003862:	f8c8 7000 	str.w	r7, [r8]
 8003866:	e00f      	b.n	8003888 <_malloc_r+0xa8>
 8003868:	6822      	ldr	r2, [r4, #0]
 800386a:	1b52      	subs	r2, r2, r5
 800386c:	d420      	bmi.n	80038b0 <_malloc_r+0xd0>
 800386e:	2a0b      	cmp	r2, #11
 8003870:	d917      	bls.n	80038a2 <_malloc_r+0xc2>
 8003872:	1961      	adds	r1, r4, r5
 8003874:	42a3      	cmp	r3, r4
 8003876:	6025      	str	r5, [r4, #0]
 8003878:	bf18      	it	ne
 800387a:	6059      	strne	r1, [r3, #4]
 800387c:	6863      	ldr	r3, [r4, #4]
 800387e:	bf08      	it	eq
 8003880:	f8c8 1000 	streq.w	r1, [r8]
 8003884:	5162      	str	r2, [r4, r5]
 8003886:	604b      	str	r3, [r1, #4]
 8003888:	4630      	mov	r0, r6
 800388a:	f000 f82f 	bl	80038ec <__malloc_unlock>
 800388e:	f104 000b 	add.w	r0, r4, #11
 8003892:	1d23      	adds	r3, r4, #4
 8003894:	f020 0007 	bic.w	r0, r0, #7
 8003898:	1ac2      	subs	r2, r0, r3
 800389a:	bf1c      	itt	ne
 800389c:	1a1b      	subne	r3, r3, r0
 800389e:	50a3      	strne	r3, [r4, r2]
 80038a0:	e7af      	b.n	8003802 <_malloc_r+0x22>
 80038a2:	6862      	ldr	r2, [r4, #4]
 80038a4:	42a3      	cmp	r3, r4
 80038a6:	bf0c      	ite	eq
 80038a8:	f8c8 2000 	streq.w	r2, [r8]
 80038ac:	605a      	strne	r2, [r3, #4]
 80038ae:	e7eb      	b.n	8003888 <_malloc_r+0xa8>
 80038b0:	4623      	mov	r3, r4
 80038b2:	6864      	ldr	r4, [r4, #4]
 80038b4:	e7ae      	b.n	8003814 <_malloc_r+0x34>
 80038b6:	463c      	mov	r4, r7
 80038b8:	687f      	ldr	r7, [r7, #4]
 80038ba:	e7b6      	b.n	800382a <_malloc_r+0x4a>
 80038bc:	461a      	mov	r2, r3
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	42a3      	cmp	r3, r4
 80038c2:	d1fb      	bne.n	80038bc <_malloc_r+0xdc>
 80038c4:	2300      	movs	r3, #0
 80038c6:	6053      	str	r3, [r2, #4]
 80038c8:	e7de      	b.n	8003888 <_malloc_r+0xa8>
 80038ca:	230c      	movs	r3, #12
 80038cc:	4630      	mov	r0, r6
 80038ce:	6033      	str	r3, [r6, #0]
 80038d0:	f000 f80c 	bl	80038ec <__malloc_unlock>
 80038d4:	e794      	b.n	8003800 <_malloc_r+0x20>
 80038d6:	6005      	str	r5, [r0, #0]
 80038d8:	e7d6      	b.n	8003888 <_malloc_r+0xa8>
 80038da:	bf00      	nop
 80038dc:	200002c0 	.word	0x200002c0

080038e0 <__malloc_lock>:
 80038e0:	4801      	ldr	r0, [pc, #4]	@ (80038e8 <__malloc_lock+0x8>)
 80038e2:	f7ff bf11 	b.w	8003708 <__retarget_lock_acquire_recursive>
 80038e6:	bf00      	nop
 80038e8:	200002b8 	.word	0x200002b8

080038ec <__malloc_unlock>:
 80038ec:	4801      	ldr	r0, [pc, #4]	@ (80038f4 <__malloc_unlock+0x8>)
 80038ee:	f7ff bf0c 	b.w	800370a <__retarget_lock_release_recursive>
 80038f2:	bf00      	nop
 80038f4:	200002b8 	.word	0x200002b8

080038f8 <__ssputs_r>:
 80038f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038fc:	461f      	mov	r7, r3
 80038fe:	688e      	ldr	r6, [r1, #8]
 8003900:	4682      	mov	sl, r0
 8003902:	42be      	cmp	r6, r7
 8003904:	460c      	mov	r4, r1
 8003906:	4690      	mov	r8, r2
 8003908:	680b      	ldr	r3, [r1, #0]
 800390a:	d82d      	bhi.n	8003968 <__ssputs_r+0x70>
 800390c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003910:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003914:	d026      	beq.n	8003964 <__ssputs_r+0x6c>
 8003916:	6965      	ldr	r5, [r4, #20]
 8003918:	6909      	ldr	r1, [r1, #16]
 800391a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800391e:	eba3 0901 	sub.w	r9, r3, r1
 8003922:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003926:	1c7b      	adds	r3, r7, #1
 8003928:	444b      	add	r3, r9
 800392a:	106d      	asrs	r5, r5, #1
 800392c:	429d      	cmp	r5, r3
 800392e:	bf38      	it	cc
 8003930:	461d      	movcc	r5, r3
 8003932:	0553      	lsls	r3, r2, #21
 8003934:	d527      	bpl.n	8003986 <__ssputs_r+0x8e>
 8003936:	4629      	mov	r1, r5
 8003938:	f7ff ff52 	bl	80037e0 <_malloc_r>
 800393c:	4606      	mov	r6, r0
 800393e:	b360      	cbz	r0, 800399a <__ssputs_r+0xa2>
 8003940:	464a      	mov	r2, r9
 8003942:	6921      	ldr	r1, [r4, #16]
 8003944:	f000 fe84 	bl	8004650 <memcpy>
 8003948:	89a3      	ldrh	r3, [r4, #12]
 800394a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800394e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003952:	81a3      	strh	r3, [r4, #12]
 8003954:	6126      	str	r6, [r4, #16]
 8003956:	444e      	add	r6, r9
 8003958:	6026      	str	r6, [r4, #0]
 800395a:	463e      	mov	r6, r7
 800395c:	6165      	str	r5, [r4, #20]
 800395e:	eba5 0509 	sub.w	r5, r5, r9
 8003962:	60a5      	str	r5, [r4, #8]
 8003964:	42be      	cmp	r6, r7
 8003966:	d900      	bls.n	800396a <__ssputs_r+0x72>
 8003968:	463e      	mov	r6, r7
 800396a:	4632      	mov	r2, r6
 800396c:	4641      	mov	r1, r8
 800396e:	6820      	ldr	r0, [r4, #0]
 8003970:	f000 fe35 	bl	80045de <memmove>
 8003974:	2000      	movs	r0, #0
 8003976:	68a3      	ldr	r3, [r4, #8]
 8003978:	1b9b      	subs	r3, r3, r6
 800397a:	60a3      	str	r3, [r4, #8]
 800397c:	6823      	ldr	r3, [r4, #0]
 800397e:	4433      	add	r3, r6
 8003980:	6023      	str	r3, [r4, #0]
 8003982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003986:	462a      	mov	r2, r5
 8003988:	f000 fe70 	bl	800466c <_realloc_r>
 800398c:	4606      	mov	r6, r0
 800398e:	2800      	cmp	r0, #0
 8003990:	d1e0      	bne.n	8003954 <__ssputs_r+0x5c>
 8003992:	4650      	mov	r0, sl
 8003994:	6921      	ldr	r1, [r4, #16]
 8003996:	f7ff feb9 	bl	800370c <_free_r>
 800399a:	230c      	movs	r3, #12
 800399c:	f8ca 3000 	str.w	r3, [sl]
 80039a0:	89a3      	ldrh	r3, [r4, #12]
 80039a2:	f04f 30ff 	mov.w	r0, #4294967295
 80039a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039aa:	81a3      	strh	r3, [r4, #12]
 80039ac:	e7e9      	b.n	8003982 <__ssputs_r+0x8a>
	...

080039b0 <_svfiprintf_r>:
 80039b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b4:	4698      	mov	r8, r3
 80039b6:	898b      	ldrh	r3, [r1, #12]
 80039b8:	4607      	mov	r7, r0
 80039ba:	061b      	lsls	r3, r3, #24
 80039bc:	460d      	mov	r5, r1
 80039be:	4614      	mov	r4, r2
 80039c0:	b09d      	sub	sp, #116	@ 0x74
 80039c2:	d510      	bpl.n	80039e6 <_svfiprintf_r+0x36>
 80039c4:	690b      	ldr	r3, [r1, #16]
 80039c6:	b973      	cbnz	r3, 80039e6 <_svfiprintf_r+0x36>
 80039c8:	2140      	movs	r1, #64	@ 0x40
 80039ca:	f7ff ff09 	bl	80037e0 <_malloc_r>
 80039ce:	6028      	str	r0, [r5, #0]
 80039d0:	6128      	str	r0, [r5, #16]
 80039d2:	b930      	cbnz	r0, 80039e2 <_svfiprintf_r+0x32>
 80039d4:	230c      	movs	r3, #12
 80039d6:	603b      	str	r3, [r7, #0]
 80039d8:	f04f 30ff 	mov.w	r0, #4294967295
 80039dc:	b01d      	add	sp, #116	@ 0x74
 80039de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039e2:	2340      	movs	r3, #64	@ 0x40
 80039e4:	616b      	str	r3, [r5, #20]
 80039e6:	2300      	movs	r3, #0
 80039e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80039ea:	2320      	movs	r3, #32
 80039ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80039f0:	2330      	movs	r3, #48	@ 0x30
 80039f2:	f04f 0901 	mov.w	r9, #1
 80039f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80039fa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003b94 <_svfiprintf_r+0x1e4>
 80039fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a02:	4623      	mov	r3, r4
 8003a04:	469a      	mov	sl, r3
 8003a06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a0a:	b10a      	cbz	r2, 8003a10 <_svfiprintf_r+0x60>
 8003a0c:	2a25      	cmp	r2, #37	@ 0x25
 8003a0e:	d1f9      	bne.n	8003a04 <_svfiprintf_r+0x54>
 8003a10:	ebba 0b04 	subs.w	fp, sl, r4
 8003a14:	d00b      	beq.n	8003a2e <_svfiprintf_r+0x7e>
 8003a16:	465b      	mov	r3, fp
 8003a18:	4622      	mov	r2, r4
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	4638      	mov	r0, r7
 8003a1e:	f7ff ff6b 	bl	80038f8 <__ssputs_r>
 8003a22:	3001      	adds	r0, #1
 8003a24:	f000 80a7 	beq.w	8003b76 <_svfiprintf_r+0x1c6>
 8003a28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a2a:	445a      	add	r2, fp
 8003a2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a2e:	f89a 3000 	ldrb.w	r3, [sl]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 809f 	beq.w	8003b76 <_svfiprintf_r+0x1c6>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a42:	f10a 0a01 	add.w	sl, sl, #1
 8003a46:	9304      	str	r3, [sp, #16]
 8003a48:	9307      	str	r3, [sp, #28]
 8003a4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a50:	4654      	mov	r4, sl
 8003a52:	2205      	movs	r2, #5
 8003a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a58:	484e      	ldr	r0, [pc, #312]	@ (8003b94 <_svfiprintf_r+0x1e4>)
 8003a5a:	f000 fdeb 	bl	8004634 <memchr>
 8003a5e:	9a04      	ldr	r2, [sp, #16]
 8003a60:	b9d8      	cbnz	r0, 8003a9a <_svfiprintf_r+0xea>
 8003a62:	06d0      	lsls	r0, r2, #27
 8003a64:	bf44      	itt	mi
 8003a66:	2320      	movmi	r3, #32
 8003a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a6c:	0711      	lsls	r1, r2, #28
 8003a6e:	bf44      	itt	mi
 8003a70:	232b      	movmi	r3, #43	@ 0x2b
 8003a72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a76:	f89a 3000 	ldrb.w	r3, [sl]
 8003a7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a7c:	d015      	beq.n	8003aaa <_svfiprintf_r+0xfa>
 8003a7e:	4654      	mov	r4, sl
 8003a80:	2000      	movs	r0, #0
 8003a82:	f04f 0c0a 	mov.w	ip, #10
 8003a86:	9a07      	ldr	r2, [sp, #28]
 8003a88:	4621      	mov	r1, r4
 8003a8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a8e:	3b30      	subs	r3, #48	@ 0x30
 8003a90:	2b09      	cmp	r3, #9
 8003a92:	d94b      	bls.n	8003b2c <_svfiprintf_r+0x17c>
 8003a94:	b1b0      	cbz	r0, 8003ac4 <_svfiprintf_r+0x114>
 8003a96:	9207      	str	r2, [sp, #28]
 8003a98:	e014      	b.n	8003ac4 <_svfiprintf_r+0x114>
 8003a9a:	eba0 0308 	sub.w	r3, r0, r8
 8003a9e:	fa09 f303 	lsl.w	r3, r9, r3
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	46a2      	mov	sl, r4
 8003aa6:	9304      	str	r3, [sp, #16]
 8003aa8:	e7d2      	b.n	8003a50 <_svfiprintf_r+0xa0>
 8003aaa:	9b03      	ldr	r3, [sp, #12]
 8003aac:	1d19      	adds	r1, r3, #4
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	9103      	str	r1, [sp, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	bfbb      	ittet	lt
 8003ab6:	425b      	neglt	r3, r3
 8003ab8:	f042 0202 	orrlt.w	r2, r2, #2
 8003abc:	9307      	strge	r3, [sp, #28]
 8003abe:	9307      	strlt	r3, [sp, #28]
 8003ac0:	bfb8      	it	lt
 8003ac2:	9204      	strlt	r2, [sp, #16]
 8003ac4:	7823      	ldrb	r3, [r4, #0]
 8003ac6:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ac8:	d10a      	bne.n	8003ae0 <_svfiprintf_r+0x130>
 8003aca:	7863      	ldrb	r3, [r4, #1]
 8003acc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ace:	d132      	bne.n	8003b36 <_svfiprintf_r+0x186>
 8003ad0:	9b03      	ldr	r3, [sp, #12]
 8003ad2:	3402      	adds	r4, #2
 8003ad4:	1d1a      	adds	r2, r3, #4
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	9203      	str	r2, [sp, #12]
 8003ada:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ade:	9305      	str	r3, [sp, #20]
 8003ae0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003b98 <_svfiprintf_r+0x1e8>
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	4650      	mov	r0, sl
 8003ae8:	7821      	ldrb	r1, [r4, #0]
 8003aea:	f000 fda3 	bl	8004634 <memchr>
 8003aee:	b138      	cbz	r0, 8003b00 <_svfiprintf_r+0x150>
 8003af0:	2240      	movs	r2, #64	@ 0x40
 8003af2:	9b04      	ldr	r3, [sp, #16]
 8003af4:	eba0 000a 	sub.w	r0, r0, sl
 8003af8:	4082      	lsls	r2, r0
 8003afa:	4313      	orrs	r3, r2
 8003afc:	3401      	adds	r4, #1
 8003afe:	9304      	str	r3, [sp, #16]
 8003b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b04:	2206      	movs	r2, #6
 8003b06:	4825      	ldr	r0, [pc, #148]	@ (8003b9c <_svfiprintf_r+0x1ec>)
 8003b08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b0c:	f000 fd92 	bl	8004634 <memchr>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	d036      	beq.n	8003b82 <_svfiprintf_r+0x1d2>
 8003b14:	4b22      	ldr	r3, [pc, #136]	@ (8003ba0 <_svfiprintf_r+0x1f0>)
 8003b16:	bb1b      	cbnz	r3, 8003b60 <_svfiprintf_r+0x1b0>
 8003b18:	9b03      	ldr	r3, [sp, #12]
 8003b1a:	3307      	adds	r3, #7
 8003b1c:	f023 0307 	bic.w	r3, r3, #7
 8003b20:	3308      	adds	r3, #8
 8003b22:	9303      	str	r3, [sp, #12]
 8003b24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b26:	4433      	add	r3, r6
 8003b28:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b2a:	e76a      	b.n	8003a02 <_svfiprintf_r+0x52>
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	2001      	movs	r0, #1
 8003b30:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b34:	e7a8      	b.n	8003a88 <_svfiprintf_r+0xd8>
 8003b36:	2300      	movs	r3, #0
 8003b38:	f04f 0c0a 	mov.w	ip, #10
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	3401      	adds	r4, #1
 8003b40:	9305      	str	r3, [sp, #20]
 8003b42:	4620      	mov	r0, r4
 8003b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b48:	3a30      	subs	r2, #48	@ 0x30
 8003b4a:	2a09      	cmp	r2, #9
 8003b4c:	d903      	bls.n	8003b56 <_svfiprintf_r+0x1a6>
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0c6      	beq.n	8003ae0 <_svfiprintf_r+0x130>
 8003b52:	9105      	str	r1, [sp, #20]
 8003b54:	e7c4      	b.n	8003ae0 <_svfiprintf_r+0x130>
 8003b56:	4604      	mov	r4, r0
 8003b58:	2301      	movs	r3, #1
 8003b5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b5e:	e7f0      	b.n	8003b42 <_svfiprintf_r+0x192>
 8003b60:	ab03      	add	r3, sp, #12
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	462a      	mov	r2, r5
 8003b66:	4638      	mov	r0, r7
 8003b68:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba4 <_svfiprintf_r+0x1f4>)
 8003b6a:	a904      	add	r1, sp, #16
 8003b6c:	f3af 8000 	nop.w
 8003b70:	1c42      	adds	r2, r0, #1
 8003b72:	4606      	mov	r6, r0
 8003b74:	d1d6      	bne.n	8003b24 <_svfiprintf_r+0x174>
 8003b76:	89ab      	ldrh	r3, [r5, #12]
 8003b78:	065b      	lsls	r3, r3, #25
 8003b7a:	f53f af2d 	bmi.w	80039d8 <_svfiprintf_r+0x28>
 8003b7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b80:	e72c      	b.n	80039dc <_svfiprintf_r+0x2c>
 8003b82:	ab03      	add	r3, sp, #12
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	462a      	mov	r2, r5
 8003b88:	4638      	mov	r0, r7
 8003b8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ba4 <_svfiprintf_r+0x1f4>)
 8003b8c:	a904      	add	r1, sp, #16
 8003b8e:	f000 fa4b 	bl	8004028 <_printf_i>
 8003b92:	e7ed      	b.n	8003b70 <_svfiprintf_r+0x1c0>
 8003b94:	0800491a 	.word	0x0800491a
 8003b98:	08004920 	.word	0x08004920
 8003b9c:	08004924 	.word	0x08004924
 8003ba0:	00000000 	.word	0x00000000
 8003ba4:	080038f9 	.word	0x080038f9

08003ba8 <_sungetc_r>:
 8003ba8:	b538      	push	{r3, r4, r5, lr}
 8003baa:	1c4b      	adds	r3, r1, #1
 8003bac:	4614      	mov	r4, r2
 8003bae:	d103      	bne.n	8003bb8 <_sungetc_r+0x10>
 8003bb0:	f04f 35ff 	mov.w	r5, #4294967295
 8003bb4:	4628      	mov	r0, r5
 8003bb6:	bd38      	pop	{r3, r4, r5, pc}
 8003bb8:	8993      	ldrh	r3, [r2, #12]
 8003bba:	b2cd      	uxtb	r5, r1
 8003bbc:	f023 0320 	bic.w	r3, r3, #32
 8003bc0:	8193      	strh	r3, [r2, #12]
 8003bc2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003bc4:	6852      	ldr	r2, [r2, #4]
 8003bc6:	b18b      	cbz	r3, 8003bec <_sungetc_r+0x44>
 8003bc8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	dd08      	ble.n	8003be0 <_sungetc_r+0x38>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	1e5a      	subs	r2, r3, #1
 8003bd2:	6022      	str	r2, [r4, #0]
 8003bd4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003bd8:	6863      	ldr	r3, [r4, #4]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	6063      	str	r3, [r4, #4]
 8003bde:	e7e9      	b.n	8003bb4 <_sungetc_r+0xc>
 8003be0:	4621      	mov	r1, r4
 8003be2:	f000 fcc4 	bl	800456e <__submore>
 8003be6:	2800      	cmp	r0, #0
 8003be8:	d0f1      	beq.n	8003bce <_sungetc_r+0x26>
 8003bea:	e7e1      	b.n	8003bb0 <_sungetc_r+0x8>
 8003bec:	6921      	ldr	r1, [r4, #16]
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	b151      	cbz	r1, 8003c08 <_sungetc_r+0x60>
 8003bf2:	4299      	cmp	r1, r3
 8003bf4:	d208      	bcs.n	8003c08 <_sungetc_r+0x60>
 8003bf6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003bfa:	42a9      	cmp	r1, r5
 8003bfc:	d104      	bne.n	8003c08 <_sungetc_r+0x60>
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	3201      	adds	r2, #1
 8003c02:	6023      	str	r3, [r4, #0]
 8003c04:	6062      	str	r2, [r4, #4]
 8003c06:	e7d5      	b.n	8003bb4 <_sungetc_r+0xc>
 8003c08:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8003c0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c10:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c12:	2303      	movs	r3, #3
 8003c14:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003c16:	4623      	mov	r3, r4
 8003c18:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e7dc      	b.n	8003bdc <_sungetc_r+0x34>

08003c22 <__ssrefill_r>:
 8003c22:	b510      	push	{r4, lr}
 8003c24:	460c      	mov	r4, r1
 8003c26:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8003c28:	b169      	cbz	r1, 8003c46 <__ssrefill_r+0x24>
 8003c2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c2e:	4299      	cmp	r1, r3
 8003c30:	d001      	beq.n	8003c36 <__ssrefill_r+0x14>
 8003c32:	f7ff fd6b 	bl	800370c <_free_r>
 8003c36:	2000      	movs	r0, #0
 8003c38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c3a:	6360      	str	r0, [r4, #52]	@ 0x34
 8003c3c:	6063      	str	r3, [r4, #4]
 8003c3e:	b113      	cbz	r3, 8003c46 <__ssrefill_r+0x24>
 8003c40:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003c42:	6023      	str	r3, [r4, #0]
 8003c44:	bd10      	pop	{r4, pc}
 8003c46:	6923      	ldr	r3, [r4, #16]
 8003c48:	f04f 30ff 	mov.w	r0, #4294967295
 8003c4c:	6023      	str	r3, [r4, #0]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	6063      	str	r3, [r4, #4]
 8003c52:	89a3      	ldrh	r3, [r4, #12]
 8003c54:	f043 0320 	orr.w	r3, r3, #32
 8003c58:	81a3      	strh	r3, [r4, #12]
 8003c5a:	e7f3      	b.n	8003c44 <__ssrefill_r+0x22>

08003c5c <__ssvfiscanf_r>:
 8003c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c60:	460c      	mov	r4, r1
 8003c62:	2100      	movs	r1, #0
 8003c64:	4606      	mov	r6, r0
 8003c66:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8003c6a:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8003c6e:	49ab      	ldr	r1, [pc, #684]	@ (8003f1c <__ssvfiscanf_r+0x2c0>)
 8003c70:	f10d 0804 	add.w	r8, sp, #4
 8003c74:	91a0      	str	r1, [sp, #640]	@ 0x280
 8003c76:	49aa      	ldr	r1, [pc, #680]	@ (8003f20 <__ssvfiscanf_r+0x2c4>)
 8003c78:	4faa      	ldr	r7, [pc, #680]	@ (8003f24 <__ssvfiscanf_r+0x2c8>)
 8003c7a:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8003c7e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	f892 9000 	ldrb.w	r9, [r2]
 8003c86:	f1b9 0f00 	cmp.w	r9, #0
 8003c8a:	f000 8159 	beq.w	8003f40 <__ssvfiscanf_r+0x2e4>
 8003c8e:	f817 3009 	ldrb.w	r3, [r7, r9]
 8003c92:	1c55      	adds	r5, r2, #1
 8003c94:	f013 0308 	ands.w	r3, r3, #8
 8003c98:	d019      	beq.n	8003cce <__ssvfiscanf_r+0x72>
 8003c9a:	6863      	ldr	r3, [r4, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	dd0f      	ble.n	8003cc0 <__ssvfiscanf_r+0x64>
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	781a      	ldrb	r2, [r3, #0]
 8003ca4:	5cba      	ldrb	r2, [r7, r2]
 8003ca6:	0712      	lsls	r2, r2, #28
 8003ca8:	d401      	bmi.n	8003cae <__ssvfiscanf_r+0x52>
 8003caa:	462a      	mov	r2, r5
 8003cac:	e7e9      	b.n	8003c82 <__ssvfiscanf_r+0x26>
 8003cae:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	3201      	adds	r2, #1
 8003cb4:	9245      	str	r2, [sp, #276]	@ 0x114
 8003cb6:	6862      	ldr	r2, [r4, #4]
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	3a01      	subs	r2, #1
 8003cbc:	6062      	str	r2, [r4, #4]
 8003cbe:	e7ec      	b.n	8003c9a <__ssvfiscanf_r+0x3e>
 8003cc0:	4621      	mov	r1, r4
 8003cc2:	4630      	mov	r0, r6
 8003cc4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003cc6:	4798      	blx	r3
 8003cc8:	2800      	cmp	r0, #0
 8003cca:	d0e9      	beq.n	8003ca0 <__ssvfiscanf_r+0x44>
 8003ccc:	e7ed      	b.n	8003caa <__ssvfiscanf_r+0x4e>
 8003cce:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8003cd2:	f040 8086 	bne.w	8003de2 <__ssvfiscanf_r+0x186>
 8003cd6:	9341      	str	r3, [sp, #260]	@ 0x104
 8003cd8:	9343      	str	r3, [sp, #268]	@ 0x10c
 8003cda:	7853      	ldrb	r3, [r2, #1]
 8003cdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cde:	bf04      	itt	eq
 8003ce0:	2310      	moveq	r3, #16
 8003ce2:	1c95      	addeq	r5, r2, #2
 8003ce4:	f04f 020a 	mov.w	r2, #10
 8003ce8:	bf08      	it	eq
 8003cea:	9341      	streq	r3, [sp, #260]	@ 0x104
 8003cec:	46aa      	mov	sl, r5
 8003cee:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003cf2:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8003cf6:	2b09      	cmp	r3, #9
 8003cf8:	d91e      	bls.n	8003d38 <__ssvfiscanf_r+0xdc>
 8003cfa:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 8003f28 <__ssvfiscanf_r+0x2cc>
 8003cfe:	2203      	movs	r2, #3
 8003d00:	4658      	mov	r0, fp
 8003d02:	f000 fc97 	bl	8004634 <memchr>
 8003d06:	b138      	cbz	r0, 8003d18 <__ssvfiscanf_r+0xbc>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	4655      	mov	r5, sl
 8003d0c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003d0e:	eba0 000b 	sub.w	r0, r0, fp
 8003d12:	4083      	lsls	r3, r0
 8003d14:	4313      	orrs	r3, r2
 8003d16:	9341      	str	r3, [sp, #260]	@ 0x104
 8003d18:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d1c:	2b78      	cmp	r3, #120	@ 0x78
 8003d1e:	d806      	bhi.n	8003d2e <__ssvfiscanf_r+0xd2>
 8003d20:	2b57      	cmp	r3, #87	@ 0x57
 8003d22:	d810      	bhi.n	8003d46 <__ssvfiscanf_r+0xea>
 8003d24:	2b25      	cmp	r3, #37	@ 0x25
 8003d26:	d05c      	beq.n	8003de2 <__ssvfiscanf_r+0x186>
 8003d28:	d856      	bhi.n	8003dd8 <__ssvfiscanf_r+0x17c>
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d074      	beq.n	8003e18 <__ssvfiscanf_r+0x1bc>
 8003d2e:	2303      	movs	r3, #3
 8003d30:	9347      	str	r3, [sp, #284]	@ 0x11c
 8003d32:	230a      	movs	r3, #10
 8003d34:	9342      	str	r3, [sp, #264]	@ 0x108
 8003d36:	e087      	b.n	8003e48 <__ssvfiscanf_r+0x1ec>
 8003d38:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8003d3a:	4655      	mov	r5, sl
 8003d3c:	fb02 1103 	mla	r1, r2, r3, r1
 8003d40:	3930      	subs	r1, #48	@ 0x30
 8003d42:	9143      	str	r1, [sp, #268]	@ 0x10c
 8003d44:	e7d2      	b.n	8003cec <__ssvfiscanf_r+0x90>
 8003d46:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8003d4a:	2a20      	cmp	r2, #32
 8003d4c:	d8ef      	bhi.n	8003d2e <__ssvfiscanf_r+0xd2>
 8003d4e:	a101      	add	r1, pc, #4	@ (adr r1, 8003d54 <__ssvfiscanf_r+0xf8>)
 8003d50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003d54:	08003e27 	.word	0x08003e27
 8003d58:	08003d2f 	.word	0x08003d2f
 8003d5c:	08003d2f 	.word	0x08003d2f
 8003d60:	08003e81 	.word	0x08003e81
 8003d64:	08003d2f 	.word	0x08003d2f
 8003d68:	08003d2f 	.word	0x08003d2f
 8003d6c:	08003d2f 	.word	0x08003d2f
 8003d70:	08003d2f 	.word	0x08003d2f
 8003d74:	08003d2f 	.word	0x08003d2f
 8003d78:	08003d2f 	.word	0x08003d2f
 8003d7c:	08003d2f 	.word	0x08003d2f
 8003d80:	08003e97 	.word	0x08003e97
 8003d84:	08003e7d 	.word	0x08003e7d
 8003d88:	08003ddf 	.word	0x08003ddf
 8003d8c:	08003ddf 	.word	0x08003ddf
 8003d90:	08003ddf 	.word	0x08003ddf
 8003d94:	08003d2f 	.word	0x08003d2f
 8003d98:	08003e39 	.word	0x08003e39
 8003d9c:	08003d2f 	.word	0x08003d2f
 8003da0:	08003d2f 	.word	0x08003d2f
 8003da4:	08003d2f 	.word	0x08003d2f
 8003da8:	08003d2f 	.word	0x08003d2f
 8003dac:	08003ea7 	.word	0x08003ea7
 8003db0:	08003e41 	.word	0x08003e41
 8003db4:	08003e1f 	.word	0x08003e1f
 8003db8:	08003d2f 	.word	0x08003d2f
 8003dbc:	08003d2f 	.word	0x08003d2f
 8003dc0:	08003ea3 	.word	0x08003ea3
 8003dc4:	08003d2f 	.word	0x08003d2f
 8003dc8:	08003e7d 	.word	0x08003e7d
 8003dcc:	08003d2f 	.word	0x08003d2f
 8003dd0:	08003d2f 	.word	0x08003d2f
 8003dd4:	08003e27 	.word	0x08003e27
 8003dd8:	3b45      	subs	r3, #69	@ 0x45
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d8a7      	bhi.n	8003d2e <__ssvfiscanf_r+0xd2>
 8003dde:	2305      	movs	r3, #5
 8003de0:	e031      	b.n	8003e46 <__ssvfiscanf_r+0x1ea>
 8003de2:	6863      	ldr	r3, [r4, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	dd0d      	ble.n	8003e04 <__ssvfiscanf_r+0x1a8>
 8003de8:	6823      	ldr	r3, [r4, #0]
 8003dea:	781a      	ldrb	r2, [r3, #0]
 8003dec:	454a      	cmp	r2, r9
 8003dee:	f040 80a7 	bne.w	8003f40 <__ssvfiscanf_r+0x2e4>
 8003df2:	3301      	adds	r3, #1
 8003df4:	6862      	ldr	r2, [r4, #4]
 8003df6:	6023      	str	r3, [r4, #0]
 8003df8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8003dfa:	3a01      	subs	r2, #1
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	6062      	str	r2, [r4, #4]
 8003e00:	9345      	str	r3, [sp, #276]	@ 0x114
 8003e02:	e752      	b.n	8003caa <__ssvfiscanf_r+0x4e>
 8003e04:	4621      	mov	r1, r4
 8003e06:	4630      	mov	r0, r6
 8003e08:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003e0a:	4798      	blx	r3
 8003e0c:	2800      	cmp	r0, #0
 8003e0e:	d0eb      	beq.n	8003de8 <__ssvfiscanf_r+0x18c>
 8003e10:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8003e12:	2800      	cmp	r0, #0
 8003e14:	f040 808c 	bne.w	8003f30 <__ssvfiscanf_r+0x2d4>
 8003e18:	f04f 30ff 	mov.w	r0, #4294967295
 8003e1c:	e08c      	b.n	8003f38 <__ssvfiscanf_r+0x2dc>
 8003e1e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003e20:	f042 0220 	orr.w	r2, r2, #32
 8003e24:	9241      	str	r2, [sp, #260]	@ 0x104
 8003e26:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003e28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e2c:	9241      	str	r2, [sp, #260]	@ 0x104
 8003e2e:	2210      	movs	r2, #16
 8003e30:	2b6e      	cmp	r3, #110	@ 0x6e
 8003e32:	9242      	str	r2, [sp, #264]	@ 0x108
 8003e34:	d902      	bls.n	8003e3c <__ssvfiscanf_r+0x1e0>
 8003e36:	e005      	b.n	8003e44 <__ssvfiscanf_r+0x1e8>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	9342      	str	r3, [sp, #264]	@ 0x108
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e002      	b.n	8003e46 <__ssvfiscanf_r+0x1ea>
 8003e40:	2308      	movs	r3, #8
 8003e42:	9342      	str	r3, [sp, #264]	@ 0x108
 8003e44:	2304      	movs	r3, #4
 8003e46:	9347      	str	r3, [sp, #284]	@ 0x11c
 8003e48:	6863      	ldr	r3, [r4, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	dd39      	ble.n	8003ec2 <__ssvfiscanf_r+0x266>
 8003e4e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003e50:	0659      	lsls	r1, r3, #25
 8003e52:	d404      	bmi.n	8003e5e <__ssvfiscanf_r+0x202>
 8003e54:	6823      	ldr	r3, [r4, #0]
 8003e56:	781a      	ldrb	r2, [r3, #0]
 8003e58:	5cba      	ldrb	r2, [r7, r2]
 8003e5a:	0712      	lsls	r2, r2, #28
 8003e5c:	d438      	bmi.n	8003ed0 <__ssvfiscanf_r+0x274>
 8003e5e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	dc47      	bgt.n	8003ef4 <__ssvfiscanf_r+0x298>
 8003e64:	466b      	mov	r3, sp
 8003e66:	4622      	mov	r2, r4
 8003e68:	4630      	mov	r0, r6
 8003e6a:	a941      	add	r1, sp, #260	@ 0x104
 8003e6c:	f000 f9fa 	bl	8004264 <_scanf_chars>
 8003e70:	2801      	cmp	r0, #1
 8003e72:	d065      	beq.n	8003f40 <__ssvfiscanf_r+0x2e4>
 8003e74:	2802      	cmp	r0, #2
 8003e76:	f47f af18 	bne.w	8003caa <__ssvfiscanf_r+0x4e>
 8003e7a:	e7c9      	b.n	8003e10 <__ssvfiscanf_r+0x1b4>
 8003e7c:	220a      	movs	r2, #10
 8003e7e:	e7d7      	b.n	8003e30 <__ssvfiscanf_r+0x1d4>
 8003e80:	4629      	mov	r1, r5
 8003e82:	4640      	mov	r0, r8
 8003e84:	f000 fb3a 	bl	80044fc <__sccl>
 8003e88:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003e8a:	4605      	mov	r5, r0
 8003e8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e90:	9341      	str	r3, [sp, #260]	@ 0x104
 8003e92:	2301      	movs	r3, #1
 8003e94:	e7d7      	b.n	8003e46 <__ssvfiscanf_r+0x1ea>
 8003e96:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003e98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e9c:	9341      	str	r3, [sp, #260]	@ 0x104
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	e7d1      	b.n	8003e46 <__ssvfiscanf_r+0x1ea>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e7cf      	b.n	8003e46 <__ssvfiscanf_r+0x1ea>
 8003ea6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8003ea8:	06c3      	lsls	r3, r0, #27
 8003eaa:	f53f aefe 	bmi.w	8003caa <__ssvfiscanf_r+0x4e>
 8003eae:	9b00      	ldr	r3, [sp, #0]
 8003eb0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003eb2:	1d19      	adds	r1, r3, #4
 8003eb4:	9100      	str	r1, [sp, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	07c0      	lsls	r0, r0, #31
 8003eba:	bf4c      	ite	mi
 8003ebc:	801a      	strhmi	r2, [r3, #0]
 8003ebe:	601a      	strpl	r2, [r3, #0]
 8003ec0:	e6f3      	b.n	8003caa <__ssvfiscanf_r+0x4e>
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003ec8:	4798      	blx	r3
 8003eca:	2800      	cmp	r0, #0
 8003ecc:	d0bf      	beq.n	8003e4e <__ssvfiscanf_r+0x1f2>
 8003ece:	e79f      	b.n	8003e10 <__ssvfiscanf_r+0x1b4>
 8003ed0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003ed2:	3201      	adds	r2, #1
 8003ed4:	9245      	str	r2, [sp, #276]	@ 0x114
 8003ed6:	6862      	ldr	r2, [r4, #4]
 8003ed8:	3a01      	subs	r2, #1
 8003eda:	2a00      	cmp	r2, #0
 8003edc:	6062      	str	r2, [r4, #4]
 8003ede:	dd02      	ble.n	8003ee6 <__ssvfiscanf_r+0x28a>
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	6023      	str	r3, [r4, #0]
 8003ee4:	e7b6      	b.n	8003e54 <__ssvfiscanf_r+0x1f8>
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	4630      	mov	r0, r6
 8003eea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003eec:	4798      	blx	r3
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	d0b0      	beq.n	8003e54 <__ssvfiscanf_r+0x1f8>
 8003ef2:	e78d      	b.n	8003e10 <__ssvfiscanf_r+0x1b4>
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	dc06      	bgt.n	8003f06 <__ssvfiscanf_r+0x2aa>
 8003ef8:	466b      	mov	r3, sp
 8003efa:	4622      	mov	r2, r4
 8003efc:	4630      	mov	r0, r6
 8003efe:	a941      	add	r1, sp, #260	@ 0x104
 8003f00:	f000 fa0a 	bl	8004318 <_scanf_i>
 8003f04:	e7b4      	b.n	8003e70 <__ssvfiscanf_r+0x214>
 8003f06:	4b09      	ldr	r3, [pc, #36]	@ (8003f2c <__ssvfiscanf_r+0x2d0>)
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f43f aece 	beq.w	8003caa <__ssvfiscanf_r+0x4e>
 8003f0e:	466b      	mov	r3, sp
 8003f10:	4622      	mov	r2, r4
 8003f12:	4630      	mov	r0, r6
 8003f14:	a941      	add	r1, sp, #260	@ 0x104
 8003f16:	f3af 8000 	nop.w
 8003f1a:	e7a9      	b.n	8003e70 <__ssvfiscanf_r+0x214>
 8003f1c:	08003ba9 	.word	0x08003ba9
 8003f20:	08003c23 	.word	0x08003c23
 8003f24:	08004969 	.word	0x08004969
 8003f28:	08004920 	.word	0x08004920
 8003f2c:	00000000 	.word	0x00000000
 8003f30:	89a3      	ldrh	r3, [r4, #12]
 8003f32:	065b      	lsls	r3, r3, #25
 8003f34:	f53f af70 	bmi.w	8003e18 <__ssvfiscanf_r+0x1bc>
 8003f38:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8003f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f40:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8003f42:	e7f9      	b.n	8003f38 <__ssvfiscanf_r+0x2dc>

08003f44 <_printf_common>:
 8003f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f48:	4616      	mov	r6, r2
 8003f4a:	4698      	mov	r8, r3
 8003f4c:	688a      	ldr	r2, [r1, #8]
 8003f4e:	690b      	ldr	r3, [r1, #16]
 8003f50:	4607      	mov	r7, r0
 8003f52:	4293      	cmp	r3, r2
 8003f54:	bfb8      	it	lt
 8003f56:	4613      	movlt	r3, r2
 8003f58:	6033      	str	r3, [r6, #0]
 8003f5a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f5e:	460c      	mov	r4, r1
 8003f60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f64:	b10a      	cbz	r2, 8003f6a <_printf_common+0x26>
 8003f66:	3301      	adds	r3, #1
 8003f68:	6033      	str	r3, [r6, #0]
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	0699      	lsls	r1, r3, #26
 8003f6e:	bf42      	ittt	mi
 8003f70:	6833      	ldrmi	r3, [r6, #0]
 8003f72:	3302      	addmi	r3, #2
 8003f74:	6033      	strmi	r3, [r6, #0]
 8003f76:	6825      	ldr	r5, [r4, #0]
 8003f78:	f015 0506 	ands.w	r5, r5, #6
 8003f7c:	d106      	bne.n	8003f8c <_printf_common+0x48>
 8003f7e:	f104 0a19 	add.w	sl, r4, #25
 8003f82:	68e3      	ldr	r3, [r4, #12]
 8003f84:	6832      	ldr	r2, [r6, #0]
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	42ab      	cmp	r3, r5
 8003f8a:	dc2b      	bgt.n	8003fe4 <_printf_common+0xa0>
 8003f8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f90:	6822      	ldr	r2, [r4, #0]
 8003f92:	3b00      	subs	r3, #0
 8003f94:	bf18      	it	ne
 8003f96:	2301      	movne	r3, #1
 8003f98:	0692      	lsls	r2, r2, #26
 8003f9a:	d430      	bmi.n	8003ffe <_printf_common+0xba>
 8003f9c:	4641      	mov	r1, r8
 8003f9e:	4638      	mov	r0, r7
 8003fa0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003fa4:	47c8      	blx	r9
 8003fa6:	3001      	adds	r0, #1
 8003fa8:	d023      	beq.n	8003ff2 <_printf_common+0xae>
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	6922      	ldr	r2, [r4, #16]
 8003fae:	f003 0306 	and.w	r3, r3, #6
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	bf14      	ite	ne
 8003fb6:	2500      	movne	r5, #0
 8003fb8:	6833      	ldreq	r3, [r6, #0]
 8003fba:	f04f 0600 	mov.w	r6, #0
 8003fbe:	bf08      	it	eq
 8003fc0:	68e5      	ldreq	r5, [r4, #12]
 8003fc2:	f104 041a 	add.w	r4, r4, #26
 8003fc6:	bf08      	it	eq
 8003fc8:	1aed      	subeq	r5, r5, r3
 8003fca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003fce:	bf08      	it	eq
 8003fd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	bfc4      	itt	gt
 8003fd8:	1a9b      	subgt	r3, r3, r2
 8003fda:	18ed      	addgt	r5, r5, r3
 8003fdc:	42b5      	cmp	r5, r6
 8003fde:	d11a      	bne.n	8004016 <_printf_common+0xd2>
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	e008      	b.n	8003ff6 <_printf_common+0xb2>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	4652      	mov	r2, sl
 8003fe8:	4641      	mov	r1, r8
 8003fea:	4638      	mov	r0, r7
 8003fec:	47c8      	blx	r9
 8003fee:	3001      	adds	r0, #1
 8003ff0:	d103      	bne.n	8003ffa <_printf_common+0xb6>
 8003ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ffa:	3501      	adds	r5, #1
 8003ffc:	e7c1      	b.n	8003f82 <_printf_common+0x3e>
 8003ffe:	2030      	movs	r0, #48	@ 0x30
 8004000:	18e1      	adds	r1, r4, r3
 8004002:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800400c:	4422      	add	r2, r4
 800400e:	3302      	adds	r3, #2
 8004010:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004014:	e7c2      	b.n	8003f9c <_printf_common+0x58>
 8004016:	2301      	movs	r3, #1
 8004018:	4622      	mov	r2, r4
 800401a:	4641      	mov	r1, r8
 800401c:	4638      	mov	r0, r7
 800401e:	47c8      	blx	r9
 8004020:	3001      	adds	r0, #1
 8004022:	d0e6      	beq.n	8003ff2 <_printf_common+0xae>
 8004024:	3601      	adds	r6, #1
 8004026:	e7d9      	b.n	8003fdc <_printf_common+0x98>

08004028 <_printf_i>:
 8004028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800402c:	7e0f      	ldrb	r7, [r1, #24]
 800402e:	4691      	mov	r9, r2
 8004030:	2f78      	cmp	r7, #120	@ 0x78
 8004032:	4680      	mov	r8, r0
 8004034:	460c      	mov	r4, r1
 8004036:	469a      	mov	sl, r3
 8004038:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800403a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800403e:	d807      	bhi.n	8004050 <_printf_i+0x28>
 8004040:	2f62      	cmp	r7, #98	@ 0x62
 8004042:	d80a      	bhi.n	800405a <_printf_i+0x32>
 8004044:	2f00      	cmp	r7, #0
 8004046:	f000 80d1 	beq.w	80041ec <_printf_i+0x1c4>
 800404a:	2f58      	cmp	r7, #88	@ 0x58
 800404c:	f000 80b8 	beq.w	80041c0 <_printf_i+0x198>
 8004050:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004054:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004058:	e03a      	b.n	80040d0 <_printf_i+0xa8>
 800405a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800405e:	2b15      	cmp	r3, #21
 8004060:	d8f6      	bhi.n	8004050 <_printf_i+0x28>
 8004062:	a101      	add	r1, pc, #4	@ (adr r1, 8004068 <_printf_i+0x40>)
 8004064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004068:	080040c1 	.word	0x080040c1
 800406c:	080040d5 	.word	0x080040d5
 8004070:	08004051 	.word	0x08004051
 8004074:	08004051 	.word	0x08004051
 8004078:	08004051 	.word	0x08004051
 800407c:	08004051 	.word	0x08004051
 8004080:	080040d5 	.word	0x080040d5
 8004084:	08004051 	.word	0x08004051
 8004088:	08004051 	.word	0x08004051
 800408c:	08004051 	.word	0x08004051
 8004090:	08004051 	.word	0x08004051
 8004094:	080041d3 	.word	0x080041d3
 8004098:	080040ff 	.word	0x080040ff
 800409c:	0800418d 	.word	0x0800418d
 80040a0:	08004051 	.word	0x08004051
 80040a4:	08004051 	.word	0x08004051
 80040a8:	080041f5 	.word	0x080041f5
 80040ac:	08004051 	.word	0x08004051
 80040b0:	080040ff 	.word	0x080040ff
 80040b4:	08004051 	.word	0x08004051
 80040b8:	08004051 	.word	0x08004051
 80040bc:	08004195 	.word	0x08004195
 80040c0:	6833      	ldr	r3, [r6, #0]
 80040c2:	1d1a      	adds	r2, r3, #4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6032      	str	r2, [r6, #0]
 80040c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80040d0:	2301      	movs	r3, #1
 80040d2:	e09c      	b.n	800420e <_printf_i+0x1e6>
 80040d4:	6833      	ldr	r3, [r6, #0]
 80040d6:	6820      	ldr	r0, [r4, #0]
 80040d8:	1d19      	adds	r1, r3, #4
 80040da:	6031      	str	r1, [r6, #0]
 80040dc:	0606      	lsls	r6, r0, #24
 80040de:	d501      	bpl.n	80040e4 <_printf_i+0xbc>
 80040e0:	681d      	ldr	r5, [r3, #0]
 80040e2:	e003      	b.n	80040ec <_printf_i+0xc4>
 80040e4:	0645      	lsls	r5, r0, #25
 80040e6:	d5fb      	bpl.n	80040e0 <_printf_i+0xb8>
 80040e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80040ec:	2d00      	cmp	r5, #0
 80040ee:	da03      	bge.n	80040f8 <_printf_i+0xd0>
 80040f0:	232d      	movs	r3, #45	@ 0x2d
 80040f2:	426d      	negs	r5, r5
 80040f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040f8:	230a      	movs	r3, #10
 80040fa:	4858      	ldr	r0, [pc, #352]	@ (800425c <_printf_i+0x234>)
 80040fc:	e011      	b.n	8004122 <_printf_i+0xfa>
 80040fe:	6821      	ldr	r1, [r4, #0]
 8004100:	6833      	ldr	r3, [r6, #0]
 8004102:	0608      	lsls	r0, r1, #24
 8004104:	f853 5b04 	ldr.w	r5, [r3], #4
 8004108:	d402      	bmi.n	8004110 <_printf_i+0xe8>
 800410a:	0649      	lsls	r1, r1, #25
 800410c:	bf48      	it	mi
 800410e:	b2ad      	uxthmi	r5, r5
 8004110:	2f6f      	cmp	r7, #111	@ 0x6f
 8004112:	6033      	str	r3, [r6, #0]
 8004114:	bf14      	ite	ne
 8004116:	230a      	movne	r3, #10
 8004118:	2308      	moveq	r3, #8
 800411a:	4850      	ldr	r0, [pc, #320]	@ (800425c <_printf_i+0x234>)
 800411c:	2100      	movs	r1, #0
 800411e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004122:	6866      	ldr	r6, [r4, #4]
 8004124:	2e00      	cmp	r6, #0
 8004126:	60a6      	str	r6, [r4, #8]
 8004128:	db05      	blt.n	8004136 <_printf_i+0x10e>
 800412a:	6821      	ldr	r1, [r4, #0]
 800412c:	432e      	orrs	r6, r5
 800412e:	f021 0104 	bic.w	r1, r1, #4
 8004132:	6021      	str	r1, [r4, #0]
 8004134:	d04b      	beq.n	80041ce <_printf_i+0x1a6>
 8004136:	4616      	mov	r6, r2
 8004138:	fbb5 f1f3 	udiv	r1, r5, r3
 800413c:	fb03 5711 	mls	r7, r3, r1, r5
 8004140:	5dc7      	ldrb	r7, [r0, r7]
 8004142:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004146:	462f      	mov	r7, r5
 8004148:	42bb      	cmp	r3, r7
 800414a:	460d      	mov	r5, r1
 800414c:	d9f4      	bls.n	8004138 <_printf_i+0x110>
 800414e:	2b08      	cmp	r3, #8
 8004150:	d10b      	bne.n	800416a <_printf_i+0x142>
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	07df      	lsls	r7, r3, #31
 8004156:	d508      	bpl.n	800416a <_printf_i+0x142>
 8004158:	6923      	ldr	r3, [r4, #16]
 800415a:	6861      	ldr	r1, [r4, #4]
 800415c:	4299      	cmp	r1, r3
 800415e:	bfde      	ittt	le
 8004160:	2330      	movle	r3, #48	@ 0x30
 8004162:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004166:	f106 36ff 	addle.w	r6, r6, #4294967295
 800416a:	1b92      	subs	r2, r2, r6
 800416c:	6122      	str	r2, [r4, #16]
 800416e:	464b      	mov	r3, r9
 8004170:	4621      	mov	r1, r4
 8004172:	4640      	mov	r0, r8
 8004174:	f8cd a000 	str.w	sl, [sp]
 8004178:	aa03      	add	r2, sp, #12
 800417a:	f7ff fee3 	bl	8003f44 <_printf_common>
 800417e:	3001      	adds	r0, #1
 8004180:	d14a      	bne.n	8004218 <_printf_i+0x1f0>
 8004182:	f04f 30ff 	mov.w	r0, #4294967295
 8004186:	b004      	add	sp, #16
 8004188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	f043 0320 	orr.w	r3, r3, #32
 8004192:	6023      	str	r3, [r4, #0]
 8004194:	2778      	movs	r7, #120	@ 0x78
 8004196:	4832      	ldr	r0, [pc, #200]	@ (8004260 <_printf_i+0x238>)
 8004198:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	6831      	ldr	r1, [r6, #0]
 80041a0:	061f      	lsls	r7, r3, #24
 80041a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80041a6:	d402      	bmi.n	80041ae <_printf_i+0x186>
 80041a8:	065f      	lsls	r7, r3, #25
 80041aa:	bf48      	it	mi
 80041ac:	b2ad      	uxthmi	r5, r5
 80041ae:	6031      	str	r1, [r6, #0]
 80041b0:	07d9      	lsls	r1, r3, #31
 80041b2:	bf44      	itt	mi
 80041b4:	f043 0320 	orrmi.w	r3, r3, #32
 80041b8:	6023      	strmi	r3, [r4, #0]
 80041ba:	b11d      	cbz	r5, 80041c4 <_printf_i+0x19c>
 80041bc:	2310      	movs	r3, #16
 80041be:	e7ad      	b.n	800411c <_printf_i+0xf4>
 80041c0:	4826      	ldr	r0, [pc, #152]	@ (800425c <_printf_i+0x234>)
 80041c2:	e7e9      	b.n	8004198 <_printf_i+0x170>
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	f023 0320 	bic.w	r3, r3, #32
 80041ca:	6023      	str	r3, [r4, #0]
 80041cc:	e7f6      	b.n	80041bc <_printf_i+0x194>
 80041ce:	4616      	mov	r6, r2
 80041d0:	e7bd      	b.n	800414e <_printf_i+0x126>
 80041d2:	6833      	ldr	r3, [r6, #0]
 80041d4:	6825      	ldr	r5, [r4, #0]
 80041d6:	1d18      	adds	r0, r3, #4
 80041d8:	6961      	ldr	r1, [r4, #20]
 80041da:	6030      	str	r0, [r6, #0]
 80041dc:	062e      	lsls	r6, r5, #24
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	d501      	bpl.n	80041e6 <_printf_i+0x1be>
 80041e2:	6019      	str	r1, [r3, #0]
 80041e4:	e002      	b.n	80041ec <_printf_i+0x1c4>
 80041e6:	0668      	lsls	r0, r5, #25
 80041e8:	d5fb      	bpl.n	80041e2 <_printf_i+0x1ba>
 80041ea:	8019      	strh	r1, [r3, #0]
 80041ec:	2300      	movs	r3, #0
 80041ee:	4616      	mov	r6, r2
 80041f0:	6123      	str	r3, [r4, #16]
 80041f2:	e7bc      	b.n	800416e <_printf_i+0x146>
 80041f4:	6833      	ldr	r3, [r6, #0]
 80041f6:	2100      	movs	r1, #0
 80041f8:	1d1a      	adds	r2, r3, #4
 80041fa:	6032      	str	r2, [r6, #0]
 80041fc:	681e      	ldr	r6, [r3, #0]
 80041fe:	6862      	ldr	r2, [r4, #4]
 8004200:	4630      	mov	r0, r6
 8004202:	f000 fa17 	bl	8004634 <memchr>
 8004206:	b108      	cbz	r0, 800420c <_printf_i+0x1e4>
 8004208:	1b80      	subs	r0, r0, r6
 800420a:	6060      	str	r0, [r4, #4]
 800420c:	6863      	ldr	r3, [r4, #4]
 800420e:	6123      	str	r3, [r4, #16]
 8004210:	2300      	movs	r3, #0
 8004212:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004216:	e7aa      	b.n	800416e <_printf_i+0x146>
 8004218:	4632      	mov	r2, r6
 800421a:	4649      	mov	r1, r9
 800421c:	4640      	mov	r0, r8
 800421e:	6923      	ldr	r3, [r4, #16]
 8004220:	47d0      	blx	sl
 8004222:	3001      	adds	r0, #1
 8004224:	d0ad      	beq.n	8004182 <_printf_i+0x15a>
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	079b      	lsls	r3, r3, #30
 800422a:	d413      	bmi.n	8004254 <_printf_i+0x22c>
 800422c:	68e0      	ldr	r0, [r4, #12]
 800422e:	9b03      	ldr	r3, [sp, #12]
 8004230:	4298      	cmp	r0, r3
 8004232:	bfb8      	it	lt
 8004234:	4618      	movlt	r0, r3
 8004236:	e7a6      	b.n	8004186 <_printf_i+0x15e>
 8004238:	2301      	movs	r3, #1
 800423a:	4632      	mov	r2, r6
 800423c:	4649      	mov	r1, r9
 800423e:	4640      	mov	r0, r8
 8004240:	47d0      	blx	sl
 8004242:	3001      	adds	r0, #1
 8004244:	d09d      	beq.n	8004182 <_printf_i+0x15a>
 8004246:	3501      	adds	r5, #1
 8004248:	68e3      	ldr	r3, [r4, #12]
 800424a:	9903      	ldr	r1, [sp, #12]
 800424c:	1a5b      	subs	r3, r3, r1
 800424e:	42ab      	cmp	r3, r5
 8004250:	dcf2      	bgt.n	8004238 <_printf_i+0x210>
 8004252:	e7eb      	b.n	800422c <_printf_i+0x204>
 8004254:	2500      	movs	r5, #0
 8004256:	f104 0619 	add.w	r6, r4, #25
 800425a:	e7f5      	b.n	8004248 <_printf_i+0x220>
 800425c:	0800492b 	.word	0x0800492b
 8004260:	0800493c 	.word	0x0800493c

08004264 <_scanf_chars>:
 8004264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004268:	4615      	mov	r5, r2
 800426a:	688a      	ldr	r2, [r1, #8]
 800426c:	4680      	mov	r8, r0
 800426e:	460c      	mov	r4, r1
 8004270:	b932      	cbnz	r2, 8004280 <_scanf_chars+0x1c>
 8004272:	698a      	ldr	r2, [r1, #24]
 8004274:	2a00      	cmp	r2, #0
 8004276:	bf14      	ite	ne
 8004278:	f04f 32ff 	movne.w	r2, #4294967295
 800427c:	2201      	moveq	r2, #1
 800427e:	608a      	str	r2, [r1, #8]
 8004280:	2700      	movs	r7, #0
 8004282:	6822      	ldr	r2, [r4, #0]
 8004284:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8004314 <_scanf_chars+0xb0>
 8004288:	06d1      	lsls	r1, r2, #27
 800428a:	bf5f      	itttt	pl
 800428c:	681a      	ldrpl	r2, [r3, #0]
 800428e:	1d11      	addpl	r1, r2, #4
 8004290:	6019      	strpl	r1, [r3, #0]
 8004292:	6816      	ldrpl	r6, [r2, #0]
 8004294:	69a0      	ldr	r0, [r4, #24]
 8004296:	b188      	cbz	r0, 80042bc <_scanf_chars+0x58>
 8004298:	2801      	cmp	r0, #1
 800429a:	d107      	bne.n	80042ac <_scanf_chars+0x48>
 800429c:	682b      	ldr	r3, [r5, #0]
 800429e:	781a      	ldrb	r2, [r3, #0]
 80042a0:	6963      	ldr	r3, [r4, #20]
 80042a2:	5c9b      	ldrb	r3, [r3, r2]
 80042a4:	b953      	cbnz	r3, 80042bc <_scanf_chars+0x58>
 80042a6:	2f00      	cmp	r7, #0
 80042a8:	d031      	beq.n	800430e <_scanf_chars+0xaa>
 80042aa:	e022      	b.n	80042f2 <_scanf_chars+0x8e>
 80042ac:	2802      	cmp	r0, #2
 80042ae:	d120      	bne.n	80042f2 <_scanf_chars+0x8e>
 80042b0:	682b      	ldr	r3, [r5, #0]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80042b8:	071b      	lsls	r3, r3, #28
 80042ba:	d41a      	bmi.n	80042f2 <_scanf_chars+0x8e>
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	3701      	adds	r7, #1
 80042c0:	06da      	lsls	r2, r3, #27
 80042c2:	bf5e      	ittt	pl
 80042c4:	682b      	ldrpl	r3, [r5, #0]
 80042c6:	781b      	ldrbpl	r3, [r3, #0]
 80042c8:	f806 3b01 	strbpl.w	r3, [r6], #1
 80042cc:	682a      	ldr	r2, [r5, #0]
 80042ce:	686b      	ldr	r3, [r5, #4]
 80042d0:	3201      	adds	r2, #1
 80042d2:	602a      	str	r2, [r5, #0]
 80042d4:	68a2      	ldr	r2, [r4, #8]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	3a01      	subs	r2, #1
 80042da:	606b      	str	r3, [r5, #4]
 80042dc:	60a2      	str	r2, [r4, #8]
 80042de:	b142      	cbz	r2, 80042f2 <_scanf_chars+0x8e>
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	dcd7      	bgt.n	8004294 <_scanf_chars+0x30>
 80042e4:	4629      	mov	r1, r5
 80042e6:	4640      	mov	r0, r8
 80042e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80042ec:	4798      	blx	r3
 80042ee:	2800      	cmp	r0, #0
 80042f0:	d0d0      	beq.n	8004294 <_scanf_chars+0x30>
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	f013 0310 	ands.w	r3, r3, #16
 80042f8:	d105      	bne.n	8004306 <_scanf_chars+0xa2>
 80042fa:	68e2      	ldr	r2, [r4, #12]
 80042fc:	3201      	adds	r2, #1
 80042fe:	60e2      	str	r2, [r4, #12]
 8004300:	69a2      	ldr	r2, [r4, #24]
 8004302:	b102      	cbz	r2, 8004306 <_scanf_chars+0xa2>
 8004304:	7033      	strb	r3, [r6, #0]
 8004306:	2000      	movs	r0, #0
 8004308:	6923      	ldr	r3, [r4, #16]
 800430a:	443b      	add	r3, r7
 800430c:	6123      	str	r3, [r4, #16]
 800430e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004312:	bf00      	nop
 8004314:	08004969 	.word	0x08004969

08004318 <_scanf_i>:
 8004318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800431c:	460c      	mov	r4, r1
 800431e:	4698      	mov	r8, r3
 8004320:	4b72      	ldr	r3, [pc, #456]	@ (80044ec <_scanf_i+0x1d4>)
 8004322:	b087      	sub	sp, #28
 8004324:	4682      	mov	sl, r0
 8004326:	4616      	mov	r6, r2
 8004328:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800432c:	ab03      	add	r3, sp, #12
 800432e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004332:	4b6f      	ldr	r3, [pc, #444]	@ (80044f0 <_scanf_i+0x1d8>)
 8004334:	69a1      	ldr	r1, [r4, #24]
 8004336:	4a6f      	ldr	r2, [pc, #444]	@ (80044f4 <_scanf_i+0x1dc>)
 8004338:	4627      	mov	r7, r4
 800433a:	2903      	cmp	r1, #3
 800433c:	bf08      	it	eq
 800433e:	461a      	moveq	r2, r3
 8004340:	68a3      	ldr	r3, [r4, #8]
 8004342:	9201      	str	r2, [sp, #4]
 8004344:	1e5a      	subs	r2, r3, #1
 8004346:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800434a:	bf81      	itttt	hi
 800434c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004350:	eb03 0905 	addhi.w	r9, r3, r5
 8004354:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004358:	60a3      	strhi	r3, [r4, #8]
 800435a:	f857 3b1c 	ldr.w	r3, [r7], #28
 800435e:	bf98      	it	ls
 8004360:	f04f 0900 	movls.w	r9, #0
 8004364:	463d      	mov	r5, r7
 8004366:	f04f 0b00 	mov.w	fp, #0
 800436a:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800436e:	6023      	str	r3, [r4, #0]
 8004370:	6831      	ldr	r1, [r6, #0]
 8004372:	ab03      	add	r3, sp, #12
 8004374:	2202      	movs	r2, #2
 8004376:	7809      	ldrb	r1, [r1, #0]
 8004378:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800437c:	f000 f95a 	bl	8004634 <memchr>
 8004380:	b328      	cbz	r0, 80043ce <_scanf_i+0xb6>
 8004382:	f1bb 0f01 	cmp.w	fp, #1
 8004386:	d159      	bne.n	800443c <_scanf_i+0x124>
 8004388:	6862      	ldr	r2, [r4, #4]
 800438a:	b92a      	cbnz	r2, 8004398 <_scanf_i+0x80>
 800438c:	2108      	movs	r1, #8
 800438e:	6822      	ldr	r2, [r4, #0]
 8004390:	6061      	str	r1, [r4, #4]
 8004392:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004396:	6022      	str	r2, [r4, #0]
 8004398:	6822      	ldr	r2, [r4, #0]
 800439a:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800439e:	6022      	str	r2, [r4, #0]
 80043a0:	68a2      	ldr	r2, [r4, #8]
 80043a2:	1e51      	subs	r1, r2, #1
 80043a4:	60a1      	str	r1, [r4, #8]
 80043a6:	b192      	cbz	r2, 80043ce <_scanf_i+0xb6>
 80043a8:	6832      	ldr	r2, [r6, #0]
 80043aa:	1c51      	adds	r1, r2, #1
 80043ac:	6031      	str	r1, [r6, #0]
 80043ae:	7812      	ldrb	r2, [r2, #0]
 80043b0:	f805 2b01 	strb.w	r2, [r5], #1
 80043b4:	6872      	ldr	r2, [r6, #4]
 80043b6:	3a01      	subs	r2, #1
 80043b8:	2a00      	cmp	r2, #0
 80043ba:	6072      	str	r2, [r6, #4]
 80043bc:	dc07      	bgt.n	80043ce <_scanf_i+0xb6>
 80043be:	4631      	mov	r1, r6
 80043c0:	4650      	mov	r0, sl
 80043c2:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80043c6:	4790      	blx	r2
 80043c8:	2800      	cmp	r0, #0
 80043ca:	f040 8085 	bne.w	80044d8 <_scanf_i+0x1c0>
 80043ce:	f10b 0b01 	add.w	fp, fp, #1
 80043d2:	f1bb 0f03 	cmp.w	fp, #3
 80043d6:	d1cb      	bne.n	8004370 <_scanf_i+0x58>
 80043d8:	6863      	ldr	r3, [r4, #4]
 80043da:	b90b      	cbnz	r3, 80043e0 <_scanf_i+0xc8>
 80043dc:	230a      	movs	r3, #10
 80043de:	6063      	str	r3, [r4, #4]
 80043e0:	6863      	ldr	r3, [r4, #4]
 80043e2:	4945      	ldr	r1, [pc, #276]	@ (80044f8 <_scanf_i+0x1e0>)
 80043e4:	6960      	ldr	r0, [r4, #20]
 80043e6:	1ac9      	subs	r1, r1, r3
 80043e8:	f000 f888 	bl	80044fc <__sccl>
 80043ec:	f04f 0b00 	mov.w	fp, #0
 80043f0:	68a3      	ldr	r3, [r4, #8]
 80043f2:	6822      	ldr	r2, [r4, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d03d      	beq.n	8004474 <_scanf_i+0x15c>
 80043f8:	6831      	ldr	r1, [r6, #0]
 80043fa:	6960      	ldr	r0, [r4, #20]
 80043fc:	f891 c000 	ldrb.w	ip, [r1]
 8004400:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004404:	2800      	cmp	r0, #0
 8004406:	d035      	beq.n	8004474 <_scanf_i+0x15c>
 8004408:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800440c:	d124      	bne.n	8004458 <_scanf_i+0x140>
 800440e:	0510      	lsls	r0, r2, #20
 8004410:	d522      	bpl.n	8004458 <_scanf_i+0x140>
 8004412:	f10b 0b01 	add.w	fp, fp, #1
 8004416:	f1b9 0f00 	cmp.w	r9, #0
 800441a:	d003      	beq.n	8004424 <_scanf_i+0x10c>
 800441c:	3301      	adds	r3, #1
 800441e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004422:	60a3      	str	r3, [r4, #8]
 8004424:	6873      	ldr	r3, [r6, #4]
 8004426:	3b01      	subs	r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	6073      	str	r3, [r6, #4]
 800442c:	dd1b      	ble.n	8004466 <_scanf_i+0x14e>
 800442e:	6833      	ldr	r3, [r6, #0]
 8004430:	3301      	adds	r3, #1
 8004432:	6033      	str	r3, [r6, #0]
 8004434:	68a3      	ldr	r3, [r4, #8]
 8004436:	3b01      	subs	r3, #1
 8004438:	60a3      	str	r3, [r4, #8]
 800443a:	e7d9      	b.n	80043f0 <_scanf_i+0xd8>
 800443c:	f1bb 0f02 	cmp.w	fp, #2
 8004440:	d1ae      	bne.n	80043a0 <_scanf_i+0x88>
 8004442:	6822      	ldr	r2, [r4, #0]
 8004444:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8004448:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800444c:	d1c4      	bne.n	80043d8 <_scanf_i+0xc0>
 800444e:	2110      	movs	r1, #16
 8004450:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004454:	6061      	str	r1, [r4, #4]
 8004456:	e7a2      	b.n	800439e <_scanf_i+0x86>
 8004458:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800445c:	6022      	str	r2, [r4, #0]
 800445e:	780b      	ldrb	r3, [r1, #0]
 8004460:	f805 3b01 	strb.w	r3, [r5], #1
 8004464:	e7de      	b.n	8004424 <_scanf_i+0x10c>
 8004466:	4631      	mov	r1, r6
 8004468:	4650      	mov	r0, sl
 800446a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800446e:	4798      	blx	r3
 8004470:	2800      	cmp	r0, #0
 8004472:	d0df      	beq.n	8004434 <_scanf_i+0x11c>
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	05d9      	lsls	r1, r3, #23
 8004478:	d50d      	bpl.n	8004496 <_scanf_i+0x17e>
 800447a:	42bd      	cmp	r5, r7
 800447c:	d909      	bls.n	8004492 <_scanf_i+0x17a>
 800447e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004482:	4632      	mov	r2, r6
 8004484:	4650      	mov	r0, sl
 8004486:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800448a:	f105 39ff 	add.w	r9, r5, #4294967295
 800448e:	4798      	blx	r3
 8004490:	464d      	mov	r5, r9
 8004492:	42bd      	cmp	r5, r7
 8004494:	d028      	beq.n	80044e8 <_scanf_i+0x1d0>
 8004496:	6822      	ldr	r2, [r4, #0]
 8004498:	f012 0210 	ands.w	r2, r2, #16
 800449c:	d113      	bne.n	80044c6 <_scanf_i+0x1ae>
 800449e:	702a      	strb	r2, [r5, #0]
 80044a0:	4639      	mov	r1, r7
 80044a2:	6863      	ldr	r3, [r4, #4]
 80044a4:	4650      	mov	r0, sl
 80044a6:	9e01      	ldr	r6, [sp, #4]
 80044a8:	47b0      	blx	r6
 80044aa:	f8d8 3000 	ldr.w	r3, [r8]
 80044ae:	6821      	ldr	r1, [r4, #0]
 80044b0:	1d1a      	adds	r2, r3, #4
 80044b2:	f8c8 2000 	str.w	r2, [r8]
 80044b6:	f011 0f20 	tst.w	r1, #32
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	d00f      	beq.n	80044de <_scanf_i+0x1c6>
 80044be:	6018      	str	r0, [r3, #0]
 80044c0:	68e3      	ldr	r3, [r4, #12]
 80044c2:	3301      	adds	r3, #1
 80044c4:	60e3      	str	r3, [r4, #12]
 80044c6:	2000      	movs	r0, #0
 80044c8:	6923      	ldr	r3, [r4, #16]
 80044ca:	1bed      	subs	r5, r5, r7
 80044cc:	445d      	add	r5, fp
 80044ce:	442b      	add	r3, r5
 80044d0:	6123      	str	r3, [r4, #16]
 80044d2:	b007      	add	sp, #28
 80044d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d8:	f04f 0b00 	mov.w	fp, #0
 80044dc:	e7ca      	b.n	8004474 <_scanf_i+0x15c>
 80044de:	07ca      	lsls	r2, r1, #31
 80044e0:	bf4c      	ite	mi
 80044e2:	8018      	strhmi	r0, [r3, #0]
 80044e4:	6018      	strpl	r0, [r3, #0]
 80044e6:	e7eb      	b.n	80044c0 <_scanf_i+0x1a8>
 80044e8:	2001      	movs	r0, #1
 80044ea:	e7f2      	b.n	80044d2 <_scanf_i+0x1ba>
 80044ec:	080048e4 	.word	0x080048e4
 80044f0:	080047bd 	.word	0x080047bd
 80044f4:	0800489d 	.word	0x0800489d
 80044f8:	0800495d 	.word	0x0800495d

080044fc <__sccl>:
 80044fc:	b570      	push	{r4, r5, r6, lr}
 80044fe:	780b      	ldrb	r3, [r1, #0]
 8004500:	4604      	mov	r4, r0
 8004502:	2b5e      	cmp	r3, #94	@ 0x5e
 8004504:	bf0b      	itete	eq
 8004506:	784b      	ldrbeq	r3, [r1, #1]
 8004508:	1c4a      	addne	r2, r1, #1
 800450a:	1c8a      	addeq	r2, r1, #2
 800450c:	2100      	movne	r1, #0
 800450e:	bf08      	it	eq
 8004510:	2101      	moveq	r1, #1
 8004512:	3801      	subs	r0, #1
 8004514:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8004518:	f800 1f01 	strb.w	r1, [r0, #1]!
 800451c:	42a8      	cmp	r0, r5
 800451e:	d1fb      	bne.n	8004518 <__sccl+0x1c>
 8004520:	b90b      	cbnz	r3, 8004526 <__sccl+0x2a>
 8004522:	1e50      	subs	r0, r2, #1
 8004524:	bd70      	pop	{r4, r5, r6, pc}
 8004526:	f081 0101 	eor.w	r1, r1, #1
 800452a:	4610      	mov	r0, r2
 800452c:	54e1      	strb	r1, [r4, r3]
 800452e:	4602      	mov	r2, r0
 8004530:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004534:	2d2d      	cmp	r5, #45	@ 0x2d
 8004536:	d005      	beq.n	8004544 <__sccl+0x48>
 8004538:	2d5d      	cmp	r5, #93	@ 0x5d
 800453a:	d016      	beq.n	800456a <__sccl+0x6e>
 800453c:	2d00      	cmp	r5, #0
 800453e:	d0f1      	beq.n	8004524 <__sccl+0x28>
 8004540:	462b      	mov	r3, r5
 8004542:	e7f2      	b.n	800452a <__sccl+0x2e>
 8004544:	7846      	ldrb	r6, [r0, #1]
 8004546:	2e5d      	cmp	r6, #93	@ 0x5d
 8004548:	d0fa      	beq.n	8004540 <__sccl+0x44>
 800454a:	42b3      	cmp	r3, r6
 800454c:	dcf8      	bgt.n	8004540 <__sccl+0x44>
 800454e:	461a      	mov	r2, r3
 8004550:	3002      	adds	r0, #2
 8004552:	3201      	adds	r2, #1
 8004554:	4296      	cmp	r6, r2
 8004556:	54a1      	strb	r1, [r4, r2]
 8004558:	dcfb      	bgt.n	8004552 <__sccl+0x56>
 800455a:	1af2      	subs	r2, r6, r3
 800455c:	3a01      	subs	r2, #1
 800455e:	42b3      	cmp	r3, r6
 8004560:	bfa8      	it	ge
 8004562:	2200      	movge	r2, #0
 8004564:	1c5d      	adds	r5, r3, #1
 8004566:	18ab      	adds	r3, r5, r2
 8004568:	e7e1      	b.n	800452e <__sccl+0x32>
 800456a:	4610      	mov	r0, r2
 800456c:	e7da      	b.n	8004524 <__sccl+0x28>

0800456e <__submore>:
 800456e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004572:	460c      	mov	r4, r1
 8004574:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004576:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800457a:	4299      	cmp	r1, r3
 800457c:	d11b      	bne.n	80045b6 <__submore+0x48>
 800457e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004582:	f7ff f92d 	bl	80037e0 <_malloc_r>
 8004586:	b918      	cbnz	r0, 8004590 <__submore+0x22>
 8004588:	f04f 30ff 	mov.w	r0, #4294967295
 800458c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004590:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004594:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004596:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800459a:	6360      	str	r0, [r4, #52]	@ 0x34
 800459c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80045a0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80045a4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80045a8:	7043      	strb	r3, [r0, #1]
 80045aa:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80045ae:	7003      	strb	r3, [r0, #0]
 80045b0:	6020      	str	r0, [r4, #0]
 80045b2:	2000      	movs	r0, #0
 80045b4:	e7ea      	b.n	800458c <__submore+0x1e>
 80045b6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80045b8:	0077      	lsls	r7, r6, #1
 80045ba:	463a      	mov	r2, r7
 80045bc:	f000 f856 	bl	800466c <_realloc_r>
 80045c0:	4605      	mov	r5, r0
 80045c2:	2800      	cmp	r0, #0
 80045c4:	d0e0      	beq.n	8004588 <__submore+0x1a>
 80045c6:	eb00 0806 	add.w	r8, r0, r6
 80045ca:	4601      	mov	r1, r0
 80045cc:	4632      	mov	r2, r6
 80045ce:	4640      	mov	r0, r8
 80045d0:	f000 f83e 	bl	8004650 <memcpy>
 80045d4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80045d8:	f8c4 8000 	str.w	r8, [r4]
 80045dc:	e7e9      	b.n	80045b2 <__submore+0x44>

080045de <memmove>:
 80045de:	4288      	cmp	r0, r1
 80045e0:	b510      	push	{r4, lr}
 80045e2:	eb01 0402 	add.w	r4, r1, r2
 80045e6:	d902      	bls.n	80045ee <memmove+0x10>
 80045e8:	4284      	cmp	r4, r0
 80045ea:	4623      	mov	r3, r4
 80045ec:	d807      	bhi.n	80045fe <memmove+0x20>
 80045ee:	1e43      	subs	r3, r0, #1
 80045f0:	42a1      	cmp	r1, r4
 80045f2:	d008      	beq.n	8004606 <memmove+0x28>
 80045f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045fc:	e7f8      	b.n	80045f0 <memmove+0x12>
 80045fe:	4601      	mov	r1, r0
 8004600:	4402      	add	r2, r0
 8004602:	428a      	cmp	r2, r1
 8004604:	d100      	bne.n	8004608 <memmove+0x2a>
 8004606:	bd10      	pop	{r4, pc}
 8004608:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800460c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004610:	e7f7      	b.n	8004602 <memmove+0x24>
	...

08004614 <_sbrk_r>:
 8004614:	b538      	push	{r3, r4, r5, lr}
 8004616:	2300      	movs	r3, #0
 8004618:	4d05      	ldr	r5, [pc, #20]	@ (8004630 <_sbrk_r+0x1c>)
 800461a:	4604      	mov	r4, r0
 800461c:	4608      	mov	r0, r1
 800461e:	602b      	str	r3, [r5, #0]
 8004620:	f7fc f8fc 	bl	800081c <_sbrk>
 8004624:	1c43      	adds	r3, r0, #1
 8004626:	d102      	bne.n	800462e <_sbrk_r+0x1a>
 8004628:	682b      	ldr	r3, [r5, #0]
 800462a:	b103      	cbz	r3, 800462e <_sbrk_r+0x1a>
 800462c:	6023      	str	r3, [r4, #0]
 800462e:	bd38      	pop	{r3, r4, r5, pc}
 8004630:	200002b4 	.word	0x200002b4

08004634 <memchr>:
 8004634:	4603      	mov	r3, r0
 8004636:	b510      	push	{r4, lr}
 8004638:	b2c9      	uxtb	r1, r1
 800463a:	4402      	add	r2, r0
 800463c:	4293      	cmp	r3, r2
 800463e:	4618      	mov	r0, r3
 8004640:	d101      	bne.n	8004646 <memchr+0x12>
 8004642:	2000      	movs	r0, #0
 8004644:	e003      	b.n	800464e <memchr+0x1a>
 8004646:	7804      	ldrb	r4, [r0, #0]
 8004648:	3301      	adds	r3, #1
 800464a:	428c      	cmp	r4, r1
 800464c:	d1f6      	bne.n	800463c <memchr+0x8>
 800464e:	bd10      	pop	{r4, pc}

08004650 <memcpy>:
 8004650:	440a      	add	r2, r1
 8004652:	4291      	cmp	r1, r2
 8004654:	f100 33ff 	add.w	r3, r0, #4294967295
 8004658:	d100      	bne.n	800465c <memcpy+0xc>
 800465a:	4770      	bx	lr
 800465c:	b510      	push	{r4, lr}
 800465e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004662:	4291      	cmp	r1, r2
 8004664:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004668:	d1f9      	bne.n	800465e <memcpy+0xe>
 800466a:	bd10      	pop	{r4, pc}

0800466c <_realloc_r>:
 800466c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004670:	4607      	mov	r7, r0
 8004672:	4614      	mov	r4, r2
 8004674:	460d      	mov	r5, r1
 8004676:	b921      	cbnz	r1, 8004682 <_realloc_r+0x16>
 8004678:	4611      	mov	r1, r2
 800467a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800467e:	f7ff b8af 	b.w	80037e0 <_malloc_r>
 8004682:	b92a      	cbnz	r2, 8004690 <_realloc_r+0x24>
 8004684:	f7ff f842 	bl	800370c <_free_r>
 8004688:	4625      	mov	r5, r4
 800468a:	4628      	mov	r0, r5
 800468c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004690:	f000 f906 	bl	80048a0 <_malloc_usable_size_r>
 8004694:	4284      	cmp	r4, r0
 8004696:	4606      	mov	r6, r0
 8004698:	d802      	bhi.n	80046a0 <_realloc_r+0x34>
 800469a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800469e:	d8f4      	bhi.n	800468a <_realloc_r+0x1e>
 80046a0:	4621      	mov	r1, r4
 80046a2:	4638      	mov	r0, r7
 80046a4:	f7ff f89c 	bl	80037e0 <_malloc_r>
 80046a8:	4680      	mov	r8, r0
 80046aa:	b908      	cbnz	r0, 80046b0 <_realloc_r+0x44>
 80046ac:	4645      	mov	r5, r8
 80046ae:	e7ec      	b.n	800468a <_realloc_r+0x1e>
 80046b0:	42b4      	cmp	r4, r6
 80046b2:	4622      	mov	r2, r4
 80046b4:	4629      	mov	r1, r5
 80046b6:	bf28      	it	cs
 80046b8:	4632      	movcs	r2, r6
 80046ba:	f7ff ffc9 	bl	8004650 <memcpy>
 80046be:	4629      	mov	r1, r5
 80046c0:	4638      	mov	r0, r7
 80046c2:	f7ff f823 	bl	800370c <_free_r>
 80046c6:	e7f1      	b.n	80046ac <_realloc_r+0x40>

080046c8 <_strtol_l.isra.0>:
 80046c8:	2b24      	cmp	r3, #36	@ 0x24
 80046ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046ce:	4686      	mov	lr, r0
 80046d0:	4690      	mov	r8, r2
 80046d2:	d801      	bhi.n	80046d8 <_strtol_l.isra.0+0x10>
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d106      	bne.n	80046e6 <_strtol_l.isra.0+0x1e>
 80046d8:	f7fe ffec 	bl	80036b4 <__errno>
 80046dc:	2316      	movs	r3, #22
 80046de:	6003      	str	r3, [r0, #0]
 80046e0:	2000      	movs	r0, #0
 80046e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e6:	460d      	mov	r5, r1
 80046e8:	4833      	ldr	r0, [pc, #204]	@ (80047b8 <_strtol_l.isra.0+0xf0>)
 80046ea:	462a      	mov	r2, r5
 80046ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80046f0:	5d06      	ldrb	r6, [r0, r4]
 80046f2:	f016 0608 	ands.w	r6, r6, #8
 80046f6:	d1f8      	bne.n	80046ea <_strtol_l.isra.0+0x22>
 80046f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80046fa:	d110      	bne.n	800471e <_strtol_l.isra.0+0x56>
 80046fc:	2601      	movs	r6, #1
 80046fe:	782c      	ldrb	r4, [r5, #0]
 8004700:	1c95      	adds	r5, r2, #2
 8004702:	f033 0210 	bics.w	r2, r3, #16
 8004706:	d115      	bne.n	8004734 <_strtol_l.isra.0+0x6c>
 8004708:	2c30      	cmp	r4, #48	@ 0x30
 800470a:	d10d      	bne.n	8004728 <_strtol_l.isra.0+0x60>
 800470c:	782a      	ldrb	r2, [r5, #0]
 800470e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004712:	2a58      	cmp	r2, #88	@ 0x58
 8004714:	d108      	bne.n	8004728 <_strtol_l.isra.0+0x60>
 8004716:	786c      	ldrb	r4, [r5, #1]
 8004718:	3502      	adds	r5, #2
 800471a:	2310      	movs	r3, #16
 800471c:	e00a      	b.n	8004734 <_strtol_l.isra.0+0x6c>
 800471e:	2c2b      	cmp	r4, #43	@ 0x2b
 8004720:	bf04      	itt	eq
 8004722:	782c      	ldrbeq	r4, [r5, #0]
 8004724:	1c95      	addeq	r5, r2, #2
 8004726:	e7ec      	b.n	8004702 <_strtol_l.isra.0+0x3a>
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f6      	bne.n	800471a <_strtol_l.isra.0+0x52>
 800472c:	2c30      	cmp	r4, #48	@ 0x30
 800472e:	bf14      	ite	ne
 8004730:	230a      	movne	r3, #10
 8004732:	2308      	moveq	r3, #8
 8004734:	2200      	movs	r2, #0
 8004736:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800473a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800473e:	fbbc f9f3 	udiv	r9, ip, r3
 8004742:	4610      	mov	r0, r2
 8004744:	fb03 ca19 	mls	sl, r3, r9, ip
 8004748:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800474c:	2f09      	cmp	r7, #9
 800474e:	d80f      	bhi.n	8004770 <_strtol_l.isra.0+0xa8>
 8004750:	463c      	mov	r4, r7
 8004752:	42a3      	cmp	r3, r4
 8004754:	dd1b      	ble.n	800478e <_strtol_l.isra.0+0xc6>
 8004756:	1c57      	adds	r7, r2, #1
 8004758:	d007      	beq.n	800476a <_strtol_l.isra.0+0xa2>
 800475a:	4581      	cmp	r9, r0
 800475c:	d314      	bcc.n	8004788 <_strtol_l.isra.0+0xc0>
 800475e:	d101      	bne.n	8004764 <_strtol_l.isra.0+0x9c>
 8004760:	45a2      	cmp	sl, r4
 8004762:	db11      	blt.n	8004788 <_strtol_l.isra.0+0xc0>
 8004764:	2201      	movs	r2, #1
 8004766:	fb00 4003 	mla	r0, r0, r3, r4
 800476a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800476e:	e7eb      	b.n	8004748 <_strtol_l.isra.0+0x80>
 8004770:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004774:	2f19      	cmp	r7, #25
 8004776:	d801      	bhi.n	800477c <_strtol_l.isra.0+0xb4>
 8004778:	3c37      	subs	r4, #55	@ 0x37
 800477a:	e7ea      	b.n	8004752 <_strtol_l.isra.0+0x8a>
 800477c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004780:	2f19      	cmp	r7, #25
 8004782:	d804      	bhi.n	800478e <_strtol_l.isra.0+0xc6>
 8004784:	3c57      	subs	r4, #87	@ 0x57
 8004786:	e7e4      	b.n	8004752 <_strtol_l.isra.0+0x8a>
 8004788:	f04f 32ff 	mov.w	r2, #4294967295
 800478c:	e7ed      	b.n	800476a <_strtol_l.isra.0+0xa2>
 800478e:	1c53      	adds	r3, r2, #1
 8004790:	d108      	bne.n	80047a4 <_strtol_l.isra.0+0xdc>
 8004792:	2322      	movs	r3, #34	@ 0x22
 8004794:	4660      	mov	r0, ip
 8004796:	f8ce 3000 	str.w	r3, [lr]
 800479a:	f1b8 0f00 	cmp.w	r8, #0
 800479e:	d0a0      	beq.n	80046e2 <_strtol_l.isra.0+0x1a>
 80047a0:	1e69      	subs	r1, r5, #1
 80047a2:	e006      	b.n	80047b2 <_strtol_l.isra.0+0xea>
 80047a4:	b106      	cbz	r6, 80047a8 <_strtol_l.isra.0+0xe0>
 80047a6:	4240      	negs	r0, r0
 80047a8:	f1b8 0f00 	cmp.w	r8, #0
 80047ac:	d099      	beq.n	80046e2 <_strtol_l.isra.0+0x1a>
 80047ae:	2a00      	cmp	r2, #0
 80047b0:	d1f6      	bne.n	80047a0 <_strtol_l.isra.0+0xd8>
 80047b2:	f8c8 1000 	str.w	r1, [r8]
 80047b6:	e794      	b.n	80046e2 <_strtol_l.isra.0+0x1a>
 80047b8:	08004969 	.word	0x08004969

080047bc <_strtol_r>:
 80047bc:	f7ff bf84 	b.w	80046c8 <_strtol_l.isra.0>

080047c0 <_strtoul_l.isra.0>:
 80047c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047c4:	4686      	mov	lr, r0
 80047c6:	460d      	mov	r5, r1
 80047c8:	4e33      	ldr	r6, [pc, #204]	@ (8004898 <_strtoul_l.isra.0+0xd8>)
 80047ca:	4628      	mov	r0, r5
 80047cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80047d0:	5d37      	ldrb	r7, [r6, r4]
 80047d2:	f017 0708 	ands.w	r7, r7, #8
 80047d6:	d1f8      	bne.n	80047ca <_strtoul_l.isra.0+0xa>
 80047d8:	2c2d      	cmp	r4, #45	@ 0x2d
 80047da:	d110      	bne.n	80047fe <_strtoul_l.isra.0+0x3e>
 80047dc:	2701      	movs	r7, #1
 80047de:	782c      	ldrb	r4, [r5, #0]
 80047e0:	1c85      	adds	r5, r0, #2
 80047e2:	f033 0010 	bics.w	r0, r3, #16
 80047e6:	d115      	bne.n	8004814 <_strtoul_l.isra.0+0x54>
 80047e8:	2c30      	cmp	r4, #48	@ 0x30
 80047ea:	d10d      	bne.n	8004808 <_strtoul_l.isra.0+0x48>
 80047ec:	7828      	ldrb	r0, [r5, #0]
 80047ee:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80047f2:	2858      	cmp	r0, #88	@ 0x58
 80047f4:	d108      	bne.n	8004808 <_strtoul_l.isra.0+0x48>
 80047f6:	786c      	ldrb	r4, [r5, #1]
 80047f8:	3502      	adds	r5, #2
 80047fa:	2310      	movs	r3, #16
 80047fc:	e00a      	b.n	8004814 <_strtoul_l.isra.0+0x54>
 80047fe:	2c2b      	cmp	r4, #43	@ 0x2b
 8004800:	bf04      	itt	eq
 8004802:	782c      	ldrbeq	r4, [r5, #0]
 8004804:	1c85      	addeq	r5, r0, #2
 8004806:	e7ec      	b.n	80047e2 <_strtoul_l.isra.0+0x22>
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1f6      	bne.n	80047fa <_strtoul_l.isra.0+0x3a>
 800480c:	2c30      	cmp	r4, #48	@ 0x30
 800480e:	bf14      	ite	ne
 8004810:	230a      	movne	r3, #10
 8004812:	2308      	moveq	r3, #8
 8004814:	f04f 38ff 	mov.w	r8, #4294967295
 8004818:	fbb8 f8f3 	udiv	r8, r8, r3
 800481c:	2600      	movs	r6, #0
 800481e:	fb03 f908 	mul.w	r9, r3, r8
 8004822:	4630      	mov	r0, r6
 8004824:	ea6f 0909 	mvn.w	r9, r9
 8004828:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800482c:	f1bc 0f09 	cmp.w	ip, #9
 8004830:	d810      	bhi.n	8004854 <_strtoul_l.isra.0+0x94>
 8004832:	4664      	mov	r4, ip
 8004834:	42a3      	cmp	r3, r4
 8004836:	dd1e      	ble.n	8004876 <_strtoul_l.isra.0+0xb6>
 8004838:	f1b6 3fff 	cmp.w	r6, #4294967295
 800483c:	d007      	beq.n	800484e <_strtoul_l.isra.0+0x8e>
 800483e:	4580      	cmp	r8, r0
 8004840:	d316      	bcc.n	8004870 <_strtoul_l.isra.0+0xb0>
 8004842:	d101      	bne.n	8004848 <_strtoul_l.isra.0+0x88>
 8004844:	45a1      	cmp	r9, r4
 8004846:	db13      	blt.n	8004870 <_strtoul_l.isra.0+0xb0>
 8004848:	2601      	movs	r6, #1
 800484a:	fb00 4003 	mla	r0, r0, r3, r4
 800484e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004852:	e7e9      	b.n	8004828 <_strtoul_l.isra.0+0x68>
 8004854:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8004858:	f1bc 0f19 	cmp.w	ip, #25
 800485c:	d801      	bhi.n	8004862 <_strtoul_l.isra.0+0xa2>
 800485e:	3c37      	subs	r4, #55	@ 0x37
 8004860:	e7e8      	b.n	8004834 <_strtoul_l.isra.0+0x74>
 8004862:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8004866:	f1bc 0f19 	cmp.w	ip, #25
 800486a:	d804      	bhi.n	8004876 <_strtoul_l.isra.0+0xb6>
 800486c:	3c57      	subs	r4, #87	@ 0x57
 800486e:	e7e1      	b.n	8004834 <_strtoul_l.isra.0+0x74>
 8004870:	f04f 36ff 	mov.w	r6, #4294967295
 8004874:	e7eb      	b.n	800484e <_strtoul_l.isra.0+0x8e>
 8004876:	1c73      	adds	r3, r6, #1
 8004878:	d106      	bne.n	8004888 <_strtoul_l.isra.0+0xc8>
 800487a:	2322      	movs	r3, #34	@ 0x22
 800487c:	4630      	mov	r0, r6
 800487e:	f8ce 3000 	str.w	r3, [lr]
 8004882:	b932      	cbnz	r2, 8004892 <_strtoul_l.isra.0+0xd2>
 8004884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004888:	b107      	cbz	r7, 800488c <_strtoul_l.isra.0+0xcc>
 800488a:	4240      	negs	r0, r0
 800488c:	2a00      	cmp	r2, #0
 800488e:	d0f9      	beq.n	8004884 <_strtoul_l.isra.0+0xc4>
 8004890:	b106      	cbz	r6, 8004894 <_strtoul_l.isra.0+0xd4>
 8004892:	1e69      	subs	r1, r5, #1
 8004894:	6011      	str	r1, [r2, #0]
 8004896:	e7f5      	b.n	8004884 <_strtoul_l.isra.0+0xc4>
 8004898:	08004969 	.word	0x08004969

0800489c <_strtoul_r>:
 800489c:	f7ff bf90 	b.w	80047c0 <_strtoul_l.isra.0>

080048a0 <_malloc_usable_size_r>:
 80048a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048a4:	1f18      	subs	r0, r3, #4
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	bfbc      	itt	lt
 80048aa:	580b      	ldrlt	r3, [r1, r0]
 80048ac:	18c0      	addlt	r0, r0, r3
 80048ae:	4770      	bx	lr

080048b0 <_init>:
 80048b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b2:	bf00      	nop
 80048b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b6:	bc08      	pop	{r3}
 80048b8:	469e      	mov	lr, r3
 80048ba:	4770      	bx	lr

080048bc <_fini>:
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048be:	bf00      	nop
 80048c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c2:	bc08      	pop	{r3}
 80048c4:	469e      	mov	lr, r3
 80048c6:	4770      	bx	lr
