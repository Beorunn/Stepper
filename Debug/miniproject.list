
miniproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009544  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08009658  08009658  0000a658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ae4  08009ae4  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009ae4  08009ae4  0000aae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009aec  08009aec  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009aec  08009aec  0000aaec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009af0  08009af0  0000aaf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009af4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  200001d4  08009cc8  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  08009cc8  0000b4dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e794  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000241a  00000000  00000000  00019991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  0001bdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b58  00000000  00000000  0001cc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019529  00000000  00000000  0001d790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a1d  00000000  00000000  00036cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091ca7  00000000  00000000  000476d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d937d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000516c  00000000  00000000  000d93c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000de52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800963c 	.word	0x0800963c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800963c 	.word	0x0800963c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd8:	f000 fd12 	bl	8001600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bdc:	f000 f832 	bl	8000c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be0:	f000 f98e 	bl	8000f00 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000be4:	f000 f87e 	bl	8000ce4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000be8:	f000 f960 	bl	8000eac <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000bec:	f000 f8b8 	bl	8000d60 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bf0:	f000 f902 	bl	8000df8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000bf4:	480f      	ldr	r0, [pc, #60]	@ (8000c34 <main+0x60>)
 8000bf6:	f002 fc6b 	bl	80034d0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	480e      	ldr	r0, [pc, #56]	@ (8000c38 <main+0x64>)
 8000bfe:	f002 fd01 	bl	8003604 <HAL_TIM_PWM_Start_IT>
  HAL_ADC_Start(&hadc1);
 8000c02:	480e      	ldr	r0, [pc, #56]	@ (8000c3c <main+0x68>)
 8000c04:	f000 fe36 	bl	8001874 <HAL_ADC_Start>
  if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8000c08:	2164      	movs	r1, #100	@ 0x64
 8000c0a:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <main+0x68>)
 8000c0c:	f000 ff0c 	bl	8001a28 <HAL_ADC_PollForConversion>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d106      	bne.n	8000c24 <main+0x50>
      last_adc = HAL_ADC_GetValue(&hadc1);
 8000c16:	4809      	ldr	r0, [pc, #36]	@ (8000c3c <main+0x68>)
 8000c18:	f001 f8c2 	bl	8001da0 <HAL_ADC_GetValue>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b07      	ldr	r3, [pc, #28]	@ (8000c40 <main+0x6c>)
 8000c22:	601a      	str	r2, [r3, #0]
  }
  HAL_ADC_Stop(&hadc1);
 8000c24:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <main+0x68>)
 8000c26:	f000 fed3 	bl	80019d0 <HAL_ADC_Stop>

  HAL_ADC_Start_IT(&hadc1);
 8000c2a:	4804      	ldr	r0, [pc, #16]	@ (8000c3c <main+0x68>)
 8000c2c:	f001 f802 	bl	8001c34 <HAL_ADC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <main+0x5c>
 8000c34:	20000220 	.word	0x20000220
 8000c38:	20000268 	.word	0x20000268
 8000c3c:	200001f0 	.word	0x200001f0
 8000c40:	200002fc 	.word	0x200002fc

08000c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b094      	sub	sp, #80	@ 0x50
 8000c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c4e:	2228      	movs	r2, #40	@ 0x28
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f005 f925 	bl	8005ea2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c74:	2302      	movs	r3, #2
 8000c76:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c7c:	2310      	movs	r3, #16
 8000c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f001 fe55 	bl	8002938 <HAL_RCC_OscConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000c94:	f000 fa38 	bl	8001108 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c98:	230f      	movs	r3, #15
 8000c9a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f002 f8c2 	bl	8002e3c <HAL_RCC_ClockConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000cbe:	f000 fa23 	bl	8001108 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f002 fa43 	bl	8003158 <HAL_RCCEx_PeriphCLKConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cd8:	f000 fa16 	bl	8001108 <Error_Handler>
  }
}
 8000cdc:	bf00      	nop
 8000cde:	3750      	adds	r7, #80	@ 0x50
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cf4:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <MX_ADC1_Init+0x74>)
 8000cf6:	4a19      	ldr	r2, [pc, #100]	@ (8000d5c <MX_ADC1_Init+0x78>)
 8000cf8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cfa:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <MX_ADC1_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d00:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <MX_ADC1_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d06:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <MX_ADC1_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d0c:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <MX_ADC1_Init+0x74>)
 8000d0e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000d12:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d14:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <MX_ADC1_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <MX_ADC1_Init+0x74>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d20:	480d      	ldr	r0, [pc, #52]	@ (8000d58 <MX_ADC1_Init+0x74>)
 8000d22:	f000 fccf 	bl	80016c4 <HAL_ADC_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000d2c:	f000 f9ec 	bl	8001108 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d30:	2301      	movs	r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d34:	2301      	movs	r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000d38:	2307      	movs	r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <MX_ADC1_Init+0x74>)
 8000d42:	f001 f901 	bl	8001f48 <HAL_ADC_ConfigChannel>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d4c:	f000 f9dc 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	200001f0 	.word	0x200001f0
 8000d5c:	40012400 	.word	0x40012400

08000d60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d74:	463b      	mov	r3, r7
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <MX_TIM2_Init+0x94>)
 8000d7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	@ (8000df4 <MX_TIM2_Init+0x94>)
 8000d86:	2207      	movs	r2, #7
 8000d88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <MX_TIM2_Init+0x94>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535-1;
 8000d90:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <MX_TIM2_Init+0x94>)
 8000d92:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000d96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d98:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <MX_TIM2_Init+0x94>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d9e:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <MX_TIM2_Init+0x94>)
 8000da0:	2280      	movs	r2, #128	@ 0x80
 8000da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000da4:	4813      	ldr	r0, [pc, #76]	@ (8000df4 <MX_TIM2_Init+0x94>)
 8000da6:	f002 fb43 	bl	8003430 <HAL_TIM_Base_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000db0:	f000 f9aa 	bl	8001108 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000db8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dba:	f107 0308 	add.w	r3, r7, #8
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	480c      	ldr	r0, [pc, #48]	@ (8000df4 <MX_TIM2_Init+0x94>)
 8000dc2:	f002 fec1 	bl	8003b48 <HAL_TIM_ConfigClockSource>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000dcc:	f000 f99c 	bl	8001108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4805      	ldr	r0, [pc, #20]	@ (8000df4 <MX_TIM2_Init+0x94>)
 8000dde:	f003 fa4f 	bl	8004280 <HAL_TIMEx_MasterConfigSynchronization>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000de8:	f000 f98e 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000220 	.word	0x20000220

08000df8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	@ 0x28
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfe:	f107 0320 	add.w	r3, r7, #32
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e1a:	4b22      	ldr	r3, [pc, #136]	@ (8000ea4 <MX_TIM3_Init+0xac>)
 8000e1c:	4a22      	ldr	r2, [pc, #136]	@ (8000ea8 <MX_TIM3_Init+0xb0>)
 8000e1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8000e20:	4b20      	ldr	r3, [pc, #128]	@ (8000ea4 <MX_TIM3_Init+0xac>)
 8000e22:	2207      	movs	r2, #7
 8000e24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea4 <MX_TIM3_Init+0xac>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea4 <MX_TIM3_Init+0xac>)
 8000e2e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <MX_TIM3_Init+0xac>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <MX_TIM3_Init+0xac>)
 8000e3c:	2280      	movs	r2, #128	@ 0x80
 8000e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e40:	4818      	ldr	r0, [pc, #96]	@ (8000ea4 <MX_TIM3_Init+0xac>)
 8000e42:	f002 fb8f 	bl	8003564 <HAL_TIM_PWM_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000e4c:	f000 f95c 	bl	8001108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e50:	2300      	movs	r3, #0
 8000e52:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e58:	f107 0320 	add.w	r3, r7, #32
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4811      	ldr	r0, [pc, #68]	@ (8000ea4 <MX_TIM3_Init+0xac>)
 8000e60:	f003 fa0e 	bl	8004280 <HAL_TIMEx_MasterConfigSynchronization>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000e6a:	f000 f94d 	bl	8001108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e6e:	2360      	movs	r3, #96	@ 0x60
 8000e70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000e72:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2200      	movs	r2, #0
 8000e84:	4619      	mov	r1, r3
 8000e86:	4807      	ldr	r0, [pc, #28]	@ (8000ea4 <MX_TIM3_Init+0xac>)
 8000e88:	f002 fd9c 	bl	80039c4 <HAL_TIM_PWM_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000e92:	f000 f939 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e96:	4803      	ldr	r0, [pc, #12]	@ (8000ea4 <MX_TIM3_Init+0xac>)
 8000e98:	f000 f9f4 	bl	8001284 <HAL_TIM_MspPostInit>

}
 8000e9c:	bf00      	nop
 8000e9e:	3728      	adds	r7, #40	@ 0x28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000268 	.word	0x20000268
 8000ea8:	40000400 	.word	0x40000400

08000eac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	@ (8000efc <MX_USART1_UART_Init+0x50>)
 8000eb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000eb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000eb8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ebc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ee2:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ee4:	f003 fa3c 	bl	8004360 <HAL_UART_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eee:	f000 f90b 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200002b0 	.word	0x200002b0
 8000efc:	40013800 	.word	0x40013800

08000f00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f06:	f107 0308 	add.w	r3, r7, #8
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f14:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <MX_GPIO_Init+0x78>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a17      	ldr	r2, [pc, #92]	@ (8000f78 <MX_GPIO_Init+0x78>)
 8000f1a:	f043 0320 	orr.w	r3, r3, #32
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <MX_GPIO_Init+0x78>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f003 0320 	and.w	r3, r3, #32
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <MX_GPIO_Init+0x78>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a11      	ldr	r2, [pc, #68]	@ (8000f78 <MX_GPIO_Init+0x78>)
 8000f32:	f043 0304 	orr.w	r3, r3, #4
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b0f      	ldr	r3, [pc, #60]	@ (8000f78 <MX_GPIO_Init+0x78>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 8000f4a:	480c      	ldr	r0, [pc, #48]	@ (8000f7c <MX_GPIO_Init+0x7c>)
 8000f4c:	f001 fcdc 	bl	8002908 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8000f50:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000f54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	4619      	mov	r1, r3
 8000f68:	4804      	ldr	r0, [pc, #16]	@ (8000f7c <MX_GPIO_Init+0x7c>)
 8000f6a:	f001 fb49 	bl	8002600 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010800 	.word	0x40010800

08000f80 <HAL_TIM_PWM_PulseFinishedCallback>:
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
//		delay_us(500);
//}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM3)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a33      	ldr	r2, [pc, #204]	@ (800105c <HAL_TIM_PWM_PulseFinishedCallback+0xdc>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d15f      	bne.n	8001052 <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
    {
    		  if(step_count != 0){
 8000f92:	4b33      	ldr	r3, [pc, #204]	@ (8001060 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d052      	beq.n	8001040 <HAL_TIM_PWM_PulseFinishedCallback+0xc0>
    			  if(step_count > 0){
 8000f9a:	4b31      	ldr	r3, [pc, #196]	@ (8001060 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	dd27      	ble.n	8000ff2 <HAL_TIM_PWM_PulseFinishedCallback+0x72>
    				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fa8:	482e      	ldr	r0, [pc, #184]	@ (8001064 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>)
 8000faa:	f001 fcad 	bl	8002908 <HAL_GPIO_WritePin>
    				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET); //ena =1
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fb4:	482b      	ldr	r0, [pc, #172]	@ (8001064 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>)
 8000fb6:	f001 fca7 	bl	8002908 <HAL_GPIO_WritePin>
    				  step_count--;
 8000fba:	4b29      	ldr	r3, [pc, #164]	@ (8001060 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	4a27      	ldr	r2, [pc, #156]	@ (8001060 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 8000fc2:	6013      	str	r3, [r2, #0]
    				  HAL_ADC_Start_IT(&hadc1);
 8000fc4:	4828      	ldr	r0, [pc, #160]	@ (8001068 <HAL_TIM_PWM_PulseFinishedCallback+0xe8>)
 8000fc6:	f000 fe35 	bl	8001c34 <HAL_ADC_Start_IT>
    				  	     sprintf(adc_buffer, "ADC Value: %d | Steps to go: %ld\r\n", current_adc, step_count);
 8000fca:	4b28      	ldr	r3, [pc, #160]	@ (800106c <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4b24      	ldr	r3, [pc, #144]	@ (8001060 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4927      	ldr	r1, [pc, #156]	@ (8001070 <HAL_TIM_PWM_PulseFinishedCallback+0xf0>)
 8000fd4:	4827      	ldr	r0, [pc, #156]	@ (8001074 <HAL_TIM_PWM_PulseFinishedCallback+0xf4>)
 8000fd6:	f004 feff 	bl	8005dd8 <siprintf>
    				  	     HAL_UART_Transmit(&huart1, (uint16_t*)adc_buffer, strlen(adc_buffer), 1000); // Dùng timeout ngắn
 8000fda:	4826      	ldr	r0, [pc, #152]	@ (8001074 <HAL_TIM_PWM_PulseFinishedCallback+0xf4>)
 8000fdc:	f7ff f8b8 	bl	8000150 <strlen>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe8:	4922      	ldr	r1, [pc, #136]	@ (8001074 <HAL_TIM_PWM_PulseFinishedCallback+0xf4>)
 8000fea:	4823      	ldr	r0, [pc, #140]	@ (8001078 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 8000fec:	f003 fa08 	bl	8004400 <HAL_UART_Transmit>
 8000ff0:	e026      	b.n	8001040 <HAL_TIM_PWM_PulseFinishedCallback+0xc0>
    			  }
    			  else{
    				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ff8:	481a      	ldr	r0, [pc, #104]	@ (8001064 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>)
 8000ffa:	f001 fc85 	bl	8002908 <HAL_GPIO_WritePin>
    				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET); //ena =1
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001004:	4817      	ldr	r0, [pc, #92]	@ (8001064 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>)
 8001006:	f001 fc7f 	bl	8002908 <HAL_GPIO_WritePin>

    				  step_count++;
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	3301      	adds	r3, #1
 8001010:	4a13      	ldr	r2, [pc, #76]	@ (8001060 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 8001012:	6013      	str	r3, [r2, #0]
    				  HAL_ADC_Start_IT(&hadc1);
 8001014:	4814      	ldr	r0, [pc, #80]	@ (8001068 <HAL_TIM_PWM_PulseFinishedCallback+0xe8>)
 8001016:	f000 fe0d 	bl	8001c34 <HAL_ADC_Start_IT>
    				  	     sprintf(adc_buffer, "ADC Value: %d | Steps to go: %ld\r\n", current_adc, step_count);
 800101a:	4b14      	ldr	r3, [pc, #80]	@ (800106c <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4913      	ldr	r1, [pc, #76]	@ (8001070 <HAL_TIM_PWM_PulseFinishedCallback+0xf0>)
 8001024:	4813      	ldr	r0, [pc, #76]	@ (8001074 <HAL_TIM_PWM_PulseFinishedCallback+0xf4>)
 8001026:	f004 fed7 	bl	8005dd8 <siprintf>
    				  	     HAL_UART_Transmit(&huart1, (uint16_t*)adc_buffer, strlen(adc_buffer), 1000); // Dùng timeout ngắn
 800102a:	4812      	ldr	r0, [pc, #72]	@ (8001074 <HAL_TIM_PWM_PulseFinishedCallback+0xf4>)
 800102c:	f7ff f890 	bl	8000150 <strlen>
 8001030:	4603      	mov	r3, r0
 8001032:	b29a      	uxth	r2, r3
 8001034:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001038:	490e      	ldr	r1, [pc, #56]	@ (8001074 <HAL_TIM_PWM_PulseFinishedCallback+0xf4>)
 800103a:	480f      	ldr	r0, [pc, #60]	@ (8001078 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 800103c:	f003 f9e0 	bl	8004400 <HAL_UART_Transmit>

    			  }

    		  }  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); //ena=0
 8001040:	2201      	movs	r2, #1
 8001042:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001046:	4807      	ldr	r0, [pc, #28]	@ (8001064 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>)
 8001048:	f001 fc5e 	bl	8002908 <HAL_GPIO_WritePin>
    		  HAL_ADC_Start_IT(&hadc1);
 800104c:	4806      	ldr	r0, [pc, #24]	@ (8001068 <HAL_TIM_PWM_PulseFinishedCallback+0xe8>)
 800104e:	f000 fdf1 	bl	8001c34 <HAL_ADC_Start_IT>
    }
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40000400 	.word	0x40000400
 8001060:	20000384 	.word	0x20000384
 8001064:	40010800 	.word	0x40010800
 8001068:	200001f0 	.word	0x200001f0
 800106c:	200002f8 	.word	0x200002f8
 8001070:	08009658 	.word	0x08009658
 8001074:	20000304 	.word	0x20000304
 8001078:	200002b0 	.word	0x200002b0

0800107c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	if(hadc -> Instance == ADC1){
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a18      	ldr	r2, [pc, #96]	@ (80010ec <HAL_ADC_ConvCpltCallback+0x70>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d129      	bne.n	80010e2 <HAL_ADC_ConvCpltCallback+0x66>
		current_adc = HAL_ADC_GetValue(&hadc1);
 800108e:	4818      	ldr	r0, [pc, #96]	@ (80010f0 <HAL_ADC_ConvCpltCallback+0x74>)
 8001090:	f000 fe86 	bl	8001da0 <HAL_ADC_GetValue>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <HAL_ADC_ConvCpltCallback+0x78>)
 800109a:	601a      	str	r2, [r3, #0]

		different_adc = current_adc - last_adc;
 800109c:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <HAL_ADC_ConvCpltCallback+0x78>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <HAL_ADC_ConvCpltCallback+0x7c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	4a15      	ldr	r2, [pc, #84]	@ (80010fc <HAL_ADC_ConvCpltCallback+0x80>)
 80010a8:	6013      	str	r3, [r2, #0]

		if(abs(different_adc) > 100){
 80010aa:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <HAL_ADC_ConvCpltCallback+0x80>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	bfb8      	it	lt
 80010b2:	425b      	neglt	r3, r3
 80010b4:	2b64      	cmp	r3, #100	@ 0x64
 80010b6:	dd14      	ble.n	80010e2 <HAL_ADC_ConvCpltCallback+0x66>

			step_count += (int) (different_adc * 200/4095) ;
 80010b8:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <HAL_ADC_ConvCpltCallback+0x80>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	22c8      	movs	r2, #200	@ 0xc8
 80010be:	fb02 f303 	mul.w	r3, r2, r3
 80010c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001100 <HAL_ADC_ConvCpltCallback+0x84>)
 80010c4:	fb82 1203 	smull	r1, r2, r2, r3
 80010c8:	441a      	add	r2, r3
 80010ca:	12d2      	asrs	r2, r2, #11
 80010cc:	17db      	asrs	r3, r3, #31
 80010ce:	1ad2      	subs	r2, r2, r3
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <HAL_ADC_ConvCpltCallback+0x88>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4413      	add	r3, r2
 80010d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001104 <HAL_ADC_ConvCpltCallback+0x88>)
 80010d8:	6013      	str	r3, [r2, #0]
			last_adc = current_adc;
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <HAL_ADC_ConvCpltCallback+0x78>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a06      	ldr	r2, [pc, #24]	@ (80010f8 <HAL_ADC_ConvCpltCallback+0x7c>)
 80010e0:	6013      	str	r3, [r2, #0]
//		}
//		HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);

		//HAL_ADC_Start_IT(&hadc1);
	}
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40012400 	.word	0x40012400
 80010f0:	200001f0 	.word	0x200001f0
 80010f4:	200002f8 	.word	0x200002f8
 80010f8:	200002fc 	.word	0x200002fc
 80010fc:	20000300 	.word	0x20000300
 8001100:	80080081 	.word	0x80080081
 8001104:	20000384 	.word	0x20000384

08001108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800110c:	b672      	cpsid	i
}
 800110e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <Error_Handler+0x8>

08001114 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <HAL_MspInit+0x5c>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	4a14      	ldr	r2, [pc, #80]	@ (8001170 <HAL_MspInit+0x5c>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6193      	str	r3, [r2, #24]
 8001126:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <HAL_MspInit+0x5c>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <HAL_MspInit+0x5c>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	4a0e      	ldr	r2, [pc, #56]	@ (8001170 <HAL_MspInit+0x5c>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800113c:	61d3      	str	r3, [r2, #28]
 800113e:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <HAL_MspInit+0x5c>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800114a:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <HAL_MspInit+0x60>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	4a04      	ldr	r2, [pc, #16]	@ (8001174 <HAL_MspInit+0x60>)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001166:	bf00      	nop
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	40021000 	.word	0x40021000
 8001174:	40010000 	.word	0x40010000

08001178 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a18      	ldr	r2, [pc, #96]	@ (80011f4 <HAL_ADC_MspInit+0x7c>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d129      	bne.n	80011ec <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001198:	4b17      	ldr	r3, [pc, #92]	@ (80011f8 <HAL_ADC_MspInit+0x80>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a16      	ldr	r2, [pc, #88]	@ (80011f8 <HAL_ADC_MspInit+0x80>)
 800119e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <HAL_ADC_MspInit+0x80>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <HAL_ADC_MspInit+0x80>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a10      	ldr	r2, [pc, #64]	@ (80011f8 <HAL_ADC_MspInit+0x80>)
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <HAL_ADC_MspInit+0x80>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011c8:	2302      	movs	r3, #2
 80011ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011cc:	2303      	movs	r3, #3
 80011ce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	4619      	mov	r1, r3
 80011d6:	4809      	ldr	r0, [pc, #36]	@ (80011fc <HAL_ADC_MspInit+0x84>)
 80011d8:	f001 fa12 	bl	8002600 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	2012      	movs	r0, #18
 80011e2:	f001 f924 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011e6:	2012      	movs	r0, #18
 80011e8:	f001 f93d 	bl	8002466 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80011ec:	bf00      	nop
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40012400 	.word	0x40012400
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010800 	.word	0x40010800

08001200 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001210:	d10b      	bne.n	800122a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001212:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <HAL_TIM_Base_MspInit+0x34>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4a07      	ldr	r2, [pc, #28]	@ (8001234 <HAL_TIM_Base_MspInit+0x34>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	61d3      	str	r3, [r2, #28]
 800121e:	4b05      	ldr	r3, [pc, #20]	@ (8001234 <HAL_TIM_Base_MspInit+0x34>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	40021000 	.word	0x40021000

08001238 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0d      	ldr	r2, [pc, #52]	@ (800127c <HAL_TIM_PWM_MspInit+0x44>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d113      	bne.n	8001272 <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800124a:	4b0d      	ldr	r3, [pc, #52]	@ (8001280 <HAL_TIM_PWM_MspInit+0x48>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	4a0c      	ldr	r2, [pc, #48]	@ (8001280 <HAL_TIM_PWM_MspInit+0x48>)
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	61d3      	str	r3, [r2, #28]
 8001256:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <HAL_TIM_PWM_MspInit+0x48>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	201d      	movs	r0, #29
 8001268:	f001 f8e1 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800126c:	201d      	movs	r0, #29
 800126e:	f001 f8fa 	bl	8002466 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40000400 	.word	0x40000400
 8001280:	40021000 	.word	0x40021000

08001284 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a0f      	ldr	r2, [pc, #60]	@ (80012dc <HAL_TIM_MspPostInit+0x58>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d117      	bne.n	80012d4 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <HAL_TIM_MspPostInit+0x5c>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a0d      	ldr	r2, [pc, #52]	@ (80012e0 <HAL_TIM_MspPostInit+0x5c>)
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <HAL_TIM_MspPostInit+0x5c>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012bc:	2340      	movs	r3, #64	@ 0x40
 80012be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2302      	movs	r3, #2
 80012c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	4619      	mov	r1, r3
 80012ce:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <HAL_TIM_MspPostInit+0x60>)
 80012d0:	f001 f996 	bl	8002600 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	3720      	adds	r7, #32
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40000400 	.word	0x40000400
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010800 	.word	0x40010800

080012e8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a20      	ldr	r2, [pc, #128]	@ (8001384 <HAL_UART_MspInit+0x9c>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d139      	bne.n	800137c <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001308:	4b1f      	ldr	r3, [pc, #124]	@ (8001388 <HAL_UART_MspInit+0xa0>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a1e      	ldr	r2, [pc, #120]	@ (8001388 <HAL_UART_MspInit+0xa0>)
 800130e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <HAL_UART_MspInit+0xa0>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001320:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <HAL_UART_MspInit+0xa0>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a18      	ldr	r2, [pc, #96]	@ (8001388 <HAL_UART_MspInit+0xa0>)
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <HAL_UART_MspInit+0xa0>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001338:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800133c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001342:	2303      	movs	r3, #3
 8001344:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	4619      	mov	r1, r3
 800134c:	480f      	ldr	r0, [pc, #60]	@ (800138c <HAL_UART_MspInit+0xa4>)
 800134e:	f001 f957 	bl	8002600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001352:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001356:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4619      	mov	r1, r3
 8001366:	4809      	ldr	r0, [pc, #36]	@ (800138c <HAL_UART_MspInit+0xa4>)
 8001368:	f001 f94a 	bl	8002600 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2100      	movs	r1, #0
 8001370:	2025      	movs	r0, #37	@ 0x25
 8001372:	f001 f85c 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001376:	2025      	movs	r0, #37	@ 0x25
 8001378:	f001 f875 	bl	8002466 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800137c:	bf00      	nop
 800137e:	3720      	adds	r7, #32
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40013800 	.word	0x40013800
 8001388:	40021000 	.word	0x40021000
 800138c:	40010800 	.word	0x40010800

08001390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <NMI_Handler+0x4>

08001398 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <MemManage_Handler+0x4>

080013a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr

080013d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e0:	f000 f954 	bl	800168c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013ec:	4802      	ldr	r0, [pc, #8]	@ (80013f8 <ADC1_2_IRQHandler+0x10>)
 80013ee:	f000 fce3 	bl	8001db8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200001f0 	.word	0x200001f0

080013fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001400:	4802      	ldr	r0, [pc, #8]	@ (800140c <TIM3_IRQHandler+0x10>)
 8001402:	f002 f9ef 	bl	80037e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000268 	.word	0x20000268

08001410 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001414:	4802      	ldr	r0, [pc, #8]	@ (8001420 <USART1_IRQHandler+0x10>)
 8001416:	f003 f87f 	bl	8004518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200002b0 	.word	0x200002b0

08001424 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return 1;
 8001428:	2301      	movs	r3, #1
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr

08001432 <_kill>:

int _kill(int pid, int sig)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800143c:	f004 fd84 	bl	8005f48 <__errno>
 8001440:	4603      	mov	r3, r0
 8001442:	2216      	movs	r2, #22
 8001444:	601a      	str	r2, [r3, #0]
  return -1;
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <_exit>:

void _exit (int status)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800145a:	f04f 31ff 	mov.w	r1, #4294967295
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ffe7 	bl	8001432 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <_exit+0x12>

08001468 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	e00a      	b.n	8001490 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800147a:	f3af 8000 	nop.w
 800147e:	4601      	mov	r1, r0
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	1c5a      	adds	r2, r3, #1
 8001484:	60ba      	str	r2, [r7, #8]
 8001486:	b2ca      	uxtb	r2, r1
 8001488:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	3301      	adds	r3, #1
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	429a      	cmp	r2, r3
 8001496:	dbf0      	blt.n	800147a <_read+0x12>
  }

  return len;
 8001498:	687b      	ldr	r3, [r7, #4]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	e009      	b.n	80014c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	1c5a      	adds	r2, r3, #1
 80014b8:	60ba      	str	r2, [r7, #8]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3301      	adds	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	dbf1      	blt.n	80014b4 <_write+0x12>
  }
  return len;
 80014d0:	687b      	ldr	r3, [r7, #4]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <_close>:

int _close(int file)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001500:	605a      	str	r2, [r3, #4]
  return 0;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr

0800150e <_isatty>:

int _isatty(int file)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr

08001522 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001522:	b480      	push	{r7}
 8001524:	b085      	sub	sp, #20
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
	...

0800153c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001544:	4a14      	ldr	r2, [pc, #80]	@ (8001598 <_sbrk+0x5c>)
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <_sbrk+0x60>)
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001550:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001558:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <_sbrk+0x64>)
 800155a:	4a12      	ldr	r2, [pc, #72]	@ (80015a4 <_sbrk+0x68>)
 800155c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800155e:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	429a      	cmp	r2, r3
 800156a:	d207      	bcs.n	800157c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800156c:	f004 fcec 	bl	8005f48 <__errno>
 8001570:	4603      	mov	r3, r0
 8001572:	220c      	movs	r2, #12
 8001574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	e009      	b.n	8001590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800157c:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001582:	4b07      	ldr	r3, [pc, #28]	@ (80015a0 <_sbrk+0x64>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	4a05      	ldr	r2, [pc, #20]	@ (80015a0 <_sbrk+0x64>)
 800158c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800158e:	68fb      	ldr	r3, [r7, #12]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20005000 	.word	0x20005000
 800159c:	00000400 	.word	0x00000400
 80015a0:	20000388 	.word	0x20000388
 80015a4:	200004e0 	.word	0x200004e0

080015a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015b4:	f7ff fff8 	bl	80015a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b8:	480b      	ldr	r0, [pc, #44]	@ (80015e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015ba:	490c      	ldr	r1, [pc, #48]	@ (80015ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015bc:	4a0c      	ldr	r2, [pc, #48]	@ (80015f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c0:	e002      	b.n	80015c8 <LoopCopyDataInit>

080015c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c6:	3304      	adds	r3, #4

080015c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015cc:	d3f9      	bcc.n	80015c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ce:	4a09      	ldr	r2, [pc, #36]	@ (80015f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015d0:	4c09      	ldr	r4, [pc, #36]	@ (80015f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d4:	e001      	b.n	80015da <LoopFillZerobss>

080015d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d8:	3204      	adds	r2, #4

080015da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015dc:	d3fb      	bcc.n	80015d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015de:	f004 fcb9 	bl	8005f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015e2:	f7ff faf7 	bl	8000bd4 <main>
  bx lr
 80015e6:	4770      	bx	lr
  ldr r0, =_sdata
 80015e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ec:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80015f0:	08009af4 	.word	0x08009af4
  ldr r2, =_sbss
 80015f4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80015f8:	200004dc 	.word	0x200004dc

080015fc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015fc:	e7fe      	b.n	80015fc <CAN1_RX1_IRQHandler>
	...

08001600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001604:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <HAL_Init+0x28>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a07      	ldr	r2, [pc, #28]	@ (8001628 <HAL_Init+0x28>)
 800160a:	f043 0310 	orr.w	r3, r3, #16
 800160e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001610:	2003      	movs	r0, #3
 8001612:	f000 ff01 	bl	8002418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001616:	200f      	movs	r0, #15
 8001618:	f000 f808 	bl	800162c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800161c:	f7ff fd7a 	bl	8001114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40022000 	.word	0x40022000

0800162c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001634:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <HAL_InitTick+0x54>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <HAL_InitTick+0x58>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	4619      	mov	r1, r3
 800163e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001642:	fbb3 f3f1 	udiv	r3, r3, r1
 8001646:	fbb2 f3f3 	udiv	r3, r2, r3
 800164a:	4618      	mov	r0, r3
 800164c:	f000 ff19 	bl	8002482 <HAL_SYSTICK_Config>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e00e      	b.n	8001678 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b0f      	cmp	r3, #15
 800165e:	d80a      	bhi.n	8001676 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001660:	2200      	movs	r2, #0
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	f04f 30ff 	mov.w	r0, #4294967295
 8001668:	f000 fee1 	bl	800242e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800166c:	4a06      	ldr	r2, [pc, #24]	@ (8001688 <HAL_InitTick+0x5c>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001672:	2300      	movs	r3, #0
 8001674:	e000      	b.n	8001678 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000000 	.word	0x20000000
 8001684:	20000008 	.word	0x20000008
 8001688:	20000004 	.word	0x20000004

0800168c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001690:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <HAL_IncTick+0x1c>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	4b05      	ldr	r3, [pc, #20]	@ (80016ac <HAL_IncTick+0x20>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4413      	add	r3, r2
 800169c:	4a03      	ldr	r2, [pc, #12]	@ (80016ac <HAL_IncTick+0x20>)
 800169e:	6013      	str	r3, [r2, #0]
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	20000008 	.word	0x20000008
 80016ac:	2000038c 	.word	0x2000038c

080016b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return uwTick;
 80016b4:	4b02      	ldr	r3, [pc, #8]	@ (80016c0 <HAL_GetTick+0x10>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	2000038c 	.word	0x2000038c

080016c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0be      	b.n	8001864 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d109      	bne.n	8001708 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff fd38 	bl	8001178 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 fd6f 	bl	80021ec <ADC_ConversionStop_Disable>
 800170e:	4603      	mov	r3, r0
 8001710:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	2b00      	cmp	r3, #0
 800171c:	f040 8099 	bne.w	8001852 <HAL_ADC_Init+0x18e>
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f040 8095 	bne.w	8001852 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001730:	f023 0302 	bic.w	r3, r3, #2
 8001734:	f043 0202 	orr.w	r2, r3, #2
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001744:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7b1b      	ldrb	r3, [r3, #12]
 800174a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800174c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	4313      	orrs	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800175c:	d003      	beq.n	8001766 <HAL_ADC_Init+0xa2>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d102      	bne.n	800176c <HAL_ADC_Init+0xa8>
 8001766:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800176a:	e000      	b.n	800176e <HAL_ADC_Init+0xaa>
 800176c:	2300      	movs	r3, #0
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7d1b      	ldrb	r3, [r3, #20]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d119      	bne.n	80017b0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7b1b      	ldrb	r3, [r3, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d109      	bne.n	8001798 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	3b01      	subs	r3, #1
 800178a:	035a      	lsls	r2, r3, #13
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	e00b      	b.n	80017b0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179c:	f043 0220 	orr.w	r2, r3, #32
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a8:	f043 0201 	orr.w	r2, r3, #1
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	4b28      	ldr	r3, [pc, #160]	@ (800186c <HAL_ADC_Init+0x1a8>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	68b9      	ldr	r1, [r7, #8]
 80017d4:	430b      	orrs	r3, r1
 80017d6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017e0:	d003      	beq.n	80017ea <HAL_ADC_Init+0x126>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d104      	bne.n	80017f4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	051b      	lsls	r3, r3, #20
 80017f2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fa:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	430a      	orrs	r2, r1
 8001806:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	4b18      	ldr	r3, [pc, #96]	@ (8001870 <HAL_ADC_Init+0x1ac>)
 8001810:	4013      	ands	r3, r2
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	429a      	cmp	r2, r3
 8001816:	d10b      	bne.n	8001830 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001822:	f023 0303 	bic.w	r3, r3, #3
 8001826:	f043 0201 	orr.w	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800182e:	e018      	b.n	8001862 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001834:	f023 0312 	bic.w	r3, r3, #18
 8001838:	f043 0210 	orr.w	r2, r3, #16
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001844:	f043 0201 	orr.w	r2, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001850:	e007      	b.n	8001862 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001856:	f043 0210 	orr.w	r2, r3, #16
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001862:	7dfb      	ldrb	r3, [r7, #23]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	ffe1f7fd 	.word	0xffe1f7fd
 8001870:	ff1f0efe 	.word	0xff1f0efe

08001874 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_ADC_Start+0x1a>
 800188a:	2302      	movs	r3, #2
 800188c:	e098      	b.n	80019c0 <HAL_ADC_Start+0x14c>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 fc4e 	bl	8002138 <ADC_Enable>
 800189c:	4603      	mov	r3, r0
 800189e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f040 8087 	bne.w	80019b6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018b0:	f023 0301 	bic.w	r3, r3, #1
 80018b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a41      	ldr	r2, [pc, #260]	@ (80019c8 <HAL_ADC_Start+0x154>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d105      	bne.n	80018d2 <HAL_ADC_Start+0x5e>
 80018c6:	4b41      	ldr	r3, [pc, #260]	@ (80019cc <HAL_ADC_Start+0x158>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d115      	bne.n	80018fe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d026      	beq.n	800193a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018fc:	e01d      	b.n	800193a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001902:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a2f      	ldr	r2, [pc, #188]	@ (80019cc <HAL_ADC_Start+0x158>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d004      	beq.n	800191e <HAL_ADC_Start+0xaa>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a2b      	ldr	r2, [pc, #172]	@ (80019c8 <HAL_ADC_Start+0x154>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d10d      	bne.n	800193a <HAL_ADC_Start+0xc6>
 800191e:	4b2b      	ldr	r3, [pc, #172]	@ (80019cc <HAL_ADC_Start+0x158>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001926:	2b00      	cmp	r3, #0
 8001928:	d007      	beq.n	800193a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001932:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800193e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d006      	beq.n	8001954 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194a:	f023 0206 	bic.w	r2, r3, #6
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001952:	e002      	b.n	800195a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f06f 0202 	mvn.w	r2, #2
 800196a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001976:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800197a:	d113      	bne.n	80019a4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001980:	4a11      	ldr	r2, [pc, #68]	@ (80019c8 <HAL_ADC_Start+0x154>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d105      	bne.n	8001992 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001986:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <HAL_ADC_Start+0x158>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800198e:	2b00      	cmp	r3, #0
 8001990:	d108      	bne.n	80019a4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	e00c      	b.n	80019be <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	e003      	b.n	80019be <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80019be:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40012800 	.word	0x40012800
 80019cc:	40012400 	.word	0x40012400

080019d0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_ADC_Stop+0x1a>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e01a      	b.n	8001a20 <HAL_ADC_Stop+0x50>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 fbfa 	bl	80021ec <ADC_ConversionStop_Disable>
 80019f8:	4603      	mov	r3, r0
 80019fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d109      	bne.n	8001a16 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a06:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a0a:	f023 0301 	bic.w	r3, r3, #1
 8001a0e:	f043 0201 	orr.w	r2, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a28:	b590      	push	{r4, r7, lr}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a3e:	f7ff fe37 	bl	80016b0 <HAL_GetTick>
 8001a42:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00b      	beq.n	8001a6a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a56:	f043 0220 	orr.w	r2, r3, #32
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e0d3      	b.n	8001c12 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d131      	bne.n	8001adc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a7e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d12a      	bne.n	8001adc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a86:	e021      	b.n	8001acc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8e:	d01d      	beq.n	8001acc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d007      	beq.n	8001aa6 <HAL_ADC_PollForConversion+0x7e>
 8001a96:	f7ff fe0b 	bl	80016b0 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d212      	bcs.n	8001acc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d10b      	bne.n	8001acc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab8:	f043 0204 	orr.w	r2, r3, #4
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e0a2      	b.n	8001c12 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0d6      	beq.n	8001a88 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ada:	e070      	b.n	8001bbe <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001adc:	4b4f      	ldr	r3, [pc, #316]	@ (8001c1c <HAL_ADC_PollForConversion+0x1f4>)
 8001ade:	681c      	ldr	r4, [r3, #0]
 8001ae0:	2002      	movs	r0, #2
 8001ae2:	f001 fbef 	bl	80032c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6919      	ldr	r1, [r3, #16]
 8001af2:	4b4b      	ldr	r3, [pc, #300]	@ (8001c20 <HAL_ADC_PollForConversion+0x1f8>)
 8001af4:	400b      	ands	r3, r1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d118      	bne.n	8001b2c <HAL_ADC_PollForConversion+0x104>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68d9      	ldr	r1, [r3, #12]
 8001b00:	4b48      	ldr	r3, [pc, #288]	@ (8001c24 <HAL_ADC_PollForConversion+0x1fc>)
 8001b02:	400b      	ands	r3, r1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d111      	bne.n	8001b2c <HAL_ADC_PollForConversion+0x104>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6919      	ldr	r1, [r3, #16]
 8001b0e:	4b46      	ldr	r3, [pc, #280]	@ (8001c28 <HAL_ADC_PollForConversion+0x200>)
 8001b10:	400b      	ands	r3, r1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d108      	bne.n	8001b28 <HAL_ADC_PollForConversion+0x100>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68d9      	ldr	r1, [r3, #12]
 8001b1c:	4b43      	ldr	r3, [pc, #268]	@ (8001c2c <HAL_ADC_PollForConversion+0x204>)
 8001b1e:	400b      	ands	r3, r1
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_ADC_PollForConversion+0x100>
 8001b24:	2314      	movs	r3, #20
 8001b26:	e020      	b.n	8001b6a <HAL_ADC_PollForConversion+0x142>
 8001b28:	2329      	movs	r3, #41	@ 0x29
 8001b2a:	e01e      	b.n	8001b6a <HAL_ADC_PollForConversion+0x142>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6919      	ldr	r1, [r3, #16]
 8001b32:	4b3d      	ldr	r3, [pc, #244]	@ (8001c28 <HAL_ADC_PollForConversion+0x200>)
 8001b34:	400b      	ands	r3, r1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d106      	bne.n	8001b48 <HAL_ADC_PollForConversion+0x120>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68d9      	ldr	r1, [r3, #12]
 8001b40:	4b3a      	ldr	r3, [pc, #232]	@ (8001c2c <HAL_ADC_PollForConversion+0x204>)
 8001b42:	400b      	ands	r3, r1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00d      	beq.n	8001b64 <HAL_ADC_PollForConversion+0x13c>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6919      	ldr	r1, [r3, #16]
 8001b4e:	4b38      	ldr	r3, [pc, #224]	@ (8001c30 <HAL_ADC_PollForConversion+0x208>)
 8001b50:	400b      	ands	r3, r1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d108      	bne.n	8001b68 <HAL_ADC_PollForConversion+0x140>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68d9      	ldr	r1, [r3, #12]
 8001b5c:	4b34      	ldr	r3, [pc, #208]	@ (8001c30 <HAL_ADC_PollForConversion+0x208>)
 8001b5e:	400b      	ands	r3, r1
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_ADC_PollForConversion+0x140>
 8001b64:	2354      	movs	r3, #84	@ 0x54
 8001b66:	e000      	b.n	8001b6a <HAL_ADC_PollForConversion+0x142>
 8001b68:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001b6a:	fb02 f303 	mul.w	r3, r2, r3
 8001b6e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b70:	e021      	b.n	8001bb6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b78:	d01a      	beq.n	8001bb0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d007      	beq.n	8001b90 <HAL_ADC_PollForConversion+0x168>
 8001b80:	f7ff fd96 	bl	80016b0 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d20f      	bcs.n	8001bb0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d90b      	bls.n	8001bb0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9c:	f043 0204 	orr.w	r2, r3, #4
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e030      	b.n	8001c12 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d8d9      	bhi.n	8001b72 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f06f 0212 	mvn.w	r2, #18
 8001bc6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bcc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001bde:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001be2:	d115      	bne.n	8001c10 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d111      	bne.n	8001c10 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d105      	bne.n	8001c10 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c08:	f043 0201 	orr.w	r2, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	371c      	adds	r7, #28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd90      	pop	{r4, r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	24924924 	.word	0x24924924
 8001c24:	00924924 	.word	0x00924924
 8001c28:	12492492 	.word	0x12492492
 8001c2c:	00492492 	.word	0x00492492
 8001c30:	00249249 	.word	0x00249249

08001c34 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_ADC_Start_IT+0x1a>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e0a0      	b.n	8001d90 <HAL_ADC_Start_IT+0x15c>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 fa6e 	bl	8002138 <ADC_Enable>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f040 808f 	bne.w	8001d86 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a45      	ldr	r2, [pc, #276]	@ (8001d98 <HAL_ADC_Start_IT+0x164>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d105      	bne.n	8001c92 <HAL_ADC_Start_IT+0x5e>
 8001c86:	4b45      	ldr	r3, [pc, #276]	@ (8001d9c <HAL_ADC_Start_IT+0x168>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d115      	bne.n	8001cbe <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c96:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d026      	beq.n	8001cfa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001cb4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cbc:	e01d      	b.n	8001cfa <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a33      	ldr	r2, [pc, #204]	@ (8001d9c <HAL_ADC_Start_IT+0x168>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d004      	beq.n	8001cde <HAL_ADC_Start_IT+0xaa>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a2f      	ldr	r2, [pc, #188]	@ (8001d98 <HAL_ADC_Start_IT+0x164>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d10d      	bne.n	8001cfa <HAL_ADC_Start_IT+0xc6>
 8001cde:	4b2f      	ldr	r3, [pc, #188]	@ (8001d9c <HAL_ADC_Start_IT+0x168>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001cf2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d006      	beq.n	8001d14 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0a:	f023 0206 	bic.w	r2, r3, #6
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d12:	e002      	b.n	8001d1a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f06f 0202 	mvn.w	r2, #2
 8001d2a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0220 	orr.w	r2, r2, #32
 8001d3a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001d46:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001d4a:	d113      	bne.n	8001d74 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d50:	4a11      	ldr	r2, [pc, #68]	@ (8001d98 <HAL_ADC_Start_IT+0x164>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d105      	bne.n	8001d62 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d56:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <HAL_ADC_Start_IT+0x168>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d108      	bne.n	8001d74 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	e00c      	b.n	8001d8e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	e003      	b.n	8001d8e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40012800 	.word	0x40012800
 8001d9c:	40012400 	.word	0x40012400

08001da0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f003 0320 	and.w	r3, r3, #32
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d03e      	beq.n	8001e58 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d039      	beq.n	8001e58 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d105      	bne.n	8001dfc <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001e06:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e0a:	d11d      	bne.n	8001e48 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d119      	bne.n	8001e48 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0220 	bic.w	r2, r2, #32
 8001e22:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d105      	bne.n	8001e48 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e40:	f043 0201 	orr.w	r2, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff f917 	bl	800107c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f06f 0212 	mvn.w	r2, #18
 8001e56:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d04d      	beq.n	8001efe <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d048      	beq.n	8001efe <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e70:	f003 0310 	and.w	r3, r3, #16
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d105      	bne.n	8001e84 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001e8e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001e92:	d012      	beq.n	8001eba <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d125      	bne.n	8001eee <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001eac:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001eb0:	d11d      	bne.n	8001eee <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d119      	bne.n	8001eee <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ec8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ece:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d105      	bne.n	8001eee <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee6:	f043 0201 	orr.w	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f9bd 	bl	800226e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 020c 	mvn.w	r2, #12
 8001efc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d012      	beq.n	8001f2e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00d      	beq.n	8001f2e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f16:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f809 	bl	8001f36 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0201 	mvn.w	r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x20>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e0dc      	b.n	8002122 <HAL_ADC_ConfigChannel+0x1da>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b06      	cmp	r3, #6
 8001f76:	d81c      	bhi.n	8001fb2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	3b05      	subs	r3, #5
 8001f8a:	221f      	movs	r2, #31
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	4019      	ands	r1, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3b05      	subs	r3, #5
 8001fa4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fb0:	e03c      	b.n	800202c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b0c      	cmp	r3, #12
 8001fb8:	d81c      	bhi.n	8001ff4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	3b23      	subs	r3, #35	@ 0x23
 8001fcc:	221f      	movs	r2, #31
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	4019      	ands	r1, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3b23      	subs	r3, #35	@ 0x23
 8001fe6:	fa00 f203 	lsl.w	r2, r0, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ff2:	e01b      	b.n	800202c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	3b41      	subs	r3, #65	@ 0x41
 8002006:	221f      	movs	r2, #31
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	4019      	ands	r1, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	3b41      	subs	r3, #65	@ 0x41
 8002020:	fa00 f203 	lsl.w	r2, r0, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b09      	cmp	r3, #9
 8002032:	d91c      	bls.n	800206e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68d9      	ldr	r1, [r3, #12]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4613      	mov	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4413      	add	r3, r2
 8002044:	3b1e      	subs	r3, #30
 8002046:	2207      	movs	r2, #7
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	4019      	ands	r1, r3
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6898      	ldr	r0, [r3, #8]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4613      	mov	r3, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	4413      	add	r3, r2
 800205e:	3b1e      	subs	r3, #30
 8002060:	fa00 f203 	lsl.w	r2, r0, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	60da      	str	r2, [r3, #12]
 800206c:	e019      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6919      	ldr	r1, [r3, #16]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4613      	mov	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4413      	add	r3, r2
 800207e:	2207      	movs	r2, #7
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	4019      	ands	r1, r3
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	6898      	ldr	r0, [r3, #8]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4613      	mov	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4413      	add	r3, r2
 8002096:	fa00 f203 	lsl.w	r2, r0, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b10      	cmp	r3, #16
 80020a8:	d003      	beq.n	80020b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020ae:	2b11      	cmp	r3, #17
 80020b0:	d132      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a1d      	ldr	r2, [pc, #116]	@ (800212c <HAL_ADC_ConfigChannel+0x1e4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d125      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d126      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80020d8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b10      	cmp	r3, #16
 80020e0:	d11a      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020e2:	4b13      	ldr	r3, [pc, #76]	@ (8002130 <HAL_ADC_ConfigChannel+0x1e8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a13      	ldr	r2, [pc, #76]	@ (8002134 <HAL_ADC_ConfigChannel+0x1ec>)
 80020e8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ec:	0c9a      	lsrs	r2, r3, #18
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020f8:	e002      	b.n	8002100 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f9      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x1b2>
 8002106:	e007      	b.n	8002118 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210c:	f043 0220 	orr.w	r2, r3, #32
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002120:	7bfb      	ldrb	r3, [r7, #15]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	40012400 	.word	0x40012400
 8002130:	20000000 	.word	0x20000000
 8002134:	431bde83 	.word	0x431bde83

08002138 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b01      	cmp	r3, #1
 8002154:	d040      	beq.n	80021d8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f042 0201 	orr.w	r2, r2, #1
 8002164:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002166:	4b1f      	ldr	r3, [pc, #124]	@ (80021e4 <ADC_Enable+0xac>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a1f      	ldr	r2, [pc, #124]	@ (80021e8 <ADC_Enable+0xb0>)
 800216c:	fba2 2303 	umull	r2, r3, r2, r3
 8002170:	0c9b      	lsrs	r3, r3, #18
 8002172:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002174:	e002      	b.n	800217c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	3b01      	subs	r3, #1
 800217a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f9      	bne.n	8002176 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002182:	f7ff fa95 	bl	80016b0 <HAL_GetTick>
 8002186:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002188:	e01f      	b.n	80021ca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800218a:	f7ff fa91 	bl	80016b0 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d918      	bls.n	80021ca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d011      	beq.n	80021ca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021aa:	f043 0210 	orr.w	r2, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b6:	f043 0201 	orr.w	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e007      	b.n	80021da <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d1d8      	bne.n	800218a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000000 	.word	0x20000000
 80021e8:	431bde83 	.word	0x431bde83

080021ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b01      	cmp	r3, #1
 8002204:	d12e      	bne.n	8002264 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0201 	bic.w	r2, r2, #1
 8002214:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002216:	f7ff fa4b 	bl	80016b0 <HAL_GetTick>
 800221a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800221c:	e01b      	b.n	8002256 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800221e:	f7ff fa47 	bl	80016b0 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d914      	bls.n	8002256 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b01      	cmp	r3, #1
 8002238:	d10d      	bne.n	8002256 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223e:	f043 0210 	orr.w	r2, r3, #16
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224a:	f043 0201 	orr.w	r2, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e007      	b.n	8002266 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b01      	cmp	r3, #1
 8002262:	d0dc      	beq.n	800221e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002290:	4b0c      	ldr	r3, [pc, #48]	@ (80022c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800229c:	4013      	ands	r3, r2
 800229e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b2:	4a04      	ldr	r2, [pc, #16]	@ (80022c4 <__NVIC_SetPriorityGrouping+0x44>)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	60d3      	str	r3, [r2, #12]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022cc:	4b04      	ldr	r3, [pc, #16]	@ (80022e0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	f003 0307 	and.w	r3, r3, #7
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	db0b      	blt.n	800230e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	f003 021f 	and.w	r2, r3, #31
 80022fc:	4906      	ldr	r1, [pc, #24]	@ (8002318 <__NVIC_EnableIRQ+0x34>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	2001      	movs	r0, #1
 8002306:	fa00 f202 	lsl.w	r2, r0, r2
 800230a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	e000e100 	.word	0xe000e100

0800231c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	6039      	str	r1, [r7, #0]
 8002326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232c:	2b00      	cmp	r3, #0
 800232e:	db0a      	blt.n	8002346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	b2da      	uxtb	r2, r3
 8002334:	490c      	ldr	r1, [pc, #48]	@ (8002368 <__NVIC_SetPriority+0x4c>)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	0112      	lsls	r2, r2, #4
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	440b      	add	r3, r1
 8002340:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002344:	e00a      	b.n	800235c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4908      	ldr	r1, [pc, #32]	@ (800236c <__NVIC_SetPriority+0x50>)
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	3b04      	subs	r3, #4
 8002354:	0112      	lsls	r2, r2, #4
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	440b      	add	r3, r1
 800235a:	761a      	strb	r2, [r3, #24]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000e100 	.word	0xe000e100
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002370:	b480      	push	{r7}
 8002372:	b089      	sub	sp, #36	@ 0x24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f1c3 0307 	rsb	r3, r3, #7
 800238a:	2b04      	cmp	r3, #4
 800238c:	bf28      	it	cs
 800238e:	2304      	movcs	r3, #4
 8002390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3304      	adds	r3, #4
 8002396:	2b06      	cmp	r3, #6
 8002398:	d902      	bls.n	80023a0 <NVIC_EncodePriority+0x30>
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3b03      	subs	r3, #3
 800239e:	e000      	b.n	80023a2 <NVIC_EncodePriority+0x32>
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a4:	f04f 32ff 	mov.w	r2, #4294967295
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43da      	mvns	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	401a      	ands	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b8:	f04f 31ff 	mov.w	r1, #4294967295
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	43d9      	mvns	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c8:	4313      	orrs	r3, r2
         );
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3724      	adds	r7, #36	@ 0x24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023e4:	d301      	bcc.n	80023ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00f      	b.n	800240a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002414 <SysTick_Config+0x40>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f2:	210f      	movs	r1, #15
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	f7ff ff90 	bl	800231c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023fc:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <SysTick_Config+0x40>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002402:	4b04      	ldr	r3, [pc, #16]	@ (8002414 <SysTick_Config+0x40>)
 8002404:	2207      	movs	r2, #7
 8002406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	e000e010 	.word	0xe000e010

08002418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ff2d 	bl	8002280 <__NVIC_SetPriorityGrouping>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002440:	f7ff ff42 	bl	80022c8 <__NVIC_GetPriorityGrouping>
 8002444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	6978      	ldr	r0, [r7, #20]
 800244c:	f7ff ff90 	bl	8002370 <NVIC_EncodePriority>
 8002450:	4602      	mov	r2, r0
 8002452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff5f 	bl	800231c <__NVIC_SetPriority>
}
 800245e:	bf00      	nop
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff35 	bl	80022e4 <__NVIC_EnableIRQ>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ffa2 	bl	80023d4 <SysTick_Config>
 8002490:	4603      	mov	r3, r0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800249a:	b480      	push	{r7}
 800249c:	b085      	sub	sp, #20
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d008      	beq.n	80024c4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2204      	movs	r2, #4
 80024b6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e020      	b.n	8002506 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 020e 	bic.w	r2, r2, #14
 80024d2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0201 	bic.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ec:	2101      	movs	r1, #1
 80024ee:	fa01 f202 	lsl.w	r2, r1, r2
 80024f2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002504:	7bfb      	ldrb	r3, [r7, #15]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d005      	beq.n	8002534 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2204      	movs	r2, #4
 800252c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
 8002532:	e051      	b.n	80025d8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 020e 	bic.w	r2, r2, #14
 8002542:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0201 	bic.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a22      	ldr	r2, [pc, #136]	@ (80025e4 <HAL_DMA_Abort_IT+0xd4>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d029      	beq.n	80025b2 <HAL_DMA_Abort_IT+0xa2>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a21      	ldr	r2, [pc, #132]	@ (80025e8 <HAL_DMA_Abort_IT+0xd8>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d022      	beq.n	80025ae <HAL_DMA_Abort_IT+0x9e>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a1f      	ldr	r2, [pc, #124]	@ (80025ec <HAL_DMA_Abort_IT+0xdc>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d01a      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x98>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a1e      	ldr	r2, [pc, #120]	@ (80025f0 <HAL_DMA_Abort_IT+0xe0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d012      	beq.n	80025a2 <HAL_DMA_Abort_IT+0x92>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a1c      	ldr	r2, [pc, #112]	@ (80025f4 <HAL_DMA_Abort_IT+0xe4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00a      	beq.n	800259c <HAL_DMA_Abort_IT+0x8c>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a1b      	ldr	r2, [pc, #108]	@ (80025f8 <HAL_DMA_Abort_IT+0xe8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d102      	bne.n	8002596 <HAL_DMA_Abort_IT+0x86>
 8002590:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002594:	e00e      	b.n	80025b4 <HAL_DMA_Abort_IT+0xa4>
 8002596:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800259a:	e00b      	b.n	80025b4 <HAL_DMA_Abort_IT+0xa4>
 800259c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025a0:	e008      	b.n	80025b4 <HAL_DMA_Abort_IT+0xa4>
 80025a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025a6:	e005      	b.n	80025b4 <HAL_DMA_Abort_IT+0xa4>
 80025a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025ac:	e002      	b.n	80025b4 <HAL_DMA_Abort_IT+0xa4>
 80025ae:	2310      	movs	r3, #16
 80025b0:	e000      	b.n	80025b4 <HAL_DMA_Abort_IT+0xa4>
 80025b2:	2301      	movs	r3, #1
 80025b4:	4a11      	ldr	r2, [pc, #68]	@ (80025fc <HAL_DMA_Abort_IT+0xec>)
 80025b6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	4798      	blx	r3
    } 
  }
  return status;
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40020008 	.word	0x40020008
 80025e8:	4002001c 	.word	0x4002001c
 80025ec:	40020030 	.word	0x40020030
 80025f0:	40020044 	.word	0x40020044
 80025f4:	40020058 	.word	0x40020058
 80025f8:	4002006c 	.word	0x4002006c
 80025fc:	40020000 	.word	0x40020000

08002600 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002600:	b480      	push	{r7}
 8002602:	b08b      	sub	sp, #44	@ 0x2c
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800260e:	2300      	movs	r3, #0
 8002610:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002612:	e169      	b.n	80028e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002614:	2201      	movs	r2, #1
 8002616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	69fa      	ldr	r2, [r7, #28]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	429a      	cmp	r2, r3
 800262e:	f040 8158 	bne.w	80028e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4a9a      	ldr	r2, [pc, #616]	@ (80028a0 <HAL_GPIO_Init+0x2a0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d05e      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
 800263c:	4a98      	ldr	r2, [pc, #608]	@ (80028a0 <HAL_GPIO_Init+0x2a0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d875      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 8002642:	4a98      	ldr	r2, [pc, #608]	@ (80028a4 <HAL_GPIO_Init+0x2a4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d058      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
 8002648:	4a96      	ldr	r2, [pc, #600]	@ (80028a4 <HAL_GPIO_Init+0x2a4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d86f      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 800264e:	4a96      	ldr	r2, [pc, #600]	@ (80028a8 <HAL_GPIO_Init+0x2a8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d052      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
 8002654:	4a94      	ldr	r2, [pc, #592]	@ (80028a8 <HAL_GPIO_Init+0x2a8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d869      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 800265a:	4a94      	ldr	r2, [pc, #592]	@ (80028ac <HAL_GPIO_Init+0x2ac>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d04c      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
 8002660:	4a92      	ldr	r2, [pc, #584]	@ (80028ac <HAL_GPIO_Init+0x2ac>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d863      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 8002666:	4a92      	ldr	r2, [pc, #584]	@ (80028b0 <HAL_GPIO_Init+0x2b0>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d046      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
 800266c:	4a90      	ldr	r2, [pc, #576]	@ (80028b0 <HAL_GPIO_Init+0x2b0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d85d      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 8002672:	2b12      	cmp	r3, #18
 8002674:	d82a      	bhi.n	80026cc <HAL_GPIO_Init+0xcc>
 8002676:	2b12      	cmp	r3, #18
 8002678:	d859      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 800267a:	a201      	add	r2, pc, #4	@ (adr r2, 8002680 <HAL_GPIO_Init+0x80>)
 800267c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002680:	080026fb 	.word	0x080026fb
 8002684:	080026d5 	.word	0x080026d5
 8002688:	080026e7 	.word	0x080026e7
 800268c:	08002729 	.word	0x08002729
 8002690:	0800272f 	.word	0x0800272f
 8002694:	0800272f 	.word	0x0800272f
 8002698:	0800272f 	.word	0x0800272f
 800269c:	0800272f 	.word	0x0800272f
 80026a0:	0800272f 	.word	0x0800272f
 80026a4:	0800272f 	.word	0x0800272f
 80026a8:	0800272f 	.word	0x0800272f
 80026ac:	0800272f 	.word	0x0800272f
 80026b0:	0800272f 	.word	0x0800272f
 80026b4:	0800272f 	.word	0x0800272f
 80026b8:	0800272f 	.word	0x0800272f
 80026bc:	0800272f 	.word	0x0800272f
 80026c0:	0800272f 	.word	0x0800272f
 80026c4:	080026dd 	.word	0x080026dd
 80026c8:	080026f1 	.word	0x080026f1
 80026cc:	4a79      	ldr	r2, [pc, #484]	@ (80028b4 <HAL_GPIO_Init+0x2b4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d013      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026d2:	e02c      	b.n	800272e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	623b      	str	r3, [r7, #32]
          break;
 80026da:	e029      	b.n	8002730 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	3304      	adds	r3, #4
 80026e2:	623b      	str	r3, [r7, #32]
          break;
 80026e4:	e024      	b.n	8002730 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	3308      	adds	r3, #8
 80026ec:	623b      	str	r3, [r7, #32]
          break;
 80026ee:	e01f      	b.n	8002730 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	330c      	adds	r3, #12
 80026f6:	623b      	str	r3, [r7, #32]
          break;
 80026f8:	e01a      	b.n	8002730 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d102      	bne.n	8002708 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002702:	2304      	movs	r3, #4
 8002704:	623b      	str	r3, [r7, #32]
          break;
 8002706:	e013      	b.n	8002730 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d105      	bne.n	800271c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002710:	2308      	movs	r3, #8
 8002712:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	611a      	str	r2, [r3, #16]
          break;
 800271a:	e009      	b.n	8002730 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800271c:	2308      	movs	r3, #8
 800271e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69fa      	ldr	r2, [r7, #28]
 8002724:	615a      	str	r2, [r3, #20]
          break;
 8002726:	e003      	b.n	8002730 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002728:	2300      	movs	r3, #0
 800272a:	623b      	str	r3, [r7, #32]
          break;
 800272c:	e000      	b.n	8002730 <HAL_GPIO_Init+0x130>
          break;
 800272e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2bff      	cmp	r3, #255	@ 0xff
 8002734:	d801      	bhi.n	800273a <HAL_GPIO_Init+0x13a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	e001      	b.n	800273e <HAL_GPIO_Init+0x13e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3304      	adds	r3, #4
 800273e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2bff      	cmp	r3, #255	@ 0xff
 8002744:	d802      	bhi.n	800274c <HAL_GPIO_Init+0x14c>
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	e002      	b.n	8002752 <HAL_GPIO_Init+0x152>
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	3b08      	subs	r3, #8
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	210f      	movs	r1, #15
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	fa01 f303 	lsl.w	r3, r1, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	401a      	ands	r2, r3
 8002764:	6a39      	ldr	r1, [r7, #32]
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	fa01 f303 	lsl.w	r3, r1, r3
 800276c:	431a      	orrs	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 80b1 	beq.w	80028e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002780:	4b4d      	ldr	r3, [pc, #308]	@ (80028b8 <HAL_GPIO_Init+0x2b8>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	4a4c      	ldr	r2, [pc, #304]	@ (80028b8 <HAL_GPIO_Init+0x2b8>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6193      	str	r3, [r2, #24]
 800278c:	4b4a      	ldr	r3, [pc, #296]	@ (80028b8 <HAL_GPIO_Init+0x2b8>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002798:	4a48      	ldr	r2, [pc, #288]	@ (80028bc <HAL_GPIO_Init+0x2bc>)
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	089b      	lsrs	r3, r3, #2
 800279e:	3302      	adds	r3, #2
 80027a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	220f      	movs	r2, #15
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4013      	ands	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a40      	ldr	r2, [pc, #256]	@ (80028c0 <HAL_GPIO_Init+0x2c0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d013      	beq.n	80027ec <HAL_GPIO_Init+0x1ec>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a3f      	ldr	r2, [pc, #252]	@ (80028c4 <HAL_GPIO_Init+0x2c4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d00d      	beq.n	80027e8 <HAL_GPIO_Init+0x1e8>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a3e      	ldr	r2, [pc, #248]	@ (80028c8 <HAL_GPIO_Init+0x2c8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d007      	beq.n	80027e4 <HAL_GPIO_Init+0x1e4>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a3d      	ldr	r2, [pc, #244]	@ (80028cc <HAL_GPIO_Init+0x2cc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d101      	bne.n	80027e0 <HAL_GPIO_Init+0x1e0>
 80027dc:	2303      	movs	r3, #3
 80027de:	e006      	b.n	80027ee <HAL_GPIO_Init+0x1ee>
 80027e0:	2304      	movs	r3, #4
 80027e2:	e004      	b.n	80027ee <HAL_GPIO_Init+0x1ee>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e002      	b.n	80027ee <HAL_GPIO_Init+0x1ee>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <HAL_GPIO_Init+0x1ee>
 80027ec:	2300      	movs	r3, #0
 80027ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f0:	f002 0203 	and.w	r2, r2, #3
 80027f4:	0092      	lsls	r2, r2, #2
 80027f6:	4093      	lsls	r3, r2
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027fe:	492f      	ldr	r1, [pc, #188]	@ (80028bc <HAL_GPIO_Init+0x2bc>)
 8002800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002802:	089b      	lsrs	r3, r3, #2
 8002804:	3302      	adds	r3, #2
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d006      	beq.n	8002826 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002818:	4b2d      	ldr	r3, [pc, #180]	@ (80028d0 <HAL_GPIO_Init+0x2d0>)
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	492c      	ldr	r1, [pc, #176]	@ (80028d0 <HAL_GPIO_Init+0x2d0>)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	608b      	str	r3, [r1, #8]
 8002824:	e006      	b.n	8002834 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002826:	4b2a      	ldr	r3, [pc, #168]	@ (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	43db      	mvns	r3, r3
 800282e:	4928      	ldr	r1, [pc, #160]	@ (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002830:	4013      	ands	r3, r2
 8002832:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d006      	beq.n	800284e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002840:	4b23      	ldr	r3, [pc, #140]	@ (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	4922      	ldr	r1, [pc, #136]	@ (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	4313      	orrs	r3, r2
 800284a:	60cb      	str	r3, [r1, #12]
 800284c:	e006      	b.n	800285c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800284e:	4b20      	ldr	r3, [pc, #128]	@ (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	43db      	mvns	r3, r3
 8002856:	491e      	ldr	r1, [pc, #120]	@ (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002858:	4013      	ands	r3, r2
 800285a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d006      	beq.n	8002876 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002868:	4b19      	ldr	r3, [pc, #100]	@ (80028d0 <HAL_GPIO_Init+0x2d0>)
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	4918      	ldr	r1, [pc, #96]	@ (80028d0 <HAL_GPIO_Init+0x2d0>)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
 8002874:	e006      	b.n	8002884 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002876:	4b16      	ldr	r3, [pc, #88]	@ (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	43db      	mvns	r3, r3
 800287e:	4914      	ldr	r1, [pc, #80]	@ (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002880:	4013      	ands	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d021      	beq.n	80028d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002890:	4b0f      	ldr	r3, [pc, #60]	@ (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	490e      	ldr	r1, [pc, #56]	@ (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	600b      	str	r3, [r1, #0]
 800289c:	e021      	b.n	80028e2 <HAL_GPIO_Init+0x2e2>
 800289e:	bf00      	nop
 80028a0:	10320000 	.word	0x10320000
 80028a4:	10310000 	.word	0x10310000
 80028a8:	10220000 	.word	0x10220000
 80028ac:	10210000 	.word	0x10210000
 80028b0:	10120000 	.word	0x10120000
 80028b4:	10110000 	.word	0x10110000
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40010000 	.word	0x40010000
 80028c0:	40010800 	.word	0x40010800
 80028c4:	40010c00 	.word	0x40010c00
 80028c8:	40011000 	.word	0x40011000
 80028cc:	40011400 	.word	0x40011400
 80028d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002904 <HAL_GPIO_Init+0x304>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	43db      	mvns	r3, r3
 80028dc:	4909      	ldr	r1, [pc, #36]	@ (8002904 <HAL_GPIO_Init+0x304>)
 80028de:	4013      	ands	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	3301      	adds	r3, #1
 80028e6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ee:	fa22 f303 	lsr.w	r3, r2, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f47f ae8e 	bne.w	8002614 <HAL_GPIO_Init+0x14>
  }
}
 80028f8:	bf00      	nop
 80028fa:	bf00      	nop
 80028fc:	372c      	adds	r7, #44	@ 0x2c
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	40010400 	.word	0x40010400

08002908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]
 8002914:	4613      	mov	r3, r2
 8002916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002918:	787b      	ldrb	r3, [r7, #1]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800291e:	887a      	ldrh	r2, [r7, #2]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002924:	e003      	b.n	800292e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002926:	887b      	ldrh	r3, [r7, #2]
 8002928:	041a      	lsls	r2, r3, #16
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	611a      	str	r2, [r3, #16]
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e272      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 8087 	beq.w	8002a66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002958:	4b92      	ldr	r3, [pc, #584]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b04      	cmp	r3, #4
 8002962:	d00c      	beq.n	800297e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002964:	4b8f      	ldr	r3, [pc, #572]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 030c 	and.w	r3, r3, #12
 800296c:	2b08      	cmp	r3, #8
 800296e:	d112      	bne.n	8002996 <HAL_RCC_OscConfig+0x5e>
 8002970:	4b8c      	ldr	r3, [pc, #560]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800297c:	d10b      	bne.n	8002996 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297e:	4b89      	ldr	r3, [pc, #548]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d06c      	beq.n	8002a64 <HAL_RCC_OscConfig+0x12c>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d168      	bne.n	8002a64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e24c      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800299e:	d106      	bne.n	80029ae <HAL_RCC_OscConfig+0x76>
 80029a0:	4b80      	ldr	r3, [pc, #512]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a7f      	ldr	r2, [pc, #508]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	e02e      	b.n	8002a0c <HAL_RCC_OscConfig+0xd4>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x98>
 80029b6:	4b7b      	ldr	r3, [pc, #492]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a7a      	ldr	r2, [pc, #488]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	4b78      	ldr	r3, [pc, #480]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a77      	ldr	r2, [pc, #476]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	e01d      	b.n	8002a0c <HAL_RCC_OscConfig+0xd4>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCC_OscConfig+0xbc>
 80029da:	4b72      	ldr	r3, [pc, #456]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a71      	ldr	r2, [pc, #452]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a6e      	ldr	r2, [pc, #440]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e00b      	b.n	8002a0c <HAL_RCC_OscConfig+0xd4>
 80029f4:	4b6b      	ldr	r3, [pc, #428]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a6a      	ldr	r2, [pc, #424]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b68      	ldr	r3, [pc, #416]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a67      	ldr	r2, [pc, #412]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002a06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d013      	beq.n	8002a3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe fe4c 	bl	80016b0 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7fe fe48 	bl	80016b0 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	@ 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e200      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0xe4>
 8002a3a:	e014      	b.n	8002a66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fe38 	bl	80016b0 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a44:	f7fe fe34 	bl	80016b0 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	@ 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e1ec      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a56:	4b53      	ldr	r3, [pc, #332]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x10c>
 8002a62:	e000      	b.n	8002a66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d063      	beq.n	8002b3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a72:	4b4c      	ldr	r3, [pc, #304]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00b      	beq.n	8002a96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a7e:	4b49      	ldr	r3, [pc, #292]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d11c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x18c>
 8002a8a:	4b46      	ldr	r3, [pc, #280]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d116      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a96:	4b43      	ldr	r3, [pc, #268]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <HAL_RCC_OscConfig+0x176>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d001      	beq.n	8002aae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e1c0      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aae:	4b3d      	ldr	r3, [pc, #244]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	4939      	ldr	r1, [pc, #228]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac2:	e03a      	b.n	8002b3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d020      	beq.n	8002b0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002acc:	4b36      	ldr	r3, [pc, #216]	@ (8002ba8 <HAL_RCC_OscConfig+0x270>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad2:	f7fe fded 	bl	80016b0 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ada:	f7fe fde9 	bl	80016b0 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e1a1      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aec:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af8:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4927      	ldr	r1, [pc, #156]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	600b      	str	r3, [r1, #0]
 8002b0c:	e015      	b.n	8002b3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b0e:	4b26      	ldr	r3, [pc, #152]	@ (8002ba8 <HAL_RCC_OscConfig+0x270>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7fe fdcc 	bl	80016b0 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b1c:	f7fe fdc8 	bl	80016b0 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e180      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d03a      	beq.n	8002bbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d019      	beq.n	8002b82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b4e:	4b17      	ldr	r3, [pc, #92]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b54:	f7fe fdac 	bl	80016b0 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b5c:	f7fe fda8 	bl	80016b0 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e160      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	f000 face 	bl	800311c <RCC_Delay>
 8002b80:	e01c      	b.n	8002bbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b82:	4b0a      	ldr	r3, [pc, #40]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b88:	f7fe fd92 	bl	80016b0 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b8e:	e00f      	b.n	8002bb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b90:	f7fe fd8e 	bl	80016b0 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d908      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e146      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	42420000 	.word	0x42420000
 8002bac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb0:	4b92      	ldr	r3, [pc, #584]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1e9      	bne.n	8002b90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80a6 	beq.w	8002d16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bce:	4b8b      	ldr	r3, [pc, #556]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10d      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bda:	4b88      	ldr	r3, [pc, #544]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	4a87      	ldr	r2, [pc, #540]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be4:	61d3      	str	r3, [r2, #28]
 8002be6:	4b85      	ldr	r3, [pc, #532]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf6:	4b82      	ldr	r3, [pc, #520]	@ (8002e00 <HAL_RCC_OscConfig+0x4c8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d118      	bne.n	8002c34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c02:	4b7f      	ldr	r3, [pc, #508]	@ (8002e00 <HAL_RCC_OscConfig+0x4c8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a7e      	ldr	r2, [pc, #504]	@ (8002e00 <HAL_RCC_OscConfig+0x4c8>)
 8002c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0e:	f7fe fd4f 	bl	80016b0 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c16:	f7fe fd4b 	bl	80016b0 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b64      	cmp	r3, #100	@ 0x64
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e103      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c28:	4b75      	ldr	r3, [pc, #468]	@ (8002e00 <HAL_RCC_OscConfig+0x4c8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d106      	bne.n	8002c4a <HAL_RCC_OscConfig+0x312>
 8002c3c:	4b6f      	ldr	r3, [pc, #444]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	4a6e      	ldr	r2, [pc, #440]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	6213      	str	r3, [r2, #32]
 8002c48:	e02d      	b.n	8002ca6 <HAL_RCC_OscConfig+0x36e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x334>
 8002c52:	4b6a      	ldr	r3, [pc, #424]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	4a69      	ldr	r2, [pc, #420]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	f023 0301 	bic.w	r3, r3, #1
 8002c5c:	6213      	str	r3, [r2, #32]
 8002c5e:	4b67      	ldr	r3, [pc, #412]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	4a66      	ldr	r2, [pc, #408]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c64:	f023 0304 	bic.w	r3, r3, #4
 8002c68:	6213      	str	r3, [r2, #32]
 8002c6a:	e01c      	b.n	8002ca6 <HAL_RCC_OscConfig+0x36e>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	2b05      	cmp	r3, #5
 8002c72:	d10c      	bne.n	8002c8e <HAL_RCC_OscConfig+0x356>
 8002c74:	4b61      	ldr	r3, [pc, #388]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	4a60      	ldr	r2, [pc, #384]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c7a:	f043 0304 	orr.w	r3, r3, #4
 8002c7e:	6213      	str	r3, [r2, #32]
 8002c80:	4b5e      	ldr	r3, [pc, #376]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	4a5d      	ldr	r2, [pc, #372]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	6213      	str	r3, [r2, #32]
 8002c8c:	e00b      	b.n	8002ca6 <HAL_RCC_OscConfig+0x36e>
 8002c8e:	4b5b      	ldr	r3, [pc, #364]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	4a5a      	ldr	r2, [pc, #360]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	f023 0301 	bic.w	r3, r3, #1
 8002c98:	6213      	str	r3, [r2, #32]
 8002c9a:	4b58      	ldr	r3, [pc, #352]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	4a57      	ldr	r2, [pc, #348]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002ca0:	f023 0304 	bic.w	r3, r3, #4
 8002ca4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d015      	beq.n	8002cda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cae:	f7fe fcff 	bl	80016b0 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb6:	f7fe fcfb 	bl	80016b0 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e0b1      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ccc:	4b4b      	ldr	r3, [pc, #300]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0ee      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x37e>
 8002cd8:	e014      	b.n	8002d04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cda:	f7fe fce9 	bl	80016b0 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce2:	f7fe fce5 	bl	80016b0 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e09b      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf8:	4b40      	ldr	r3, [pc, #256]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1ee      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d105      	bne.n	8002d16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d0a:	4b3c      	ldr	r3, [pc, #240]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	4a3b      	ldr	r2, [pc, #236]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002d10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 8087 	beq.w	8002e2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d20:	4b36      	ldr	r3, [pc, #216]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 030c 	and.w	r3, r3, #12
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d061      	beq.n	8002df0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d146      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d34:	4b33      	ldr	r3, [pc, #204]	@ (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3a:	f7fe fcb9 	bl	80016b0 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d42:	f7fe fcb5 	bl	80016b0 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e06d      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d54:	4b29      	ldr	r3, [pc, #164]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1f0      	bne.n	8002d42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d68:	d108      	bne.n	8002d7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d6a:	4b24      	ldr	r3, [pc, #144]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	4921      	ldr	r1, [pc, #132]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a19      	ldr	r1, [r3, #32]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	491b      	ldr	r1, [pc, #108]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d94:	4b1b      	ldr	r3, [pc, #108]	@ (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9a:	f7fe fc89 	bl	80016b0 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da2:	f7fe fc85 	bl	80016b0 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e03d      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002db4:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x46a>
 8002dc0:	e035      	b.n	8002e2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc2:	4b10      	ldr	r3, [pc, #64]	@ (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fc72 	bl	80016b0 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd0:	f7fe fc6e 	bl	80016b0 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e026      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de2:	4b06      	ldr	r3, [pc, #24]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x498>
 8002dee:	e01e      	b.n	8002e2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d107      	bne.n	8002e08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e019      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40007000 	.word	0x40007000
 8002e04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e08:	4b0b      	ldr	r3, [pc, #44]	@ (8002e38 <HAL_RCC_OscConfig+0x500>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d106      	bne.n	8002e2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d001      	beq.n	8002e2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40021000 	.word	0x40021000

08002e3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0d0      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e50:	4b6a      	ldr	r3, [pc, #424]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d910      	bls.n	8002e80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5e:	4b67      	ldr	r3, [pc, #412]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 0207 	bic.w	r2, r3, #7
 8002e66:	4965      	ldr	r1, [pc, #404]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	4b63      	ldr	r3, [pc, #396]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0b8      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d020      	beq.n	8002ece <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e98:	4b59      	ldr	r3, [pc, #356]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	4a58      	ldr	r2, [pc, #352]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ea2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eb0:	4b53      	ldr	r3, [pc, #332]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4a52      	ldr	r2, [pc, #328]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002eba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ebc:	4b50      	ldr	r3, [pc, #320]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	494d      	ldr	r1, [pc, #308]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d040      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	4b47      	ldr	r3, [pc, #284]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d115      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e07f      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efa:	4b41      	ldr	r3, [pc, #260]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e073      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e06b      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f1a:	4b39      	ldr	r3, [pc, #228]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f023 0203 	bic.w	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	4936      	ldr	r1, [pc, #216]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f2c:	f7fe fbc0 	bl	80016b0 <HAL_GetTick>
 8002f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f34:	f7fe fbbc 	bl	80016b0 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e053      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	4b2d      	ldr	r3, [pc, #180]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 020c 	and.w	r2, r3, #12
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d1eb      	bne.n	8002f34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f5c:	4b27      	ldr	r3, [pc, #156]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d210      	bcs.n	8002f8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6a:	4b24      	ldr	r3, [pc, #144]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 0207 	bic.w	r2, r3, #7
 8002f72:	4922      	ldr	r1, [pc, #136]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7a:	4b20      	ldr	r3, [pc, #128]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e032      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d008      	beq.n	8002faa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f98:	4b19      	ldr	r3, [pc, #100]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	4916      	ldr	r1, [pc, #88]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fb6:	4b12      	ldr	r3, [pc, #72]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	490e      	ldr	r1, [pc, #56]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fca:	f000 f821 	bl	8003010 <HAL_RCC_GetSysClockFreq>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	490a      	ldr	r1, [pc, #40]	@ (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002fdc:	5ccb      	ldrb	r3, [r1, r3]
 8002fde:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe2:	4a09      	ldr	r2, [pc, #36]	@ (8003008 <HAL_RCC_ClockConfig+0x1cc>)
 8002fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fe6:	4b09      	ldr	r3, [pc, #36]	@ (800300c <HAL_RCC_ClockConfig+0x1d0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe fb1e 	bl	800162c <HAL_InitTick>

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40022000 	.word	0x40022000
 8003000:	40021000 	.word	0x40021000
 8003004:	0800967c 	.word	0x0800967c
 8003008:	20000000 	.word	0x20000000
 800300c:	20000004 	.word	0x20000004

08003010 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	2300      	movs	r3, #0
 8003024:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800302a:	4b1e      	ldr	r3, [pc, #120]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 030c 	and.w	r3, r3, #12
 8003036:	2b04      	cmp	r3, #4
 8003038:	d002      	beq.n	8003040 <HAL_RCC_GetSysClockFreq+0x30>
 800303a:	2b08      	cmp	r3, #8
 800303c:	d003      	beq.n	8003046 <HAL_RCC_GetSysClockFreq+0x36>
 800303e:	e027      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003040:	4b19      	ldr	r3, [pc, #100]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003042:	613b      	str	r3, [r7, #16]
      break;
 8003044:	e027      	b.n	8003096 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	0c9b      	lsrs	r3, r3, #18
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	4a17      	ldr	r2, [pc, #92]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8003050:	5cd3      	ldrb	r3, [r2, r3]
 8003052:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d010      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800305e:	4b11      	ldr	r3, [pc, #68]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	0c5b      	lsrs	r3, r3, #17
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	4a11      	ldr	r2, [pc, #68]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800306a:	5cd3      	ldrb	r3, [r2, r3]
 800306c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a0d      	ldr	r2, [pc, #52]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003072:	fb03 f202 	mul.w	r2, r3, r2
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	fbb2 f3f3 	udiv	r3, r2, r3
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	e004      	b.n	800308a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a0c      	ldr	r2, [pc, #48]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003084:	fb02 f303 	mul.w	r3, r2, r3
 8003088:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	613b      	str	r3, [r7, #16]
      break;
 800308e:	e002      	b.n	8003096 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003090:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003092:	613b      	str	r3, [r7, #16]
      break;
 8003094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003096:	693b      	ldr	r3, [r7, #16]
}
 8003098:	4618      	mov	r0, r3
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40021000 	.word	0x40021000
 80030a8:	007a1200 	.word	0x007a1200
 80030ac:	08009694 	.word	0x08009694
 80030b0:	080096a4 	.word	0x080096a4
 80030b4:	003d0900 	.word	0x003d0900

080030b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030bc:	4b02      	ldr	r3, [pc, #8]	@ (80030c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80030be:	681b      	ldr	r3, [r3, #0]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	20000000 	.word	0x20000000

080030cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030d0:	f7ff fff2 	bl	80030b8 <HAL_RCC_GetHCLKFreq>
 80030d4:	4602      	mov	r2, r0
 80030d6:	4b05      	ldr	r3, [pc, #20]	@ (80030ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	0a1b      	lsrs	r3, r3, #8
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	4903      	ldr	r1, [pc, #12]	@ (80030f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030e2:	5ccb      	ldrb	r3, [r1, r3]
 80030e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40021000 	.word	0x40021000
 80030f0:	0800968c 	.word	0x0800968c

080030f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030f8:	f7ff ffde 	bl	80030b8 <HAL_RCC_GetHCLKFreq>
 80030fc:	4602      	mov	r2, r0
 80030fe:	4b05      	ldr	r3, [pc, #20]	@ (8003114 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	0adb      	lsrs	r3, r3, #11
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	4903      	ldr	r1, [pc, #12]	@ (8003118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800310a:	5ccb      	ldrb	r3, [r1, r3]
 800310c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003110:	4618      	mov	r0, r3
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40021000 	.word	0x40021000
 8003118:	0800968c 	.word	0x0800968c

0800311c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003124:	4b0a      	ldr	r3, [pc, #40]	@ (8003150 <RCC_Delay+0x34>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a0a      	ldr	r2, [pc, #40]	@ (8003154 <RCC_Delay+0x38>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	0a5b      	lsrs	r3, r3, #9
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	fb02 f303 	mul.w	r3, r2, r3
 8003136:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003138:	bf00      	nop
  }
  while (Delay --);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1e5a      	subs	r2, r3, #1
 800313e:	60fa      	str	r2, [r7, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1f9      	bne.n	8003138 <RCC_Delay+0x1c>
}
 8003144:	bf00      	nop
 8003146:	bf00      	nop
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr
 8003150:	20000000 	.word	0x20000000
 8003154:	10624dd3 	.word	0x10624dd3

08003158 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	2300      	movs	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d07d      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003174:	2300      	movs	r3, #0
 8003176:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003178:	4b4f      	ldr	r3, [pc, #316]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10d      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003184:	4b4c      	ldr	r3, [pc, #304]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	4a4b      	ldr	r2, [pc, #300]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800318e:	61d3      	str	r3, [r2, #28]
 8003190:	4b49      	ldr	r3, [pc, #292]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800319c:	2301      	movs	r3, #1
 800319e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a0:	4b46      	ldr	r3, [pc, #280]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d118      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ac:	4b43      	ldr	r3, [pc, #268]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a42      	ldr	r2, [pc, #264]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031b8:	f7fe fa7a 	bl	80016b0 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031be:	e008      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c0:	f7fe fa76 	bl	80016b0 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	@ 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e06d      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d2:	4b3a      	ldr	r3, [pc, #232]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031de:	4b36      	ldr	r3, [pc, #216]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d02e      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d027      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031fc:	4b2e      	ldr	r3, [pc, #184]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003204:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003206:	4b2e      	ldr	r3, [pc, #184]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003208:	2201      	movs	r2, #1
 800320a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800320c:	4b2c      	ldr	r3, [pc, #176]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003212:	4a29      	ldr	r2, [pc, #164]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d014      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003222:	f7fe fa45 	bl	80016b0 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003228:	e00a      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322a:	f7fe fa41 	bl	80016b0 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003238:	4293      	cmp	r3, r2
 800323a:	d901      	bls.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e036      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003240:	4b1d      	ldr	r3, [pc, #116]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0ee      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800324c:	4b1a      	ldr	r3, [pc, #104]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4917      	ldr	r1, [pc, #92]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325a:	4313      	orrs	r3, r2
 800325c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800325e:	7dfb      	ldrb	r3, [r7, #23]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d105      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003264:	4b14      	ldr	r3, [pc, #80]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	4a13      	ldr	r2, [pc, #76]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800326e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800327c:	4b0e      	ldr	r3, [pc, #56]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	490b      	ldr	r1, [pc, #44]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328a:	4313      	orrs	r3, r2
 800328c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800329a:	4b07      	ldr	r3, [pc, #28]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	4904      	ldr	r1, [pc, #16]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40007000 	.word	0x40007000
 80032c0:	42420440 	.word	0x42420440

080032c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	2300      	movs	r3, #0
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	2300      	movs	r3, #0
 80032d6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	2300      	movs	r3, #0
 80032de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b10      	cmp	r3, #16
 80032e4:	d00a      	beq.n	80032fc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b10      	cmp	r3, #16
 80032ea:	f200 808a 	bhi.w	8003402 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d045      	beq.n	8003380 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d075      	beq.n	80033e6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80032fa:	e082      	b.n	8003402 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80032fc:	4b46      	ldr	r3, [pc, #280]	@ (8003418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003302:	4b45      	ldr	r3, [pc, #276]	@ (8003418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d07b      	beq.n	8003406 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	0c9b      	lsrs	r3, r3, #18
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	4a41      	ldr	r2, [pc, #260]	@ (800341c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003318:	5cd3      	ldrb	r3, [r2, r3]
 800331a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d015      	beq.n	8003352 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003326:	4b3c      	ldr	r3, [pc, #240]	@ (8003418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	0c5b      	lsrs	r3, r3, #17
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	4a3b      	ldr	r2, [pc, #236]	@ (8003420 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003332:	5cd3      	ldrb	r3, [r2, r3]
 8003334:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00d      	beq.n	800335c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003340:	4a38      	ldr	r2, [pc, #224]	@ (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	fbb2 f2f3 	udiv	r2, r2, r3
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	fb02 f303 	mul.w	r3, r2, r3
 800334e:	61fb      	str	r3, [r7, #28]
 8003350:	e004      	b.n	800335c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4a34      	ldr	r2, [pc, #208]	@ (8003428 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003356:	fb02 f303 	mul.w	r3, r2, r3
 800335a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800335c:	4b2e      	ldr	r3, [pc, #184]	@ (8003418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003364:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003368:	d102      	bne.n	8003370 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	61bb      	str	r3, [r7, #24]
      break;
 800336e:	e04a      	b.n	8003406 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	4a2d      	ldr	r2, [pc, #180]	@ (800342c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	085b      	lsrs	r3, r3, #1
 800337c:	61bb      	str	r3, [r7, #24]
      break;
 800337e:	e042      	b.n	8003406 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003380:	4b25      	ldr	r3, [pc, #148]	@ (8003418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800338c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003390:	d108      	bne.n	80033a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800339c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	e01f      	b.n	80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033ae:	d109      	bne.n	80033c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80033b0:	4b19      	ldr	r3, [pc, #100]	@ (8003418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80033bc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80033c0:	61bb      	str	r3, [r7, #24]
 80033c2:	e00f      	b.n	80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033ce:	d11c      	bne.n	800340a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80033d0:	4b11      	ldr	r3, [pc, #68]	@ (8003418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d016      	beq.n	800340a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80033dc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80033e0:	61bb      	str	r3, [r7, #24]
      break;
 80033e2:	e012      	b.n	800340a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80033e4:	e011      	b.n	800340a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80033e6:	f7ff fe85 	bl	80030f4 <HAL_RCC_GetPCLK2Freq>
 80033ea:	4602      	mov	r2, r0
 80033ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	0b9b      	lsrs	r3, r3, #14
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	3301      	adds	r3, #1
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fe:	61bb      	str	r3, [r7, #24]
      break;
 8003400:	e004      	b.n	800340c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003402:	bf00      	nop
 8003404:	e002      	b.n	800340c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003406:	bf00      	nop
 8003408:	e000      	b.n	800340c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800340a:	bf00      	nop
    }
  }
  return (frequency);
 800340c:	69bb      	ldr	r3, [r7, #24]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3720      	adds	r7, #32
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
 800341c:	080096a8 	.word	0x080096a8
 8003420:	080096b8 	.word	0x080096b8
 8003424:	007a1200 	.word	0x007a1200
 8003428:	003d0900 	.word	0x003d0900
 800342c:	aaaaaaab 	.word	0xaaaaaaab

08003430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e041      	b.n	80034c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fd fed2 	bl	8001200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3304      	adds	r3, #4
 800346c:	4619      	mov	r1, r3
 800346e:	4610      	mov	r0, r2
 8003470:	f000 fc56 	bl	8003d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d001      	beq.n	80034e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e032      	b.n	800354e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a18      	ldr	r2, [pc, #96]	@ (8003558 <HAL_TIM_Base_Start+0x88>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00e      	beq.n	8003518 <HAL_TIM_Base_Start+0x48>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003502:	d009      	beq.n	8003518 <HAL_TIM_Base_Start+0x48>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a14      	ldr	r2, [pc, #80]	@ (800355c <HAL_TIM_Base_Start+0x8c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d004      	beq.n	8003518 <HAL_TIM_Base_Start+0x48>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a13      	ldr	r2, [pc, #76]	@ (8003560 <HAL_TIM_Base_Start+0x90>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d111      	bne.n	800353c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b06      	cmp	r3, #6
 8003528:	d010      	beq.n	800354c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0201 	orr.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353a:	e007      	b.n	800354c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0201 	orr.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr
 8003558:	40012c00 	.word	0x40012c00
 800355c:	40000400 	.word	0x40000400
 8003560:	40000800 	.word	0x40000800

08003564 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e041      	b.n	80035fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fd fe54 	bl	8001238 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3304      	adds	r3, #4
 80035a0:	4619      	mov	r1, r3
 80035a2:	4610      	mov	r0, r2
 80035a4:	f000 fbbc 	bl	8003d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d109      	bne.n	800362c <HAL_TIM_PWM_Start_IT+0x28>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b01      	cmp	r3, #1
 8003622:	bf14      	ite	ne
 8003624:	2301      	movne	r3, #1
 8003626:	2300      	moveq	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	e022      	b.n	8003672 <HAL_TIM_PWM_Start_IT+0x6e>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b04      	cmp	r3, #4
 8003630:	d109      	bne.n	8003646 <HAL_TIM_PWM_Start_IT+0x42>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b01      	cmp	r3, #1
 800363c:	bf14      	ite	ne
 800363e:	2301      	movne	r3, #1
 8003640:	2300      	moveq	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	e015      	b.n	8003672 <HAL_TIM_PWM_Start_IT+0x6e>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b08      	cmp	r3, #8
 800364a:	d109      	bne.n	8003660 <HAL_TIM_PWM_Start_IT+0x5c>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	bf14      	ite	ne
 8003658:	2301      	movne	r3, #1
 800365a:	2300      	moveq	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	e008      	b.n	8003672 <HAL_TIM_PWM_Start_IT+0x6e>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b01      	cmp	r3, #1
 800366a:	bf14      	ite	ne
 800366c:	2301      	movne	r3, #1
 800366e:	2300      	moveq	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e0a9      	b.n	80037ce <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d104      	bne.n	800368a <HAL_TIM_PWM_Start_IT+0x86>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003688:	e013      	b.n	80036b2 <HAL_TIM_PWM_Start_IT+0xae>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b04      	cmp	r3, #4
 800368e:	d104      	bne.n	800369a <HAL_TIM_PWM_Start_IT+0x96>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003698:	e00b      	b.n	80036b2 <HAL_TIM_PWM_Start_IT+0xae>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b08      	cmp	r3, #8
 800369e:	d104      	bne.n	80036aa <HAL_TIM_PWM_Start_IT+0xa6>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036a8:	e003      	b.n	80036b2 <HAL_TIM_PWM_Start_IT+0xae>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2202      	movs	r2, #2
 80036ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b0c      	cmp	r3, #12
 80036b6:	d841      	bhi.n	800373c <HAL_TIM_PWM_Start_IT+0x138>
 80036b8:	a201      	add	r2, pc, #4	@ (adr r2, 80036c0 <HAL_TIM_PWM_Start_IT+0xbc>)
 80036ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036be:	bf00      	nop
 80036c0:	080036f5 	.word	0x080036f5
 80036c4:	0800373d 	.word	0x0800373d
 80036c8:	0800373d 	.word	0x0800373d
 80036cc:	0800373d 	.word	0x0800373d
 80036d0:	08003707 	.word	0x08003707
 80036d4:	0800373d 	.word	0x0800373d
 80036d8:	0800373d 	.word	0x0800373d
 80036dc:	0800373d 	.word	0x0800373d
 80036e0:	08003719 	.word	0x08003719
 80036e4:	0800373d 	.word	0x0800373d
 80036e8:	0800373d 	.word	0x0800373d
 80036ec:	0800373d 	.word	0x0800373d
 80036f0:	0800372b 	.word	0x0800372b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0202 	orr.w	r2, r2, #2
 8003702:	60da      	str	r2, [r3, #12]
      break;
 8003704:	e01d      	b.n	8003742 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0204 	orr.w	r2, r2, #4
 8003714:	60da      	str	r2, [r3, #12]
      break;
 8003716:	e014      	b.n	8003742 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0208 	orr.w	r2, r2, #8
 8003726:	60da      	str	r2, [r3, #12]
      break;
 8003728:	e00b      	b.n	8003742 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0210 	orr.w	r2, r2, #16
 8003738:	60da      	str	r2, [r3, #12]
      break;
 800373a:	e002      	b.n	8003742 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
      break;
 8003740:	bf00      	nop
  }

  if (status == HAL_OK)
 8003742:	7bfb      	ldrb	r3, [r7, #15]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d141      	bne.n	80037cc <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2201      	movs	r2, #1
 800374e:	6839      	ldr	r1, [r7, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f000 fd71 	bl	8004238 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1f      	ldr	r2, [pc, #124]	@ (80037d8 <HAL_TIM_PWM_Start_IT+0x1d4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d107      	bne.n	8003770 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800376e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a18      	ldr	r2, [pc, #96]	@ (80037d8 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00e      	beq.n	8003798 <HAL_TIM_PWM_Start_IT+0x194>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003782:	d009      	beq.n	8003798 <HAL_TIM_PWM_Start_IT+0x194>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a14      	ldr	r2, [pc, #80]	@ (80037dc <HAL_TIM_PWM_Start_IT+0x1d8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d004      	beq.n	8003798 <HAL_TIM_PWM_Start_IT+0x194>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a13      	ldr	r2, [pc, #76]	@ (80037e0 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d111      	bne.n	80037bc <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d010      	beq.n	80037cc <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0201 	orr.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ba:	e007      	b.n	80037cc <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40012c00 	.word	0x40012c00
 80037dc:	40000400 	.word	0x40000400
 80037e0:	40000800 	.word	0x40000800

080037e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d020      	beq.n	8003848 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d01b      	beq.n	8003848 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0202 	mvn.w	r2, #2
 8003818:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fa63 	bl	8003cfa <HAL_TIM_IC_CaptureCallback>
 8003834:	e005      	b.n	8003842 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fa56 	bl	8003ce8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7fd fb9f 	bl	8000f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b00      	cmp	r3, #0
 8003850:	d020      	beq.n	8003894 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01b      	beq.n	8003894 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0204 	mvn.w	r2, #4
 8003864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2202      	movs	r2, #2
 800386a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fa3d 	bl	8003cfa <HAL_TIM_IC_CaptureCallback>
 8003880:	e005      	b.n	800388e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fa30 	bl	8003ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7fd fb79 	bl	8000f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	d020      	beq.n	80038e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d01b      	beq.n	80038e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0208 	mvn.w	r2, #8
 80038b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2204      	movs	r2, #4
 80038b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fa17 	bl	8003cfa <HAL_TIM_IC_CaptureCallback>
 80038cc:	e005      	b.n	80038da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fa0a 	bl	8003ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7fd fb53 	bl	8000f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d020      	beq.n	800392c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d01b      	beq.n	800392c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0210 	mvn.w	r2, #16
 80038fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2208      	movs	r2, #8
 8003902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f9f1 	bl	8003cfa <HAL_TIM_IC_CaptureCallback>
 8003918:	e005      	b.n	8003926 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f9e4 	bl	8003ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7fd fb2d 	bl	8000f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00c      	beq.n	8003950 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d007      	beq.n	8003950 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0201 	mvn.w	r2, #1
 8003948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f9c3 	bl	8003cd6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00c      	beq.n	8003974 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003960:	2b00      	cmp	r3, #0
 8003962:	d007      	beq.n	8003974 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800396c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 fced 	bl	800434e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00c      	beq.n	8003998 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003984:	2b00      	cmp	r3, #0
 8003986:	d007      	beq.n	8003998 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f9ba 	bl	8003d0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00c      	beq.n	80039bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f003 0320 	and.w	r3, r3, #32
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d007      	beq.n	80039bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0220 	mvn.w	r2, #32
 80039b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fcc0 	bl	800433c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039de:	2302      	movs	r3, #2
 80039e0:	e0ae      	b.n	8003b40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b0c      	cmp	r3, #12
 80039ee:	f200 809f 	bhi.w	8003b30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039f2:	a201      	add	r2, pc, #4	@ (adr r2, 80039f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f8:	08003a2d 	.word	0x08003a2d
 80039fc:	08003b31 	.word	0x08003b31
 8003a00:	08003b31 	.word	0x08003b31
 8003a04:	08003b31 	.word	0x08003b31
 8003a08:	08003a6d 	.word	0x08003a6d
 8003a0c:	08003b31 	.word	0x08003b31
 8003a10:	08003b31 	.word	0x08003b31
 8003a14:	08003b31 	.word	0x08003b31
 8003a18:	08003aaf 	.word	0x08003aaf
 8003a1c:	08003b31 	.word	0x08003b31
 8003a20:	08003b31 	.word	0x08003b31
 8003a24:	08003b31 	.word	0x08003b31
 8003a28:	08003aef 	.word	0x08003aef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 f9e2 	bl	8003dfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0208 	orr.w	r2, r2, #8
 8003a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699a      	ldr	r2, [r3, #24]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0204 	bic.w	r2, r2, #4
 8003a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6999      	ldr	r1, [r3, #24]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	691a      	ldr	r2, [r3, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	619a      	str	r2, [r3, #24]
      break;
 8003a6a:	e064      	b.n	8003b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 fa28 	bl	8003ec8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6999      	ldr	r1, [r3, #24]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	021a      	lsls	r2, r3, #8
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	619a      	str	r2, [r3, #24]
      break;
 8003aac:	e043      	b.n	8003b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68b9      	ldr	r1, [r7, #8]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fa71 	bl	8003f9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	69da      	ldr	r2, [r3, #28]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0208 	orr.w	r2, r2, #8
 8003ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69da      	ldr	r2, [r3, #28]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0204 	bic.w	r2, r2, #4
 8003ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69d9      	ldr	r1, [r3, #28]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	61da      	str	r2, [r3, #28]
      break;
 8003aec:	e023      	b.n	8003b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68b9      	ldr	r1, [r7, #8]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fabb 	bl	8004070 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69da      	ldr	r2, [r3, #28]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69d9      	ldr	r1, [r3, #28]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	021a      	lsls	r2, r3, #8
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	61da      	str	r2, [r3, #28]
      break;
 8003b2e:	e002      	b.n	8003b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	75fb      	strb	r3, [r7, #23]
      break;
 8003b34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_TIM_ConfigClockSource+0x1c>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e0b4      	b.n	8003cce <HAL_TIM_ConfigClockSource+0x186>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b9c:	d03e      	beq.n	8003c1c <HAL_TIM_ConfigClockSource+0xd4>
 8003b9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ba2:	f200 8087 	bhi.w	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003baa:	f000 8086 	beq.w	8003cba <HAL_TIM_ConfigClockSource+0x172>
 8003bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bb2:	d87f      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb4:	2b70      	cmp	r3, #112	@ 0x70
 8003bb6:	d01a      	beq.n	8003bee <HAL_TIM_ConfigClockSource+0xa6>
 8003bb8:	2b70      	cmp	r3, #112	@ 0x70
 8003bba:	d87b      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bbc:	2b60      	cmp	r3, #96	@ 0x60
 8003bbe:	d050      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x11a>
 8003bc0:	2b60      	cmp	r3, #96	@ 0x60
 8003bc2:	d877      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc4:	2b50      	cmp	r3, #80	@ 0x50
 8003bc6:	d03c      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0xfa>
 8003bc8:	2b50      	cmp	r3, #80	@ 0x50
 8003bca:	d873      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bcc:	2b40      	cmp	r3, #64	@ 0x40
 8003bce:	d058      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x13a>
 8003bd0:	2b40      	cmp	r3, #64	@ 0x40
 8003bd2:	d86f      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd4:	2b30      	cmp	r3, #48	@ 0x30
 8003bd6:	d064      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8003bd8:	2b30      	cmp	r3, #48	@ 0x30
 8003bda:	d86b      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d060      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d867      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d05c      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d05a      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8003bec:	e062      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bfe:	f000 fafc 	bl	80041fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	609a      	str	r2, [r3, #8]
      break;
 8003c1a:	e04f      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c2c:	f000 fae5 	bl	80041fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c3e:	609a      	str	r2, [r3, #8]
      break;
 8003c40:	e03c      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f000 fa5c 	bl	800410c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2150      	movs	r1, #80	@ 0x50
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fab3 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 8003c60:	e02c      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f000 fa7a 	bl	8004168 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2160      	movs	r1, #96	@ 0x60
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 faa3 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 8003c80:	e01c      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f000 fa3c 	bl	800410c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2140      	movs	r1, #64	@ 0x40
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fa93 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 8003ca0:	e00c      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4619      	mov	r1, r3
 8003cac:	4610      	mov	r0, r2
 8003cae:	f000 fa8a 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 8003cb2:	e003      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb8:	e000      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr

08003cfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr

08003d0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr
	...

08003d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a2f      	ldr	r2, [pc, #188]	@ (8003df0 <TIM_Base_SetConfig+0xd0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00b      	beq.n	8003d50 <TIM_Base_SetConfig+0x30>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d3e:	d007      	beq.n	8003d50 <TIM_Base_SetConfig+0x30>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a2c      	ldr	r2, [pc, #176]	@ (8003df4 <TIM_Base_SetConfig+0xd4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d003      	beq.n	8003d50 <TIM_Base_SetConfig+0x30>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003df8 <TIM_Base_SetConfig+0xd8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d108      	bne.n	8003d62 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a22      	ldr	r2, [pc, #136]	@ (8003df0 <TIM_Base_SetConfig+0xd0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00b      	beq.n	8003d82 <TIM_Base_SetConfig+0x62>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d70:	d007      	beq.n	8003d82 <TIM_Base_SetConfig+0x62>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a1f      	ldr	r2, [pc, #124]	@ (8003df4 <TIM_Base_SetConfig+0xd4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d003      	beq.n	8003d82 <TIM_Base_SetConfig+0x62>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8003df8 <TIM_Base_SetConfig+0xd8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d108      	bne.n	8003d94 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a0d      	ldr	r2, [pc, #52]	@ (8003df0 <TIM_Base_SetConfig+0xd0>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d103      	bne.n	8003dc8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	691a      	ldr	r2, [r3, #16]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d005      	beq.n	8003de6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f023 0201 	bic.w	r2, r3, #1
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	611a      	str	r2, [r3, #16]
  }
}
 8003de6:	bf00      	nop
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr
 8003df0:	40012c00 	.word	0x40012c00
 8003df4:	40000400 	.word	0x40000400
 8003df8:	40000800 	.word	0x40000800

08003dfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	f023 0201 	bic.w	r2, r3, #1
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0303 	bic.w	r3, r3, #3
 8003e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f023 0302 	bic.w	r3, r3, #2
 8003e44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a1c      	ldr	r2, [pc, #112]	@ (8003ec4 <TIM_OC1_SetConfig+0xc8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d10c      	bne.n	8003e72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f023 0308 	bic.w	r3, r3, #8
 8003e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f023 0304 	bic.w	r3, r3, #4
 8003e70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a13      	ldr	r2, [pc, #76]	@ (8003ec4 <TIM_OC1_SetConfig+0xc8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d111      	bne.n	8003e9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	621a      	str	r2, [r3, #32]
}
 8003eb8:	bf00      	nop
 8003eba:	371c      	adds	r7, #28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40012c00 	.word	0x40012c00

08003ec8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	f023 0210 	bic.w	r2, r3, #16
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	021b      	lsls	r3, r3, #8
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f023 0320 	bic.w	r3, r3, #32
 8003f12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a1d      	ldr	r2, [pc, #116]	@ (8003f98 <TIM_OC2_SetConfig+0xd0>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d10d      	bne.n	8003f44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a14      	ldr	r2, [pc, #80]	@ (8003f98 <TIM_OC2_SetConfig+0xd0>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d113      	bne.n	8003f74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	621a      	str	r2, [r3, #32]
}
 8003f8e:	bf00      	nop
 8003f90:	371c      	adds	r7, #28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr
 8003f98:	40012c00 	.word	0x40012c00

08003f9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0303 	bic.w	r3, r3, #3
 8003fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	021b      	lsls	r3, r3, #8
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a1d      	ldr	r2, [pc, #116]	@ (800406c <TIM_OC3_SetConfig+0xd0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d10d      	bne.n	8004016 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004000:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	021b      	lsls	r3, r3, #8
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a14      	ldr	r2, [pc, #80]	@ (800406c <TIM_OC3_SetConfig+0xd0>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d113      	bne.n	8004046 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800402c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4313      	orrs	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	621a      	str	r2, [r3, #32]
}
 8004060:	bf00      	nop
 8004062:	371c      	adds	r7, #28
 8004064:	46bd      	mov	sp, r7
 8004066:	bc80      	pop	{r7}
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40012c00 	.word	0x40012c00

08004070 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800409e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	021b      	lsls	r3, r3, #8
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	031b      	lsls	r3, r3, #12
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a0f      	ldr	r2, [pc, #60]	@ (8004108 <TIM_OC4_SetConfig+0x98>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d109      	bne.n	80040e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	019b      	lsls	r3, r3, #6
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	621a      	str	r2, [r3, #32]
}
 80040fe:	bf00      	nop
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr
 8004108:	40012c00 	.word	0x40012c00

0800410c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f023 0201 	bic.w	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f023 030a 	bic.w	r3, r3, #10
 8004148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	621a      	str	r2, [r3, #32]
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr

08004168 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f023 0210 	bic.w	r2, r3, #16
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	031b      	lsls	r3, r3, #12
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	621a      	str	r2, [r3, #32]
}
 80041bc:	bf00      	nop
 80041be:	371c      	adds	r7, #28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bc80      	pop	{r7}
 80041c4:	4770      	bx	lr

080041c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b085      	sub	sp, #20
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f043 0307 	orr.w	r3, r3, #7
 80041e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	609a      	str	r2, [r3, #8]
}
 80041f0:	bf00      	nop
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr

080041fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b087      	sub	sp, #28
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	607a      	str	r2, [r7, #4]
 8004206:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004214:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	021a      	lsls	r2, r3, #8
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	431a      	orrs	r2, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	4313      	orrs	r3, r2
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	609a      	str	r2, [r3, #8]
}
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f003 031f 	and.w	r3, r3, #31
 800424a:	2201      	movs	r2, #1
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a1a      	ldr	r2, [r3, #32]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	43db      	mvns	r3, r3
 800425a:	401a      	ands	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a1a      	ldr	r2, [r3, #32]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f003 031f 	and.w	r3, r3, #31
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	fa01 f303 	lsl.w	r3, r1, r3
 8004270:	431a      	orrs	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	621a      	str	r2, [r3, #32]
}
 8004276:	bf00      	nop
 8004278:	371c      	adds	r7, #28
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr

08004280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004294:	2302      	movs	r3, #2
 8004296:	e046      	b.n	8004326 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a16      	ldr	r2, [pc, #88]	@ (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00e      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042e4:	d009      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a12      	ldr	r2, [pc, #72]	@ (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d004      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a10      	ldr	r2, [pc, #64]	@ (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d10c      	bne.n	8004314 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004300:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	4313      	orrs	r3, r2
 800430a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40000400 	.word	0x40000400
 8004338:	40000800 	.word	0x40000800

0800433c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr

0800434e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr

08004360 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e042      	b.n	80043f8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d106      	bne.n	800438c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fc ffae 	bl	80012e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2224      	movs	r2, #36	@ 0x24
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fd63 	bl	8004e70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695a      	ldr	r2, [r3, #20]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68da      	ldr	r2, [r3, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	@ 0x28
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	603b      	str	r3, [r7, #0]
 800440c:	4613      	mov	r3, r2
 800440e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b20      	cmp	r3, #32
 800441e:	d175      	bne.n	800450c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <HAL_UART_Transmit+0x2c>
 8004426:	88fb      	ldrh	r3, [r7, #6]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e06e      	b.n	800450e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2221      	movs	r2, #33	@ 0x21
 800443a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800443e:	f7fd f937 	bl	80016b0 <HAL_GetTick>
 8004442:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	88fa      	ldrh	r2, [r7, #6]
 8004448:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	88fa      	ldrh	r2, [r7, #6]
 800444e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004458:	d108      	bne.n	800446c <HAL_UART_Transmit+0x6c>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d104      	bne.n	800446c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004462:	2300      	movs	r3, #0
 8004464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	e003      	b.n	8004474 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004470:	2300      	movs	r3, #0
 8004472:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004474:	e02e      	b.n	80044d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2200      	movs	r2, #0
 800447e:	2180      	movs	r1, #128	@ 0x80
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 fb01 	bl	8004a88 <UART_WaitOnFlagUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e03a      	b.n	800450e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10b      	bne.n	80044b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	3302      	adds	r3, #2
 80044b2:	61bb      	str	r3, [r7, #24]
 80044b4:	e007      	b.n	80044c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	781a      	ldrb	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	3301      	adds	r3, #1
 80044c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1cb      	bne.n	8004476 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2200      	movs	r2, #0
 80044e6:	2140      	movs	r1, #64	@ 0x40
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 facd 	bl	8004a88 <UART_WaitOnFlagUntilTimeout>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e006      	b.n	800450e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	e000      	b.n	800450e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800450c:	2302      	movs	r3, #2
  }
}
 800450e:	4618      	mov	r0, r3
 8004510:	3720      	adds	r7, #32
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b0ba      	sub	sp, #232	@ 0xe8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800453e:	2300      	movs	r3, #0
 8004540:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004544:	2300      	movs	r3, #0
 8004546:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800454a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004556:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10f      	bne.n	800457e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800455e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <HAL_UART_IRQHandler+0x66>
 800456a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fbbc 	bl	8004cf4 <UART_Receive_IT>
      return;
 800457c:	e25b      	b.n	8004a36 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800457e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 80de 	beq.w	8004744 <HAL_UART_IRQHandler+0x22c>
 8004588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d106      	bne.n	80045a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004598:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80d1 	beq.w	8004744 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00b      	beq.n	80045c6 <HAL_UART_IRQHandler+0xae>
 80045ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d005      	beq.n	80045c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045be:	f043 0201 	orr.w	r2, r3, #1
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00b      	beq.n	80045ea <HAL_UART_IRQHandler+0xd2>
 80045d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d005      	beq.n	80045ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e2:	f043 0202 	orr.w	r2, r3, #2
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00b      	beq.n	800460e <HAL_UART_IRQHandler+0xf6>
 80045f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d005      	beq.n	800460e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004606:	f043 0204 	orr.w	r2, r3, #4
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800460e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b00      	cmp	r3, #0
 8004618:	d011      	beq.n	800463e <HAL_UART_IRQHandler+0x126>
 800461a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800461e:	f003 0320 	and.w	r3, r3, #32
 8004622:	2b00      	cmp	r3, #0
 8004624:	d105      	bne.n	8004632 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d005      	beq.n	800463e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004636:	f043 0208 	orr.w	r2, r3, #8
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 81f2 	beq.w	8004a2c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800464c:	f003 0320 	and.w	r3, r3, #32
 8004650:	2b00      	cmp	r3, #0
 8004652:	d008      	beq.n	8004666 <HAL_UART_IRQHandler+0x14e>
 8004654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004658:	f003 0320 	and.w	r3, r3, #32
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fb47 	bl	8004cf4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	bf14      	ite	ne
 8004674:	2301      	movne	r3, #1
 8004676:	2300      	moveq	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004682:	f003 0308 	and.w	r3, r3, #8
 8004686:	2b00      	cmp	r3, #0
 8004688:	d103      	bne.n	8004692 <HAL_UART_IRQHandler+0x17a>
 800468a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800468e:	2b00      	cmp	r3, #0
 8004690:	d04f      	beq.n	8004732 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fa51 	bl	8004b3a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d041      	beq.n	800472a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3314      	adds	r3, #20
 80046ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80046bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3314      	adds	r3, #20
 80046ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80046e2:	e841 2300 	strex	r3, r2, [r1]
 80046e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80046ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1d9      	bne.n	80046a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d013      	beq.n	8004722 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046fe:	4a7e      	ldr	r2, [pc, #504]	@ (80048f8 <HAL_UART_IRQHandler+0x3e0>)
 8004700:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004706:	4618      	mov	r0, r3
 8004708:	f7fd ff02 	bl	8002510 <HAL_DMA_Abort_IT>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d016      	beq.n	8004740 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800471c:	4610      	mov	r0, r2
 800471e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004720:	e00e      	b.n	8004740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f99c 	bl	8004a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004728:	e00a      	b.n	8004740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f998 	bl	8004a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004730:	e006      	b.n	8004740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f994 	bl	8004a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800473e:	e175      	b.n	8004a2c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004740:	bf00      	nop
    return;
 8004742:	e173      	b.n	8004a2c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004748:	2b01      	cmp	r3, #1
 800474a:	f040 814f 	bne.w	80049ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800474e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004752:	f003 0310 	and.w	r3, r3, #16
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 8148 	beq.w	80049ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800475c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8141 	beq.w	80049ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800476a:	2300      	movs	r3, #0
 800476c:	60bb      	str	r3, [r7, #8]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 80b6 	beq.w	80048fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800479c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 8145 	beq.w	8004a30 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047ae:	429a      	cmp	r2, r3
 80047b0:	f080 813e 	bcs.w	8004a30 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	f000 8088 	beq.w	80048d8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	330c      	adds	r3, #12
 80047ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047d6:	e853 3f00 	ldrex	r3, [r3]
 80047da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80047de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	330c      	adds	r3, #12
 80047f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80047f4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004800:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004804:	e841 2300 	strex	r3, r2, [r1]
 8004808:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800480c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1d9      	bne.n	80047c8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3314      	adds	r3, #20
 800481a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004824:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3314      	adds	r3, #20
 8004834:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004838:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800483c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004840:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004844:	e841 2300 	strex	r3, r2, [r1]
 8004848:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800484a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1e1      	bne.n	8004814 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3314      	adds	r3, #20
 8004856:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004858:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800485a:	e853 3f00 	ldrex	r3, [r3]
 800485e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004860:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004862:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004866:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3314      	adds	r3, #20
 8004870:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004874:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004876:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004878:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800487a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800487c:	e841 2300 	strex	r3, r2, [r1]
 8004880:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004882:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1e3      	bne.n	8004850 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2220      	movs	r2, #32
 800488c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	330c      	adds	r3, #12
 800489c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048a0:	e853 3f00 	ldrex	r3, [r3]
 80048a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048a8:	f023 0310 	bic.w	r3, r3, #16
 80048ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80048ba:	65ba      	str	r2, [r7, #88]	@ 0x58
 80048bc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048c2:	e841 2300 	strex	r3, r2, [r1]
 80048c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1e3      	bne.n	8004896 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fd fde1 	bl	800249a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	4619      	mov	r1, r3
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f8bf 	bl	8004a72 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048f4:	e09c      	b.n	8004a30 <HAL_UART_IRQHandler+0x518>
 80048f6:	bf00      	nop
 80048f8:	08004bff 	.word	0x08004bff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004904:	b29b      	uxth	r3, r3
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004910:	b29b      	uxth	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 808e 	beq.w	8004a34 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004918:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 8089 	beq.w	8004a34 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	330c      	adds	r3, #12
 8004928:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004934:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004938:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	330c      	adds	r3, #12
 8004942:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004946:	647a      	str	r2, [r7, #68]	@ 0x44
 8004948:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800494c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e3      	bne.n	8004922 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3314      	adds	r3, #20
 8004960:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	623b      	str	r3, [r7, #32]
   return(result);
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	f023 0301 	bic.w	r3, r3, #1
 8004970:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3314      	adds	r3, #20
 800497a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800497e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004980:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004982:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004984:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004986:	e841 2300 	strex	r3, r2, [r1]
 800498a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800498c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1e3      	bne.n	800495a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	330c      	adds	r3, #12
 80049a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	e853 3f00 	ldrex	r3, [r3]
 80049ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0310 	bic.w	r3, r3, #16
 80049b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	330c      	adds	r3, #12
 80049c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80049c4:	61fa      	str	r2, [r7, #28]
 80049c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c8:	69b9      	ldr	r1, [r7, #24]
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	e841 2300 	strex	r3, r2, [r1]
 80049d0:	617b      	str	r3, [r7, #20]
   return(result);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1e3      	bne.n	80049a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049e2:	4619      	mov	r1, r3
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f844 	bl	8004a72 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049ea:	e023      	b.n	8004a34 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d009      	beq.n	8004a0c <HAL_UART_IRQHandler+0x4f4>
 80049f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f90e 	bl	8004c26 <UART_Transmit_IT>
    return;
 8004a0a:	e014      	b.n	8004a36 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00e      	beq.n	8004a36 <HAL_UART_IRQHandler+0x51e>
 8004a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d008      	beq.n	8004a36 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f94d 	bl	8004cc4 <UART_EndTransmit_IT>
    return;
 8004a2a:	e004      	b.n	8004a36 <HAL_UART_IRQHandler+0x51e>
    return;
 8004a2c:	bf00      	nop
 8004a2e:	e002      	b.n	8004a36 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a30:	bf00      	nop
 8004a32:	e000      	b.n	8004a36 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a34:	bf00      	nop
  }
}
 8004a36:	37e8      	adds	r7, #232	@ 0xe8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bc80      	pop	{r7}
 8004a4c:	4770      	bx	lr

08004a4e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr

08004a60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bc80      	pop	{r7}
 8004a70:	4770      	bx	lr

08004a72 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr

08004a88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	603b      	str	r3, [r7, #0]
 8004a94:	4613      	mov	r3, r2
 8004a96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a98:	e03b      	b.n	8004b12 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d037      	beq.n	8004b12 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa2:	f7fc fe05 	bl	80016b0 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	6a3a      	ldr	r2, [r7, #32]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d302      	bcc.n	8004ab8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e03a      	b.n	8004b32 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d023      	beq.n	8004b12 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b80      	cmp	r3, #128	@ 0x80
 8004ace:	d020      	beq.n	8004b12 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b40      	cmp	r3, #64	@ 0x40
 8004ad4:	d01d      	beq.n	8004b12 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0308 	and.w	r3, r3, #8
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d116      	bne.n	8004b12 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	617b      	str	r3, [r7, #20]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 f81d 	bl	8004b3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2208      	movs	r2, #8
 8004b04:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e00f      	b.n	8004b32 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	bf0c      	ite	eq
 8004b22:	2301      	moveq	r3, #1
 8004b24:	2300      	movne	r3, #0
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	461a      	mov	r2, r3
 8004b2a:	79fb      	ldrb	r3, [r7, #7]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d0b4      	beq.n	8004a9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b095      	sub	sp, #84	@ 0x54
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	330c      	adds	r3, #12
 8004b48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b4c:	e853 3f00 	ldrex	r3, [r3]
 8004b50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	330c      	adds	r3, #12
 8004b60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b62:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b6a:	e841 2300 	strex	r3, r2, [r1]
 8004b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1e5      	bne.n	8004b42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3314      	adds	r3, #20
 8004b7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	e853 3f00 	ldrex	r3, [r3]
 8004b84:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	f023 0301 	bic.w	r3, r3, #1
 8004b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3314      	adds	r3, #20
 8004b94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b9e:	e841 2300 	strex	r3, r2, [r1]
 8004ba2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1e5      	bne.n	8004b76 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d119      	bne.n	8004be6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	330c      	adds	r3, #12
 8004bb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	e853 3f00 	ldrex	r3, [r3]
 8004bc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f023 0310 	bic.w	r3, r3, #16
 8004bc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	330c      	adds	r3, #12
 8004bd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bd2:	61ba      	str	r2, [r7, #24]
 8004bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd6:	6979      	ldr	r1, [r7, #20]
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	613b      	str	r3, [r7, #16]
   return(result);
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1e5      	bne.n	8004bb2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004bf4:	bf00      	nop
 8004bf6:	3754      	adds	r7, #84	@ 0x54
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bc80      	pop	{r7}
 8004bfc:	4770      	bx	lr

08004bfe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b084      	sub	sp, #16
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f7ff ff21 	bl	8004a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c1e:	bf00      	nop
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b085      	sub	sp, #20
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b21      	cmp	r3, #33	@ 0x21
 8004c38:	d13e      	bne.n	8004cb8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c42:	d114      	bne.n	8004c6e <UART_Transmit_IT+0x48>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d110      	bne.n	8004c6e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	1c9a      	adds	r2, r3, #2
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	621a      	str	r2, [r3, #32]
 8004c6c:	e008      	b.n	8004c80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	1c59      	adds	r1, r3, #1
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6211      	str	r1, [r2, #32]
 8004c78:	781a      	ldrb	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10f      	bne.n	8004cb4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ca2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cb2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e000      	b.n	8004cba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cb8:	2302      	movs	r3, #2
  }
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr

08004cc4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7ff fea9 	bl	8004a3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08c      	sub	sp, #48	@ 0x30
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b22      	cmp	r3, #34	@ 0x22
 8004d06:	f040 80ae 	bne.w	8004e66 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d12:	d117      	bne.n	8004d44 <UART_Receive_IT+0x50>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d113      	bne.n	8004d44 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d24:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3c:	1c9a      	adds	r2, r3, #2
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d42:	e026      	b.n	8004d92 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d56:	d007      	beq.n	8004d68 <UART_Receive_IT+0x74>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <UART_Receive_IT+0x82>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d106      	bne.n	8004d76 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d72:	701a      	strb	r2, [r3, #0]
 8004d74:	e008      	b.n	8004d88 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	4619      	mov	r1, r3
 8004da0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d15d      	bne.n	8004e62 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0220 	bic.w	r2, r2, #32
 8004db4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695a      	ldr	r2, [r3, #20]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0201 	bic.w	r2, r2, #1
 8004dd4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d135      	bne.n	8004e58 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	330c      	adds	r3, #12
 8004df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	e853 3f00 	ldrex	r3, [r3]
 8004e00:	613b      	str	r3, [r7, #16]
   return(result);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f023 0310 	bic.w	r3, r3, #16
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	330c      	adds	r3, #12
 8004e10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e12:	623a      	str	r2, [r7, #32]
 8004e14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	69f9      	ldr	r1, [r7, #28]
 8004e18:	6a3a      	ldr	r2, [r7, #32]
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e5      	bne.n	8004df2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0310 	and.w	r3, r3, #16
 8004e30:	2b10      	cmp	r3, #16
 8004e32:	d10a      	bne.n	8004e4a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e34:	2300      	movs	r3, #0
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e4e:	4619      	mov	r1, r3
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7ff fe0e 	bl	8004a72 <HAL_UARTEx_RxEventCallback>
 8004e56:	e002      	b.n	8004e5e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7ff fdf8 	bl	8004a4e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	e002      	b.n	8004e68 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e62:	2300      	movs	r3, #0
 8004e64:	e000      	b.n	8004e68 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e66:	2302      	movs	r3, #2
  }
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3730      	adds	r7, #48	@ 0x30
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004eaa:	f023 030c 	bic.w	r3, r3, #12
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	699a      	ldr	r2, [r3, #24]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a2c      	ldr	r2, [pc, #176]	@ (8004f84 <UART_SetConfig+0x114>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d103      	bne.n	8004ee0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ed8:	f7fe f90c 	bl	80030f4 <HAL_RCC_GetPCLK2Freq>
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	e002      	b.n	8004ee6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ee0:	f7fe f8f4 	bl	80030cc <HAL_RCC_GetPCLK1Freq>
 8004ee4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	009a      	lsls	r2, r3, #2
 8004ef0:	441a      	add	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efc:	4a22      	ldr	r2, [pc, #136]	@ (8004f88 <UART_SetConfig+0x118>)
 8004efe:	fba2 2303 	umull	r2, r3, r2, r3
 8004f02:	095b      	lsrs	r3, r3, #5
 8004f04:	0119      	lsls	r1, r3, #4
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009a      	lsls	r2, r3, #2
 8004f10:	441a      	add	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f88 <UART_SetConfig+0x118>)
 8004f1e:	fba3 0302 	umull	r0, r3, r3, r2
 8004f22:	095b      	lsrs	r3, r3, #5
 8004f24:	2064      	movs	r0, #100	@ 0x64
 8004f26:	fb00 f303 	mul.w	r3, r0, r3
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	3332      	adds	r3, #50	@ 0x32
 8004f30:	4a15      	ldr	r2, [pc, #84]	@ (8004f88 <UART_SetConfig+0x118>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f3c:	4419      	add	r1, r3
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	009a      	lsls	r2, r3, #2
 8004f48:	441a      	add	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f54:	4b0c      	ldr	r3, [pc, #48]	@ (8004f88 <UART_SetConfig+0x118>)
 8004f56:	fba3 0302 	umull	r0, r3, r3, r2
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	2064      	movs	r0, #100	@ 0x64
 8004f5e:	fb00 f303 	mul.w	r3, r0, r3
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	011b      	lsls	r3, r3, #4
 8004f66:	3332      	adds	r3, #50	@ 0x32
 8004f68:	4a07      	ldr	r2, [pc, #28]	@ (8004f88 <UART_SetConfig+0x118>)
 8004f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	f003 020f 	and.w	r2, r3, #15
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	440a      	add	r2, r1
 8004f7a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f7c:	bf00      	nop
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	40013800 	.word	0x40013800
 8004f88:	51eb851f 	.word	0x51eb851f

08004f8c <__cvt>:
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f92:	461d      	mov	r5, r3
 8004f94:	bfbb      	ittet	lt
 8004f96:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004f9a:	461d      	movlt	r5, r3
 8004f9c:	2300      	movge	r3, #0
 8004f9e:	232d      	movlt	r3, #45	@ 0x2d
 8004fa0:	b088      	sub	sp, #32
 8004fa2:	4614      	mov	r4, r2
 8004fa4:	bfb8      	it	lt
 8004fa6:	4614      	movlt	r4, r2
 8004fa8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004faa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004fac:	7013      	strb	r3, [r2, #0]
 8004fae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004fb0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004fb4:	f023 0820 	bic.w	r8, r3, #32
 8004fb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004fbc:	d005      	beq.n	8004fca <__cvt+0x3e>
 8004fbe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004fc2:	d100      	bne.n	8004fc6 <__cvt+0x3a>
 8004fc4:	3601      	adds	r6, #1
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	e000      	b.n	8004fcc <__cvt+0x40>
 8004fca:	2303      	movs	r3, #3
 8004fcc:	aa07      	add	r2, sp, #28
 8004fce:	9204      	str	r2, [sp, #16]
 8004fd0:	aa06      	add	r2, sp, #24
 8004fd2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004fd6:	e9cd 3600 	strd	r3, r6, [sp]
 8004fda:	4622      	mov	r2, r4
 8004fdc:	462b      	mov	r3, r5
 8004fde:	f001 f87b 	bl	80060d8 <_dtoa_r>
 8004fe2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004fe6:	4607      	mov	r7, r0
 8004fe8:	d119      	bne.n	800501e <__cvt+0x92>
 8004fea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004fec:	07db      	lsls	r3, r3, #31
 8004fee:	d50e      	bpl.n	800500e <__cvt+0x82>
 8004ff0:	eb00 0906 	add.w	r9, r0, r6
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	4629      	mov	r1, r5
 8004ffc:	f7fb fcd4 	bl	80009a8 <__aeabi_dcmpeq>
 8005000:	b108      	cbz	r0, 8005006 <__cvt+0x7a>
 8005002:	f8cd 901c 	str.w	r9, [sp, #28]
 8005006:	2230      	movs	r2, #48	@ 0x30
 8005008:	9b07      	ldr	r3, [sp, #28]
 800500a:	454b      	cmp	r3, r9
 800500c:	d31e      	bcc.n	800504c <__cvt+0xc0>
 800500e:	4638      	mov	r0, r7
 8005010:	9b07      	ldr	r3, [sp, #28]
 8005012:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005014:	1bdb      	subs	r3, r3, r7
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	b008      	add	sp, #32
 800501a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800501e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005022:	eb00 0906 	add.w	r9, r0, r6
 8005026:	d1e5      	bne.n	8004ff4 <__cvt+0x68>
 8005028:	7803      	ldrb	r3, [r0, #0]
 800502a:	2b30      	cmp	r3, #48	@ 0x30
 800502c:	d10a      	bne.n	8005044 <__cvt+0xb8>
 800502e:	2200      	movs	r2, #0
 8005030:	2300      	movs	r3, #0
 8005032:	4620      	mov	r0, r4
 8005034:	4629      	mov	r1, r5
 8005036:	f7fb fcb7 	bl	80009a8 <__aeabi_dcmpeq>
 800503a:	b918      	cbnz	r0, 8005044 <__cvt+0xb8>
 800503c:	f1c6 0601 	rsb	r6, r6, #1
 8005040:	f8ca 6000 	str.w	r6, [sl]
 8005044:	f8da 3000 	ldr.w	r3, [sl]
 8005048:	4499      	add	r9, r3
 800504a:	e7d3      	b.n	8004ff4 <__cvt+0x68>
 800504c:	1c59      	adds	r1, r3, #1
 800504e:	9107      	str	r1, [sp, #28]
 8005050:	701a      	strb	r2, [r3, #0]
 8005052:	e7d9      	b.n	8005008 <__cvt+0x7c>

08005054 <__exponent>:
 8005054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005056:	2900      	cmp	r1, #0
 8005058:	bfb6      	itet	lt
 800505a:	232d      	movlt	r3, #45	@ 0x2d
 800505c:	232b      	movge	r3, #43	@ 0x2b
 800505e:	4249      	neglt	r1, r1
 8005060:	2909      	cmp	r1, #9
 8005062:	7002      	strb	r2, [r0, #0]
 8005064:	7043      	strb	r3, [r0, #1]
 8005066:	dd29      	ble.n	80050bc <__exponent+0x68>
 8005068:	f10d 0307 	add.w	r3, sp, #7
 800506c:	461d      	mov	r5, r3
 800506e:	270a      	movs	r7, #10
 8005070:	fbb1 f6f7 	udiv	r6, r1, r7
 8005074:	461a      	mov	r2, r3
 8005076:	fb07 1416 	mls	r4, r7, r6, r1
 800507a:	3430      	adds	r4, #48	@ 0x30
 800507c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005080:	460c      	mov	r4, r1
 8005082:	2c63      	cmp	r4, #99	@ 0x63
 8005084:	4631      	mov	r1, r6
 8005086:	f103 33ff 	add.w	r3, r3, #4294967295
 800508a:	dcf1      	bgt.n	8005070 <__exponent+0x1c>
 800508c:	3130      	adds	r1, #48	@ 0x30
 800508e:	1e94      	subs	r4, r2, #2
 8005090:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005094:	4623      	mov	r3, r4
 8005096:	1c41      	adds	r1, r0, #1
 8005098:	42ab      	cmp	r3, r5
 800509a:	d30a      	bcc.n	80050b2 <__exponent+0x5e>
 800509c:	f10d 0309 	add.w	r3, sp, #9
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	42ac      	cmp	r4, r5
 80050a4:	bf88      	it	hi
 80050a6:	2300      	movhi	r3, #0
 80050a8:	3302      	adds	r3, #2
 80050aa:	4403      	add	r3, r0
 80050ac:	1a18      	subs	r0, r3, r0
 80050ae:	b003      	add	sp, #12
 80050b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80050b6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80050ba:	e7ed      	b.n	8005098 <__exponent+0x44>
 80050bc:	2330      	movs	r3, #48	@ 0x30
 80050be:	3130      	adds	r1, #48	@ 0x30
 80050c0:	7083      	strb	r3, [r0, #2]
 80050c2:	70c1      	strb	r1, [r0, #3]
 80050c4:	1d03      	adds	r3, r0, #4
 80050c6:	e7f1      	b.n	80050ac <__exponent+0x58>

080050c8 <_printf_float>:
 80050c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050cc:	b091      	sub	sp, #68	@ 0x44
 80050ce:	460c      	mov	r4, r1
 80050d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80050d4:	4616      	mov	r6, r2
 80050d6:	461f      	mov	r7, r3
 80050d8:	4605      	mov	r5, r0
 80050da:	f000 feeb 	bl	8005eb4 <_localeconv_r>
 80050de:	6803      	ldr	r3, [r0, #0]
 80050e0:	4618      	mov	r0, r3
 80050e2:	9308      	str	r3, [sp, #32]
 80050e4:	f7fb f834 	bl	8000150 <strlen>
 80050e8:	2300      	movs	r3, #0
 80050ea:	930e      	str	r3, [sp, #56]	@ 0x38
 80050ec:	f8d8 3000 	ldr.w	r3, [r8]
 80050f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80050f2:	3307      	adds	r3, #7
 80050f4:	f023 0307 	bic.w	r3, r3, #7
 80050f8:	f103 0208 	add.w	r2, r3, #8
 80050fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005100:	f8d4 b000 	ldr.w	fp, [r4]
 8005104:	f8c8 2000 	str.w	r2, [r8]
 8005108:	e9d3 8900 	ldrd	r8, r9, [r3]
 800510c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005110:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005112:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005116:	f04f 32ff 	mov.w	r2, #4294967295
 800511a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800511e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005122:	4b9c      	ldr	r3, [pc, #624]	@ (8005394 <_printf_float+0x2cc>)
 8005124:	f7fb fc72 	bl	8000a0c <__aeabi_dcmpun>
 8005128:	bb70      	cbnz	r0, 8005188 <_printf_float+0xc0>
 800512a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800512e:	f04f 32ff 	mov.w	r2, #4294967295
 8005132:	4b98      	ldr	r3, [pc, #608]	@ (8005394 <_printf_float+0x2cc>)
 8005134:	f7fb fc4c 	bl	80009d0 <__aeabi_dcmple>
 8005138:	bb30      	cbnz	r0, 8005188 <_printf_float+0xc0>
 800513a:	2200      	movs	r2, #0
 800513c:	2300      	movs	r3, #0
 800513e:	4640      	mov	r0, r8
 8005140:	4649      	mov	r1, r9
 8005142:	f7fb fc3b 	bl	80009bc <__aeabi_dcmplt>
 8005146:	b110      	cbz	r0, 800514e <_printf_float+0x86>
 8005148:	232d      	movs	r3, #45	@ 0x2d
 800514a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800514e:	4a92      	ldr	r2, [pc, #584]	@ (8005398 <_printf_float+0x2d0>)
 8005150:	4b92      	ldr	r3, [pc, #584]	@ (800539c <_printf_float+0x2d4>)
 8005152:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005156:	bf8c      	ite	hi
 8005158:	4690      	movhi	r8, r2
 800515a:	4698      	movls	r8, r3
 800515c:	2303      	movs	r3, #3
 800515e:	f04f 0900 	mov.w	r9, #0
 8005162:	6123      	str	r3, [r4, #16]
 8005164:	f02b 0304 	bic.w	r3, fp, #4
 8005168:	6023      	str	r3, [r4, #0]
 800516a:	4633      	mov	r3, r6
 800516c:	4621      	mov	r1, r4
 800516e:	4628      	mov	r0, r5
 8005170:	9700      	str	r7, [sp, #0]
 8005172:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005174:	f000 f9d4 	bl	8005520 <_printf_common>
 8005178:	3001      	adds	r0, #1
 800517a:	f040 8090 	bne.w	800529e <_printf_float+0x1d6>
 800517e:	f04f 30ff 	mov.w	r0, #4294967295
 8005182:	b011      	add	sp, #68	@ 0x44
 8005184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005188:	4642      	mov	r2, r8
 800518a:	464b      	mov	r3, r9
 800518c:	4640      	mov	r0, r8
 800518e:	4649      	mov	r1, r9
 8005190:	f7fb fc3c 	bl	8000a0c <__aeabi_dcmpun>
 8005194:	b148      	cbz	r0, 80051aa <_printf_float+0xe2>
 8005196:	464b      	mov	r3, r9
 8005198:	2b00      	cmp	r3, #0
 800519a:	bfb8      	it	lt
 800519c:	232d      	movlt	r3, #45	@ 0x2d
 800519e:	4a80      	ldr	r2, [pc, #512]	@ (80053a0 <_printf_float+0x2d8>)
 80051a0:	bfb8      	it	lt
 80051a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80051a6:	4b7f      	ldr	r3, [pc, #508]	@ (80053a4 <_printf_float+0x2dc>)
 80051a8:	e7d3      	b.n	8005152 <_printf_float+0x8a>
 80051aa:	6863      	ldr	r3, [r4, #4]
 80051ac:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	d13f      	bne.n	8005234 <_printf_float+0x16c>
 80051b4:	2306      	movs	r3, #6
 80051b6:	6063      	str	r3, [r4, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80051be:	6023      	str	r3, [r4, #0]
 80051c0:	9206      	str	r2, [sp, #24]
 80051c2:	aa0e      	add	r2, sp, #56	@ 0x38
 80051c4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80051c8:	aa0d      	add	r2, sp, #52	@ 0x34
 80051ca:	9203      	str	r2, [sp, #12]
 80051cc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80051d0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80051d4:	6863      	ldr	r3, [r4, #4]
 80051d6:	4642      	mov	r2, r8
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	4628      	mov	r0, r5
 80051dc:	464b      	mov	r3, r9
 80051de:	910a      	str	r1, [sp, #40]	@ 0x28
 80051e0:	f7ff fed4 	bl	8004f8c <__cvt>
 80051e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80051e6:	4680      	mov	r8, r0
 80051e8:	2947      	cmp	r1, #71	@ 0x47
 80051ea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80051ec:	d128      	bne.n	8005240 <_printf_float+0x178>
 80051ee:	1cc8      	adds	r0, r1, #3
 80051f0:	db02      	blt.n	80051f8 <_printf_float+0x130>
 80051f2:	6863      	ldr	r3, [r4, #4]
 80051f4:	4299      	cmp	r1, r3
 80051f6:	dd40      	ble.n	800527a <_printf_float+0x1b2>
 80051f8:	f1aa 0a02 	sub.w	sl, sl, #2
 80051fc:	fa5f fa8a 	uxtb.w	sl, sl
 8005200:	4652      	mov	r2, sl
 8005202:	3901      	subs	r1, #1
 8005204:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005208:	910d      	str	r1, [sp, #52]	@ 0x34
 800520a:	f7ff ff23 	bl	8005054 <__exponent>
 800520e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005210:	4681      	mov	r9, r0
 8005212:	1813      	adds	r3, r2, r0
 8005214:	2a01      	cmp	r2, #1
 8005216:	6123      	str	r3, [r4, #16]
 8005218:	dc02      	bgt.n	8005220 <_printf_float+0x158>
 800521a:	6822      	ldr	r2, [r4, #0]
 800521c:	07d2      	lsls	r2, r2, #31
 800521e:	d501      	bpl.n	8005224 <_printf_float+0x15c>
 8005220:	3301      	adds	r3, #1
 8005222:	6123      	str	r3, [r4, #16]
 8005224:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005228:	2b00      	cmp	r3, #0
 800522a:	d09e      	beq.n	800516a <_printf_float+0xa2>
 800522c:	232d      	movs	r3, #45	@ 0x2d
 800522e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005232:	e79a      	b.n	800516a <_printf_float+0xa2>
 8005234:	2947      	cmp	r1, #71	@ 0x47
 8005236:	d1bf      	bne.n	80051b8 <_printf_float+0xf0>
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1bd      	bne.n	80051b8 <_printf_float+0xf0>
 800523c:	2301      	movs	r3, #1
 800523e:	e7ba      	b.n	80051b6 <_printf_float+0xee>
 8005240:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005244:	d9dc      	bls.n	8005200 <_printf_float+0x138>
 8005246:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800524a:	d118      	bne.n	800527e <_printf_float+0x1b6>
 800524c:	2900      	cmp	r1, #0
 800524e:	6863      	ldr	r3, [r4, #4]
 8005250:	dd0b      	ble.n	800526a <_printf_float+0x1a2>
 8005252:	6121      	str	r1, [r4, #16]
 8005254:	b913      	cbnz	r3, 800525c <_printf_float+0x194>
 8005256:	6822      	ldr	r2, [r4, #0]
 8005258:	07d0      	lsls	r0, r2, #31
 800525a:	d502      	bpl.n	8005262 <_printf_float+0x19a>
 800525c:	3301      	adds	r3, #1
 800525e:	440b      	add	r3, r1
 8005260:	6123      	str	r3, [r4, #16]
 8005262:	f04f 0900 	mov.w	r9, #0
 8005266:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005268:	e7dc      	b.n	8005224 <_printf_float+0x15c>
 800526a:	b913      	cbnz	r3, 8005272 <_printf_float+0x1aa>
 800526c:	6822      	ldr	r2, [r4, #0]
 800526e:	07d2      	lsls	r2, r2, #31
 8005270:	d501      	bpl.n	8005276 <_printf_float+0x1ae>
 8005272:	3302      	adds	r3, #2
 8005274:	e7f4      	b.n	8005260 <_printf_float+0x198>
 8005276:	2301      	movs	r3, #1
 8005278:	e7f2      	b.n	8005260 <_printf_float+0x198>
 800527a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800527e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005280:	4299      	cmp	r1, r3
 8005282:	db05      	blt.n	8005290 <_printf_float+0x1c8>
 8005284:	6823      	ldr	r3, [r4, #0]
 8005286:	6121      	str	r1, [r4, #16]
 8005288:	07d8      	lsls	r0, r3, #31
 800528a:	d5ea      	bpl.n	8005262 <_printf_float+0x19a>
 800528c:	1c4b      	adds	r3, r1, #1
 800528e:	e7e7      	b.n	8005260 <_printf_float+0x198>
 8005290:	2900      	cmp	r1, #0
 8005292:	bfcc      	ite	gt
 8005294:	2201      	movgt	r2, #1
 8005296:	f1c1 0202 	rsble	r2, r1, #2
 800529a:	4413      	add	r3, r2
 800529c:	e7e0      	b.n	8005260 <_printf_float+0x198>
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	055a      	lsls	r2, r3, #21
 80052a2:	d407      	bmi.n	80052b4 <_printf_float+0x1ec>
 80052a4:	6923      	ldr	r3, [r4, #16]
 80052a6:	4642      	mov	r2, r8
 80052a8:	4631      	mov	r1, r6
 80052aa:	4628      	mov	r0, r5
 80052ac:	47b8      	blx	r7
 80052ae:	3001      	adds	r0, #1
 80052b0:	d12b      	bne.n	800530a <_printf_float+0x242>
 80052b2:	e764      	b.n	800517e <_printf_float+0xb6>
 80052b4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80052b8:	f240 80dc 	bls.w	8005474 <_printf_float+0x3ac>
 80052bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80052c0:	2200      	movs	r2, #0
 80052c2:	2300      	movs	r3, #0
 80052c4:	f7fb fb70 	bl	80009a8 <__aeabi_dcmpeq>
 80052c8:	2800      	cmp	r0, #0
 80052ca:	d033      	beq.n	8005334 <_printf_float+0x26c>
 80052cc:	2301      	movs	r3, #1
 80052ce:	4631      	mov	r1, r6
 80052d0:	4628      	mov	r0, r5
 80052d2:	4a35      	ldr	r2, [pc, #212]	@ (80053a8 <_printf_float+0x2e0>)
 80052d4:	47b8      	blx	r7
 80052d6:	3001      	adds	r0, #1
 80052d8:	f43f af51 	beq.w	800517e <_printf_float+0xb6>
 80052dc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80052e0:	4543      	cmp	r3, r8
 80052e2:	db02      	blt.n	80052ea <_printf_float+0x222>
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	07d8      	lsls	r0, r3, #31
 80052e8:	d50f      	bpl.n	800530a <_printf_float+0x242>
 80052ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80052ee:	4631      	mov	r1, r6
 80052f0:	4628      	mov	r0, r5
 80052f2:	47b8      	blx	r7
 80052f4:	3001      	adds	r0, #1
 80052f6:	f43f af42 	beq.w	800517e <_printf_float+0xb6>
 80052fa:	f04f 0900 	mov.w	r9, #0
 80052fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8005302:	f104 0a1a 	add.w	sl, r4, #26
 8005306:	45c8      	cmp	r8, r9
 8005308:	dc09      	bgt.n	800531e <_printf_float+0x256>
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	079b      	lsls	r3, r3, #30
 800530e:	f100 8102 	bmi.w	8005516 <_printf_float+0x44e>
 8005312:	68e0      	ldr	r0, [r4, #12]
 8005314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005316:	4298      	cmp	r0, r3
 8005318:	bfb8      	it	lt
 800531a:	4618      	movlt	r0, r3
 800531c:	e731      	b.n	8005182 <_printf_float+0xba>
 800531e:	2301      	movs	r3, #1
 8005320:	4652      	mov	r2, sl
 8005322:	4631      	mov	r1, r6
 8005324:	4628      	mov	r0, r5
 8005326:	47b8      	blx	r7
 8005328:	3001      	adds	r0, #1
 800532a:	f43f af28 	beq.w	800517e <_printf_float+0xb6>
 800532e:	f109 0901 	add.w	r9, r9, #1
 8005332:	e7e8      	b.n	8005306 <_printf_float+0x23e>
 8005334:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005336:	2b00      	cmp	r3, #0
 8005338:	dc38      	bgt.n	80053ac <_printf_float+0x2e4>
 800533a:	2301      	movs	r3, #1
 800533c:	4631      	mov	r1, r6
 800533e:	4628      	mov	r0, r5
 8005340:	4a19      	ldr	r2, [pc, #100]	@ (80053a8 <_printf_float+0x2e0>)
 8005342:	47b8      	blx	r7
 8005344:	3001      	adds	r0, #1
 8005346:	f43f af1a 	beq.w	800517e <_printf_float+0xb6>
 800534a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800534e:	ea59 0303 	orrs.w	r3, r9, r3
 8005352:	d102      	bne.n	800535a <_printf_float+0x292>
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	07d9      	lsls	r1, r3, #31
 8005358:	d5d7      	bpl.n	800530a <_printf_float+0x242>
 800535a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800535e:	4631      	mov	r1, r6
 8005360:	4628      	mov	r0, r5
 8005362:	47b8      	blx	r7
 8005364:	3001      	adds	r0, #1
 8005366:	f43f af0a 	beq.w	800517e <_printf_float+0xb6>
 800536a:	f04f 0a00 	mov.w	sl, #0
 800536e:	f104 0b1a 	add.w	fp, r4, #26
 8005372:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005374:	425b      	negs	r3, r3
 8005376:	4553      	cmp	r3, sl
 8005378:	dc01      	bgt.n	800537e <_printf_float+0x2b6>
 800537a:	464b      	mov	r3, r9
 800537c:	e793      	b.n	80052a6 <_printf_float+0x1de>
 800537e:	2301      	movs	r3, #1
 8005380:	465a      	mov	r2, fp
 8005382:	4631      	mov	r1, r6
 8005384:	4628      	mov	r0, r5
 8005386:	47b8      	blx	r7
 8005388:	3001      	adds	r0, #1
 800538a:	f43f aef8 	beq.w	800517e <_printf_float+0xb6>
 800538e:	f10a 0a01 	add.w	sl, sl, #1
 8005392:	e7ee      	b.n	8005372 <_printf_float+0x2aa>
 8005394:	7fefffff 	.word	0x7fefffff
 8005398:	080096be 	.word	0x080096be
 800539c:	080096ba 	.word	0x080096ba
 80053a0:	080096c6 	.word	0x080096c6
 80053a4:	080096c2 	.word	0x080096c2
 80053a8:	080096ca 	.word	0x080096ca
 80053ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80053ae:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80053b2:	4553      	cmp	r3, sl
 80053b4:	bfa8      	it	ge
 80053b6:	4653      	movge	r3, sl
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	4699      	mov	r9, r3
 80053bc:	dc36      	bgt.n	800542c <_printf_float+0x364>
 80053be:	f04f 0b00 	mov.w	fp, #0
 80053c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053c6:	f104 021a 	add.w	r2, r4, #26
 80053ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80053cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80053ce:	eba3 0309 	sub.w	r3, r3, r9
 80053d2:	455b      	cmp	r3, fp
 80053d4:	dc31      	bgt.n	800543a <_printf_float+0x372>
 80053d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053d8:	459a      	cmp	sl, r3
 80053da:	dc3a      	bgt.n	8005452 <_printf_float+0x38a>
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	07da      	lsls	r2, r3, #31
 80053e0:	d437      	bmi.n	8005452 <_printf_float+0x38a>
 80053e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053e4:	ebaa 0903 	sub.w	r9, sl, r3
 80053e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053ea:	ebaa 0303 	sub.w	r3, sl, r3
 80053ee:	4599      	cmp	r9, r3
 80053f0:	bfa8      	it	ge
 80053f2:	4699      	movge	r9, r3
 80053f4:	f1b9 0f00 	cmp.w	r9, #0
 80053f8:	dc33      	bgt.n	8005462 <_printf_float+0x39a>
 80053fa:	f04f 0800 	mov.w	r8, #0
 80053fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005402:	f104 0b1a 	add.w	fp, r4, #26
 8005406:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005408:	ebaa 0303 	sub.w	r3, sl, r3
 800540c:	eba3 0309 	sub.w	r3, r3, r9
 8005410:	4543      	cmp	r3, r8
 8005412:	f77f af7a 	ble.w	800530a <_printf_float+0x242>
 8005416:	2301      	movs	r3, #1
 8005418:	465a      	mov	r2, fp
 800541a:	4631      	mov	r1, r6
 800541c:	4628      	mov	r0, r5
 800541e:	47b8      	blx	r7
 8005420:	3001      	adds	r0, #1
 8005422:	f43f aeac 	beq.w	800517e <_printf_float+0xb6>
 8005426:	f108 0801 	add.w	r8, r8, #1
 800542a:	e7ec      	b.n	8005406 <_printf_float+0x33e>
 800542c:	4642      	mov	r2, r8
 800542e:	4631      	mov	r1, r6
 8005430:	4628      	mov	r0, r5
 8005432:	47b8      	blx	r7
 8005434:	3001      	adds	r0, #1
 8005436:	d1c2      	bne.n	80053be <_printf_float+0x2f6>
 8005438:	e6a1      	b.n	800517e <_printf_float+0xb6>
 800543a:	2301      	movs	r3, #1
 800543c:	4631      	mov	r1, r6
 800543e:	4628      	mov	r0, r5
 8005440:	920a      	str	r2, [sp, #40]	@ 0x28
 8005442:	47b8      	blx	r7
 8005444:	3001      	adds	r0, #1
 8005446:	f43f ae9a 	beq.w	800517e <_printf_float+0xb6>
 800544a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800544c:	f10b 0b01 	add.w	fp, fp, #1
 8005450:	e7bb      	b.n	80053ca <_printf_float+0x302>
 8005452:	4631      	mov	r1, r6
 8005454:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005458:	4628      	mov	r0, r5
 800545a:	47b8      	blx	r7
 800545c:	3001      	adds	r0, #1
 800545e:	d1c0      	bne.n	80053e2 <_printf_float+0x31a>
 8005460:	e68d      	b.n	800517e <_printf_float+0xb6>
 8005462:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005464:	464b      	mov	r3, r9
 8005466:	4631      	mov	r1, r6
 8005468:	4628      	mov	r0, r5
 800546a:	4442      	add	r2, r8
 800546c:	47b8      	blx	r7
 800546e:	3001      	adds	r0, #1
 8005470:	d1c3      	bne.n	80053fa <_printf_float+0x332>
 8005472:	e684      	b.n	800517e <_printf_float+0xb6>
 8005474:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005478:	f1ba 0f01 	cmp.w	sl, #1
 800547c:	dc01      	bgt.n	8005482 <_printf_float+0x3ba>
 800547e:	07db      	lsls	r3, r3, #31
 8005480:	d536      	bpl.n	80054f0 <_printf_float+0x428>
 8005482:	2301      	movs	r3, #1
 8005484:	4642      	mov	r2, r8
 8005486:	4631      	mov	r1, r6
 8005488:	4628      	mov	r0, r5
 800548a:	47b8      	blx	r7
 800548c:	3001      	adds	r0, #1
 800548e:	f43f ae76 	beq.w	800517e <_printf_float+0xb6>
 8005492:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005496:	4631      	mov	r1, r6
 8005498:	4628      	mov	r0, r5
 800549a:	47b8      	blx	r7
 800549c:	3001      	adds	r0, #1
 800549e:	f43f ae6e 	beq.w	800517e <_printf_float+0xb6>
 80054a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80054a6:	2200      	movs	r2, #0
 80054a8:	2300      	movs	r3, #0
 80054aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054ae:	f7fb fa7b 	bl	80009a8 <__aeabi_dcmpeq>
 80054b2:	b9c0      	cbnz	r0, 80054e6 <_printf_float+0x41e>
 80054b4:	4653      	mov	r3, sl
 80054b6:	f108 0201 	add.w	r2, r8, #1
 80054ba:	4631      	mov	r1, r6
 80054bc:	4628      	mov	r0, r5
 80054be:	47b8      	blx	r7
 80054c0:	3001      	adds	r0, #1
 80054c2:	d10c      	bne.n	80054de <_printf_float+0x416>
 80054c4:	e65b      	b.n	800517e <_printf_float+0xb6>
 80054c6:	2301      	movs	r3, #1
 80054c8:	465a      	mov	r2, fp
 80054ca:	4631      	mov	r1, r6
 80054cc:	4628      	mov	r0, r5
 80054ce:	47b8      	blx	r7
 80054d0:	3001      	adds	r0, #1
 80054d2:	f43f ae54 	beq.w	800517e <_printf_float+0xb6>
 80054d6:	f108 0801 	add.w	r8, r8, #1
 80054da:	45d0      	cmp	r8, sl
 80054dc:	dbf3      	blt.n	80054c6 <_printf_float+0x3fe>
 80054de:	464b      	mov	r3, r9
 80054e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80054e4:	e6e0      	b.n	80052a8 <_printf_float+0x1e0>
 80054e6:	f04f 0800 	mov.w	r8, #0
 80054ea:	f104 0b1a 	add.w	fp, r4, #26
 80054ee:	e7f4      	b.n	80054da <_printf_float+0x412>
 80054f0:	2301      	movs	r3, #1
 80054f2:	4642      	mov	r2, r8
 80054f4:	e7e1      	b.n	80054ba <_printf_float+0x3f2>
 80054f6:	2301      	movs	r3, #1
 80054f8:	464a      	mov	r2, r9
 80054fa:	4631      	mov	r1, r6
 80054fc:	4628      	mov	r0, r5
 80054fe:	47b8      	blx	r7
 8005500:	3001      	adds	r0, #1
 8005502:	f43f ae3c 	beq.w	800517e <_printf_float+0xb6>
 8005506:	f108 0801 	add.w	r8, r8, #1
 800550a:	68e3      	ldr	r3, [r4, #12]
 800550c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800550e:	1a5b      	subs	r3, r3, r1
 8005510:	4543      	cmp	r3, r8
 8005512:	dcf0      	bgt.n	80054f6 <_printf_float+0x42e>
 8005514:	e6fd      	b.n	8005312 <_printf_float+0x24a>
 8005516:	f04f 0800 	mov.w	r8, #0
 800551a:	f104 0919 	add.w	r9, r4, #25
 800551e:	e7f4      	b.n	800550a <_printf_float+0x442>

08005520 <_printf_common>:
 8005520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005524:	4616      	mov	r6, r2
 8005526:	4698      	mov	r8, r3
 8005528:	688a      	ldr	r2, [r1, #8]
 800552a:	690b      	ldr	r3, [r1, #16]
 800552c:	4607      	mov	r7, r0
 800552e:	4293      	cmp	r3, r2
 8005530:	bfb8      	it	lt
 8005532:	4613      	movlt	r3, r2
 8005534:	6033      	str	r3, [r6, #0]
 8005536:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800553a:	460c      	mov	r4, r1
 800553c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005540:	b10a      	cbz	r2, 8005546 <_printf_common+0x26>
 8005542:	3301      	adds	r3, #1
 8005544:	6033      	str	r3, [r6, #0]
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	0699      	lsls	r1, r3, #26
 800554a:	bf42      	ittt	mi
 800554c:	6833      	ldrmi	r3, [r6, #0]
 800554e:	3302      	addmi	r3, #2
 8005550:	6033      	strmi	r3, [r6, #0]
 8005552:	6825      	ldr	r5, [r4, #0]
 8005554:	f015 0506 	ands.w	r5, r5, #6
 8005558:	d106      	bne.n	8005568 <_printf_common+0x48>
 800555a:	f104 0a19 	add.w	sl, r4, #25
 800555e:	68e3      	ldr	r3, [r4, #12]
 8005560:	6832      	ldr	r2, [r6, #0]
 8005562:	1a9b      	subs	r3, r3, r2
 8005564:	42ab      	cmp	r3, r5
 8005566:	dc2b      	bgt.n	80055c0 <_printf_common+0xa0>
 8005568:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800556c:	6822      	ldr	r2, [r4, #0]
 800556e:	3b00      	subs	r3, #0
 8005570:	bf18      	it	ne
 8005572:	2301      	movne	r3, #1
 8005574:	0692      	lsls	r2, r2, #26
 8005576:	d430      	bmi.n	80055da <_printf_common+0xba>
 8005578:	4641      	mov	r1, r8
 800557a:	4638      	mov	r0, r7
 800557c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005580:	47c8      	blx	r9
 8005582:	3001      	adds	r0, #1
 8005584:	d023      	beq.n	80055ce <_printf_common+0xae>
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	6922      	ldr	r2, [r4, #16]
 800558a:	f003 0306 	and.w	r3, r3, #6
 800558e:	2b04      	cmp	r3, #4
 8005590:	bf14      	ite	ne
 8005592:	2500      	movne	r5, #0
 8005594:	6833      	ldreq	r3, [r6, #0]
 8005596:	f04f 0600 	mov.w	r6, #0
 800559a:	bf08      	it	eq
 800559c:	68e5      	ldreq	r5, [r4, #12]
 800559e:	f104 041a 	add.w	r4, r4, #26
 80055a2:	bf08      	it	eq
 80055a4:	1aed      	subeq	r5, r5, r3
 80055a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80055aa:	bf08      	it	eq
 80055ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055b0:	4293      	cmp	r3, r2
 80055b2:	bfc4      	itt	gt
 80055b4:	1a9b      	subgt	r3, r3, r2
 80055b6:	18ed      	addgt	r5, r5, r3
 80055b8:	42b5      	cmp	r5, r6
 80055ba:	d11a      	bne.n	80055f2 <_printf_common+0xd2>
 80055bc:	2000      	movs	r0, #0
 80055be:	e008      	b.n	80055d2 <_printf_common+0xb2>
 80055c0:	2301      	movs	r3, #1
 80055c2:	4652      	mov	r2, sl
 80055c4:	4641      	mov	r1, r8
 80055c6:	4638      	mov	r0, r7
 80055c8:	47c8      	blx	r9
 80055ca:	3001      	adds	r0, #1
 80055cc:	d103      	bne.n	80055d6 <_printf_common+0xb6>
 80055ce:	f04f 30ff 	mov.w	r0, #4294967295
 80055d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d6:	3501      	adds	r5, #1
 80055d8:	e7c1      	b.n	800555e <_printf_common+0x3e>
 80055da:	2030      	movs	r0, #48	@ 0x30
 80055dc:	18e1      	adds	r1, r4, r3
 80055de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80055e2:	1c5a      	adds	r2, r3, #1
 80055e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055e8:	4422      	add	r2, r4
 80055ea:	3302      	adds	r3, #2
 80055ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80055f0:	e7c2      	b.n	8005578 <_printf_common+0x58>
 80055f2:	2301      	movs	r3, #1
 80055f4:	4622      	mov	r2, r4
 80055f6:	4641      	mov	r1, r8
 80055f8:	4638      	mov	r0, r7
 80055fa:	47c8      	blx	r9
 80055fc:	3001      	adds	r0, #1
 80055fe:	d0e6      	beq.n	80055ce <_printf_common+0xae>
 8005600:	3601      	adds	r6, #1
 8005602:	e7d9      	b.n	80055b8 <_printf_common+0x98>

08005604 <_printf_i>:
 8005604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005608:	7e0f      	ldrb	r7, [r1, #24]
 800560a:	4691      	mov	r9, r2
 800560c:	2f78      	cmp	r7, #120	@ 0x78
 800560e:	4680      	mov	r8, r0
 8005610:	460c      	mov	r4, r1
 8005612:	469a      	mov	sl, r3
 8005614:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005616:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800561a:	d807      	bhi.n	800562c <_printf_i+0x28>
 800561c:	2f62      	cmp	r7, #98	@ 0x62
 800561e:	d80a      	bhi.n	8005636 <_printf_i+0x32>
 8005620:	2f00      	cmp	r7, #0
 8005622:	f000 80d1 	beq.w	80057c8 <_printf_i+0x1c4>
 8005626:	2f58      	cmp	r7, #88	@ 0x58
 8005628:	f000 80b8 	beq.w	800579c <_printf_i+0x198>
 800562c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005630:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005634:	e03a      	b.n	80056ac <_printf_i+0xa8>
 8005636:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800563a:	2b15      	cmp	r3, #21
 800563c:	d8f6      	bhi.n	800562c <_printf_i+0x28>
 800563e:	a101      	add	r1, pc, #4	@ (adr r1, 8005644 <_printf_i+0x40>)
 8005640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005644:	0800569d 	.word	0x0800569d
 8005648:	080056b1 	.word	0x080056b1
 800564c:	0800562d 	.word	0x0800562d
 8005650:	0800562d 	.word	0x0800562d
 8005654:	0800562d 	.word	0x0800562d
 8005658:	0800562d 	.word	0x0800562d
 800565c:	080056b1 	.word	0x080056b1
 8005660:	0800562d 	.word	0x0800562d
 8005664:	0800562d 	.word	0x0800562d
 8005668:	0800562d 	.word	0x0800562d
 800566c:	0800562d 	.word	0x0800562d
 8005670:	080057af 	.word	0x080057af
 8005674:	080056db 	.word	0x080056db
 8005678:	08005769 	.word	0x08005769
 800567c:	0800562d 	.word	0x0800562d
 8005680:	0800562d 	.word	0x0800562d
 8005684:	080057d1 	.word	0x080057d1
 8005688:	0800562d 	.word	0x0800562d
 800568c:	080056db 	.word	0x080056db
 8005690:	0800562d 	.word	0x0800562d
 8005694:	0800562d 	.word	0x0800562d
 8005698:	08005771 	.word	0x08005771
 800569c:	6833      	ldr	r3, [r6, #0]
 800569e:	1d1a      	adds	r2, r3, #4
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6032      	str	r2, [r6, #0]
 80056a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056ac:	2301      	movs	r3, #1
 80056ae:	e09c      	b.n	80057ea <_printf_i+0x1e6>
 80056b0:	6833      	ldr	r3, [r6, #0]
 80056b2:	6820      	ldr	r0, [r4, #0]
 80056b4:	1d19      	adds	r1, r3, #4
 80056b6:	6031      	str	r1, [r6, #0]
 80056b8:	0606      	lsls	r6, r0, #24
 80056ba:	d501      	bpl.n	80056c0 <_printf_i+0xbc>
 80056bc:	681d      	ldr	r5, [r3, #0]
 80056be:	e003      	b.n	80056c8 <_printf_i+0xc4>
 80056c0:	0645      	lsls	r5, r0, #25
 80056c2:	d5fb      	bpl.n	80056bc <_printf_i+0xb8>
 80056c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056c8:	2d00      	cmp	r5, #0
 80056ca:	da03      	bge.n	80056d4 <_printf_i+0xd0>
 80056cc:	232d      	movs	r3, #45	@ 0x2d
 80056ce:	426d      	negs	r5, r5
 80056d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056d4:	230a      	movs	r3, #10
 80056d6:	4858      	ldr	r0, [pc, #352]	@ (8005838 <_printf_i+0x234>)
 80056d8:	e011      	b.n	80056fe <_printf_i+0xfa>
 80056da:	6821      	ldr	r1, [r4, #0]
 80056dc:	6833      	ldr	r3, [r6, #0]
 80056de:	0608      	lsls	r0, r1, #24
 80056e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80056e4:	d402      	bmi.n	80056ec <_printf_i+0xe8>
 80056e6:	0649      	lsls	r1, r1, #25
 80056e8:	bf48      	it	mi
 80056ea:	b2ad      	uxthmi	r5, r5
 80056ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80056ee:	6033      	str	r3, [r6, #0]
 80056f0:	bf14      	ite	ne
 80056f2:	230a      	movne	r3, #10
 80056f4:	2308      	moveq	r3, #8
 80056f6:	4850      	ldr	r0, [pc, #320]	@ (8005838 <_printf_i+0x234>)
 80056f8:	2100      	movs	r1, #0
 80056fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056fe:	6866      	ldr	r6, [r4, #4]
 8005700:	2e00      	cmp	r6, #0
 8005702:	60a6      	str	r6, [r4, #8]
 8005704:	db05      	blt.n	8005712 <_printf_i+0x10e>
 8005706:	6821      	ldr	r1, [r4, #0]
 8005708:	432e      	orrs	r6, r5
 800570a:	f021 0104 	bic.w	r1, r1, #4
 800570e:	6021      	str	r1, [r4, #0]
 8005710:	d04b      	beq.n	80057aa <_printf_i+0x1a6>
 8005712:	4616      	mov	r6, r2
 8005714:	fbb5 f1f3 	udiv	r1, r5, r3
 8005718:	fb03 5711 	mls	r7, r3, r1, r5
 800571c:	5dc7      	ldrb	r7, [r0, r7]
 800571e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005722:	462f      	mov	r7, r5
 8005724:	42bb      	cmp	r3, r7
 8005726:	460d      	mov	r5, r1
 8005728:	d9f4      	bls.n	8005714 <_printf_i+0x110>
 800572a:	2b08      	cmp	r3, #8
 800572c:	d10b      	bne.n	8005746 <_printf_i+0x142>
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	07df      	lsls	r7, r3, #31
 8005732:	d508      	bpl.n	8005746 <_printf_i+0x142>
 8005734:	6923      	ldr	r3, [r4, #16]
 8005736:	6861      	ldr	r1, [r4, #4]
 8005738:	4299      	cmp	r1, r3
 800573a:	bfde      	ittt	le
 800573c:	2330      	movle	r3, #48	@ 0x30
 800573e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005742:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005746:	1b92      	subs	r2, r2, r6
 8005748:	6122      	str	r2, [r4, #16]
 800574a:	464b      	mov	r3, r9
 800574c:	4621      	mov	r1, r4
 800574e:	4640      	mov	r0, r8
 8005750:	f8cd a000 	str.w	sl, [sp]
 8005754:	aa03      	add	r2, sp, #12
 8005756:	f7ff fee3 	bl	8005520 <_printf_common>
 800575a:	3001      	adds	r0, #1
 800575c:	d14a      	bne.n	80057f4 <_printf_i+0x1f0>
 800575e:	f04f 30ff 	mov.w	r0, #4294967295
 8005762:	b004      	add	sp, #16
 8005764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	f043 0320 	orr.w	r3, r3, #32
 800576e:	6023      	str	r3, [r4, #0]
 8005770:	2778      	movs	r7, #120	@ 0x78
 8005772:	4832      	ldr	r0, [pc, #200]	@ (800583c <_printf_i+0x238>)
 8005774:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005778:	6823      	ldr	r3, [r4, #0]
 800577a:	6831      	ldr	r1, [r6, #0]
 800577c:	061f      	lsls	r7, r3, #24
 800577e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005782:	d402      	bmi.n	800578a <_printf_i+0x186>
 8005784:	065f      	lsls	r7, r3, #25
 8005786:	bf48      	it	mi
 8005788:	b2ad      	uxthmi	r5, r5
 800578a:	6031      	str	r1, [r6, #0]
 800578c:	07d9      	lsls	r1, r3, #31
 800578e:	bf44      	itt	mi
 8005790:	f043 0320 	orrmi.w	r3, r3, #32
 8005794:	6023      	strmi	r3, [r4, #0]
 8005796:	b11d      	cbz	r5, 80057a0 <_printf_i+0x19c>
 8005798:	2310      	movs	r3, #16
 800579a:	e7ad      	b.n	80056f8 <_printf_i+0xf4>
 800579c:	4826      	ldr	r0, [pc, #152]	@ (8005838 <_printf_i+0x234>)
 800579e:	e7e9      	b.n	8005774 <_printf_i+0x170>
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	f023 0320 	bic.w	r3, r3, #32
 80057a6:	6023      	str	r3, [r4, #0]
 80057a8:	e7f6      	b.n	8005798 <_printf_i+0x194>
 80057aa:	4616      	mov	r6, r2
 80057ac:	e7bd      	b.n	800572a <_printf_i+0x126>
 80057ae:	6833      	ldr	r3, [r6, #0]
 80057b0:	6825      	ldr	r5, [r4, #0]
 80057b2:	1d18      	adds	r0, r3, #4
 80057b4:	6961      	ldr	r1, [r4, #20]
 80057b6:	6030      	str	r0, [r6, #0]
 80057b8:	062e      	lsls	r6, r5, #24
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	d501      	bpl.n	80057c2 <_printf_i+0x1be>
 80057be:	6019      	str	r1, [r3, #0]
 80057c0:	e002      	b.n	80057c8 <_printf_i+0x1c4>
 80057c2:	0668      	lsls	r0, r5, #25
 80057c4:	d5fb      	bpl.n	80057be <_printf_i+0x1ba>
 80057c6:	8019      	strh	r1, [r3, #0]
 80057c8:	2300      	movs	r3, #0
 80057ca:	4616      	mov	r6, r2
 80057cc:	6123      	str	r3, [r4, #16]
 80057ce:	e7bc      	b.n	800574a <_printf_i+0x146>
 80057d0:	6833      	ldr	r3, [r6, #0]
 80057d2:	2100      	movs	r1, #0
 80057d4:	1d1a      	adds	r2, r3, #4
 80057d6:	6032      	str	r2, [r6, #0]
 80057d8:	681e      	ldr	r6, [r3, #0]
 80057da:	6862      	ldr	r2, [r4, #4]
 80057dc:	4630      	mov	r0, r6
 80057de:	f000 fbe0 	bl	8005fa2 <memchr>
 80057e2:	b108      	cbz	r0, 80057e8 <_printf_i+0x1e4>
 80057e4:	1b80      	subs	r0, r0, r6
 80057e6:	6060      	str	r0, [r4, #4]
 80057e8:	6863      	ldr	r3, [r4, #4]
 80057ea:	6123      	str	r3, [r4, #16]
 80057ec:	2300      	movs	r3, #0
 80057ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057f2:	e7aa      	b.n	800574a <_printf_i+0x146>
 80057f4:	4632      	mov	r2, r6
 80057f6:	4649      	mov	r1, r9
 80057f8:	4640      	mov	r0, r8
 80057fa:	6923      	ldr	r3, [r4, #16]
 80057fc:	47d0      	blx	sl
 80057fe:	3001      	adds	r0, #1
 8005800:	d0ad      	beq.n	800575e <_printf_i+0x15a>
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	079b      	lsls	r3, r3, #30
 8005806:	d413      	bmi.n	8005830 <_printf_i+0x22c>
 8005808:	68e0      	ldr	r0, [r4, #12]
 800580a:	9b03      	ldr	r3, [sp, #12]
 800580c:	4298      	cmp	r0, r3
 800580e:	bfb8      	it	lt
 8005810:	4618      	movlt	r0, r3
 8005812:	e7a6      	b.n	8005762 <_printf_i+0x15e>
 8005814:	2301      	movs	r3, #1
 8005816:	4632      	mov	r2, r6
 8005818:	4649      	mov	r1, r9
 800581a:	4640      	mov	r0, r8
 800581c:	47d0      	blx	sl
 800581e:	3001      	adds	r0, #1
 8005820:	d09d      	beq.n	800575e <_printf_i+0x15a>
 8005822:	3501      	adds	r5, #1
 8005824:	68e3      	ldr	r3, [r4, #12]
 8005826:	9903      	ldr	r1, [sp, #12]
 8005828:	1a5b      	subs	r3, r3, r1
 800582a:	42ab      	cmp	r3, r5
 800582c:	dcf2      	bgt.n	8005814 <_printf_i+0x210>
 800582e:	e7eb      	b.n	8005808 <_printf_i+0x204>
 8005830:	2500      	movs	r5, #0
 8005832:	f104 0619 	add.w	r6, r4, #25
 8005836:	e7f5      	b.n	8005824 <_printf_i+0x220>
 8005838:	080096cc 	.word	0x080096cc
 800583c:	080096dd 	.word	0x080096dd

08005840 <_scanf_float>:
 8005840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005844:	b087      	sub	sp, #28
 8005846:	9303      	str	r3, [sp, #12]
 8005848:	688b      	ldr	r3, [r1, #8]
 800584a:	4691      	mov	r9, r2
 800584c:	1e5a      	subs	r2, r3, #1
 800584e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005852:	bf82      	ittt	hi
 8005854:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005858:	eb03 0b05 	addhi.w	fp, r3, r5
 800585c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005860:	460a      	mov	r2, r1
 8005862:	f04f 0500 	mov.w	r5, #0
 8005866:	bf88      	it	hi
 8005868:	608b      	strhi	r3, [r1, #8]
 800586a:	680b      	ldr	r3, [r1, #0]
 800586c:	4680      	mov	r8, r0
 800586e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005872:	f842 3b1c 	str.w	r3, [r2], #28
 8005876:	460c      	mov	r4, r1
 8005878:	bf98      	it	ls
 800587a:	f04f 0b00 	movls.w	fp, #0
 800587e:	4616      	mov	r6, r2
 8005880:	46aa      	mov	sl, r5
 8005882:	462f      	mov	r7, r5
 8005884:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005888:	9201      	str	r2, [sp, #4]
 800588a:	9502      	str	r5, [sp, #8]
 800588c:	68a2      	ldr	r2, [r4, #8]
 800588e:	b15a      	cbz	r2, 80058a8 <_scanf_float+0x68>
 8005890:	f8d9 3000 	ldr.w	r3, [r9]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b4e      	cmp	r3, #78	@ 0x4e
 8005898:	d862      	bhi.n	8005960 <_scanf_float+0x120>
 800589a:	2b40      	cmp	r3, #64	@ 0x40
 800589c:	d83a      	bhi.n	8005914 <_scanf_float+0xd4>
 800589e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80058a2:	b2c8      	uxtb	r0, r1
 80058a4:	280e      	cmp	r0, #14
 80058a6:	d938      	bls.n	800591a <_scanf_float+0xda>
 80058a8:	b11f      	cbz	r7, 80058b2 <_scanf_float+0x72>
 80058aa:	6823      	ldr	r3, [r4, #0]
 80058ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058b0:	6023      	str	r3, [r4, #0]
 80058b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058b6:	f1ba 0f01 	cmp.w	sl, #1
 80058ba:	f200 8114 	bhi.w	8005ae6 <_scanf_float+0x2a6>
 80058be:	9b01      	ldr	r3, [sp, #4]
 80058c0:	429e      	cmp	r6, r3
 80058c2:	f200 8105 	bhi.w	8005ad0 <_scanf_float+0x290>
 80058c6:	2001      	movs	r0, #1
 80058c8:	b007      	add	sp, #28
 80058ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ce:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80058d2:	2a0d      	cmp	r2, #13
 80058d4:	d8e8      	bhi.n	80058a8 <_scanf_float+0x68>
 80058d6:	a101      	add	r1, pc, #4	@ (adr r1, 80058dc <_scanf_float+0x9c>)
 80058d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80058dc:	08005a25 	.word	0x08005a25
 80058e0:	080058a9 	.word	0x080058a9
 80058e4:	080058a9 	.word	0x080058a9
 80058e8:	080058a9 	.word	0x080058a9
 80058ec:	08005a81 	.word	0x08005a81
 80058f0:	08005a5b 	.word	0x08005a5b
 80058f4:	080058a9 	.word	0x080058a9
 80058f8:	080058a9 	.word	0x080058a9
 80058fc:	08005a33 	.word	0x08005a33
 8005900:	080058a9 	.word	0x080058a9
 8005904:	080058a9 	.word	0x080058a9
 8005908:	080058a9 	.word	0x080058a9
 800590c:	080058a9 	.word	0x080058a9
 8005910:	080059ef 	.word	0x080059ef
 8005914:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005918:	e7db      	b.n	80058d2 <_scanf_float+0x92>
 800591a:	290e      	cmp	r1, #14
 800591c:	d8c4      	bhi.n	80058a8 <_scanf_float+0x68>
 800591e:	a001      	add	r0, pc, #4	@ (adr r0, 8005924 <_scanf_float+0xe4>)
 8005920:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005924:	080059df 	.word	0x080059df
 8005928:	080058a9 	.word	0x080058a9
 800592c:	080059df 	.word	0x080059df
 8005930:	08005a6f 	.word	0x08005a6f
 8005934:	080058a9 	.word	0x080058a9
 8005938:	08005981 	.word	0x08005981
 800593c:	080059c5 	.word	0x080059c5
 8005940:	080059c5 	.word	0x080059c5
 8005944:	080059c5 	.word	0x080059c5
 8005948:	080059c5 	.word	0x080059c5
 800594c:	080059c5 	.word	0x080059c5
 8005950:	080059c5 	.word	0x080059c5
 8005954:	080059c5 	.word	0x080059c5
 8005958:	080059c5 	.word	0x080059c5
 800595c:	080059c5 	.word	0x080059c5
 8005960:	2b6e      	cmp	r3, #110	@ 0x6e
 8005962:	d809      	bhi.n	8005978 <_scanf_float+0x138>
 8005964:	2b60      	cmp	r3, #96	@ 0x60
 8005966:	d8b2      	bhi.n	80058ce <_scanf_float+0x8e>
 8005968:	2b54      	cmp	r3, #84	@ 0x54
 800596a:	d07b      	beq.n	8005a64 <_scanf_float+0x224>
 800596c:	2b59      	cmp	r3, #89	@ 0x59
 800596e:	d19b      	bne.n	80058a8 <_scanf_float+0x68>
 8005970:	2d07      	cmp	r5, #7
 8005972:	d199      	bne.n	80058a8 <_scanf_float+0x68>
 8005974:	2508      	movs	r5, #8
 8005976:	e02f      	b.n	80059d8 <_scanf_float+0x198>
 8005978:	2b74      	cmp	r3, #116	@ 0x74
 800597a:	d073      	beq.n	8005a64 <_scanf_float+0x224>
 800597c:	2b79      	cmp	r3, #121	@ 0x79
 800597e:	e7f6      	b.n	800596e <_scanf_float+0x12e>
 8005980:	6821      	ldr	r1, [r4, #0]
 8005982:	05c8      	lsls	r0, r1, #23
 8005984:	d51e      	bpl.n	80059c4 <_scanf_float+0x184>
 8005986:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800598a:	6021      	str	r1, [r4, #0]
 800598c:	3701      	adds	r7, #1
 800598e:	f1bb 0f00 	cmp.w	fp, #0
 8005992:	d003      	beq.n	800599c <_scanf_float+0x15c>
 8005994:	3201      	adds	r2, #1
 8005996:	f10b 3bff 	add.w	fp, fp, #4294967295
 800599a:	60a2      	str	r2, [r4, #8]
 800599c:	68a3      	ldr	r3, [r4, #8]
 800599e:	3b01      	subs	r3, #1
 80059a0:	60a3      	str	r3, [r4, #8]
 80059a2:	6923      	ldr	r3, [r4, #16]
 80059a4:	3301      	adds	r3, #1
 80059a6:	6123      	str	r3, [r4, #16]
 80059a8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80059ac:	3b01      	subs	r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f8c9 3004 	str.w	r3, [r9, #4]
 80059b4:	f340 8083 	ble.w	8005abe <_scanf_float+0x27e>
 80059b8:	f8d9 3000 	ldr.w	r3, [r9]
 80059bc:	3301      	adds	r3, #1
 80059be:	f8c9 3000 	str.w	r3, [r9]
 80059c2:	e763      	b.n	800588c <_scanf_float+0x4c>
 80059c4:	eb1a 0105 	adds.w	r1, sl, r5
 80059c8:	f47f af6e 	bne.w	80058a8 <_scanf_float+0x68>
 80059cc:	460d      	mov	r5, r1
 80059ce:	468a      	mov	sl, r1
 80059d0:	6822      	ldr	r2, [r4, #0]
 80059d2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80059d6:	6022      	str	r2, [r4, #0]
 80059d8:	f806 3b01 	strb.w	r3, [r6], #1
 80059dc:	e7de      	b.n	800599c <_scanf_float+0x15c>
 80059de:	6822      	ldr	r2, [r4, #0]
 80059e0:	0610      	lsls	r0, r2, #24
 80059e2:	f57f af61 	bpl.w	80058a8 <_scanf_float+0x68>
 80059e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059ea:	6022      	str	r2, [r4, #0]
 80059ec:	e7f4      	b.n	80059d8 <_scanf_float+0x198>
 80059ee:	f1ba 0f00 	cmp.w	sl, #0
 80059f2:	d10c      	bne.n	8005a0e <_scanf_float+0x1ce>
 80059f4:	b977      	cbnz	r7, 8005a14 <_scanf_float+0x1d4>
 80059f6:	6822      	ldr	r2, [r4, #0]
 80059f8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80059fc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005a00:	d108      	bne.n	8005a14 <_scanf_float+0x1d4>
 8005a02:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005a06:	f04f 0a01 	mov.w	sl, #1
 8005a0a:	6022      	str	r2, [r4, #0]
 8005a0c:	e7e4      	b.n	80059d8 <_scanf_float+0x198>
 8005a0e:	f1ba 0f02 	cmp.w	sl, #2
 8005a12:	d051      	beq.n	8005ab8 <_scanf_float+0x278>
 8005a14:	2d01      	cmp	r5, #1
 8005a16:	d002      	beq.n	8005a1e <_scanf_float+0x1de>
 8005a18:	2d04      	cmp	r5, #4
 8005a1a:	f47f af45 	bne.w	80058a8 <_scanf_float+0x68>
 8005a1e:	3501      	adds	r5, #1
 8005a20:	b2ed      	uxtb	r5, r5
 8005a22:	e7d9      	b.n	80059d8 <_scanf_float+0x198>
 8005a24:	f1ba 0f01 	cmp.w	sl, #1
 8005a28:	f47f af3e 	bne.w	80058a8 <_scanf_float+0x68>
 8005a2c:	f04f 0a02 	mov.w	sl, #2
 8005a30:	e7d2      	b.n	80059d8 <_scanf_float+0x198>
 8005a32:	b975      	cbnz	r5, 8005a52 <_scanf_float+0x212>
 8005a34:	2f00      	cmp	r7, #0
 8005a36:	f47f af38 	bne.w	80058aa <_scanf_float+0x6a>
 8005a3a:	6822      	ldr	r2, [r4, #0]
 8005a3c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005a40:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005a44:	f040 80ff 	bne.w	8005c46 <_scanf_float+0x406>
 8005a48:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005a4c:	2501      	movs	r5, #1
 8005a4e:	6022      	str	r2, [r4, #0]
 8005a50:	e7c2      	b.n	80059d8 <_scanf_float+0x198>
 8005a52:	2d03      	cmp	r5, #3
 8005a54:	d0e3      	beq.n	8005a1e <_scanf_float+0x1de>
 8005a56:	2d05      	cmp	r5, #5
 8005a58:	e7df      	b.n	8005a1a <_scanf_float+0x1da>
 8005a5a:	2d02      	cmp	r5, #2
 8005a5c:	f47f af24 	bne.w	80058a8 <_scanf_float+0x68>
 8005a60:	2503      	movs	r5, #3
 8005a62:	e7b9      	b.n	80059d8 <_scanf_float+0x198>
 8005a64:	2d06      	cmp	r5, #6
 8005a66:	f47f af1f 	bne.w	80058a8 <_scanf_float+0x68>
 8005a6a:	2507      	movs	r5, #7
 8005a6c:	e7b4      	b.n	80059d8 <_scanf_float+0x198>
 8005a6e:	6822      	ldr	r2, [r4, #0]
 8005a70:	0591      	lsls	r1, r2, #22
 8005a72:	f57f af19 	bpl.w	80058a8 <_scanf_float+0x68>
 8005a76:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005a7a:	6022      	str	r2, [r4, #0]
 8005a7c:	9702      	str	r7, [sp, #8]
 8005a7e:	e7ab      	b.n	80059d8 <_scanf_float+0x198>
 8005a80:	6822      	ldr	r2, [r4, #0]
 8005a82:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005a86:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005a8a:	d005      	beq.n	8005a98 <_scanf_float+0x258>
 8005a8c:	0550      	lsls	r0, r2, #21
 8005a8e:	f57f af0b 	bpl.w	80058a8 <_scanf_float+0x68>
 8005a92:	2f00      	cmp	r7, #0
 8005a94:	f000 80d7 	beq.w	8005c46 <_scanf_float+0x406>
 8005a98:	0591      	lsls	r1, r2, #22
 8005a9a:	bf58      	it	pl
 8005a9c:	9902      	ldrpl	r1, [sp, #8]
 8005a9e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005aa2:	bf58      	it	pl
 8005aa4:	1a79      	subpl	r1, r7, r1
 8005aa6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005aaa:	f04f 0700 	mov.w	r7, #0
 8005aae:	bf58      	it	pl
 8005ab0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005ab4:	6022      	str	r2, [r4, #0]
 8005ab6:	e78f      	b.n	80059d8 <_scanf_float+0x198>
 8005ab8:	f04f 0a03 	mov.w	sl, #3
 8005abc:	e78c      	b.n	80059d8 <_scanf_float+0x198>
 8005abe:	4649      	mov	r1, r9
 8005ac0:	4640      	mov	r0, r8
 8005ac2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005ac6:	4798      	blx	r3
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	f43f aedf 	beq.w	800588c <_scanf_float+0x4c>
 8005ace:	e6eb      	b.n	80058a8 <_scanf_float+0x68>
 8005ad0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ad4:	464a      	mov	r2, r9
 8005ad6:	4640      	mov	r0, r8
 8005ad8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005adc:	4798      	blx	r3
 8005ade:	6923      	ldr	r3, [r4, #16]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	6123      	str	r3, [r4, #16]
 8005ae4:	e6eb      	b.n	80058be <_scanf_float+0x7e>
 8005ae6:	1e6b      	subs	r3, r5, #1
 8005ae8:	2b06      	cmp	r3, #6
 8005aea:	d824      	bhi.n	8005b36 <_scanf_float+0x2f6>
 8005aec:	2d02      	cmp	r5, #2
 8005aee:	d836      	bhi.n	8005b5e <_scanf_float+0x31e>
 8005af0:	9b01      	ldr	r3, [sp, #4]
 8005af2:	429e      	cmp	r6, r3
 8005af4:	f67f aee7 	bls.w	80058c6 <_scanf_float+0x86>
 8005af8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005afc:	464a      	mov	r2, r9
 8005afe:	4640      	mov	r0, r8
 8005b00:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b04:	4798      	blx	r3
 8005b06:	6923      	ldr	r3, [r4, #16]
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	6123      	str	r3, [r4, #16]
 8005b0c:	e7f0      	b.n	8005af0 <_scanf_float+0x2b0>
 8005b0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005b12:	464a      	mov	r2, r9
 8005b14:	4640      	mov	r0, r8
 8005b16:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005b1a:	4798      	blx	r3
 8005b1c:	6923      	ldr	r3, [r4, #16]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	6123      	str	r3, [r4, #16]
 8005b22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b26:	fa5f fa8a 	uxtb.w	sl, sl
 8005b2a:	f1ba 0f02 	cmp.w	sl, #2
 8005b2e:	d1ee      	bne.n	8005b0e <_scanf_float+0x2ce>
 8005b30:	3d03      	subs	r5, #3
 8005b32:	b2ed      	uxtb	r5, r5
 8005b34:	1b76      	subs	r6, r6, r5
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	05da      	lsls	r2, r3, #23
 8005b3a:	d530      	bpl.n	8005b9e <_scanf_float+0x35e>
 8005b3c:	055b      	lsls	r3, r3, #21
 8005b3e:	d511      	bpl.n	8005b64 <_scanf_float+0x324>
 8005b40:	9b01      	ldr	r3, [sp, #4]
 8005b42:	429e      	cmp	r6, r3
 8005b44:	f67f aebf 	bls.w	80058c6 <_scanf_float+0x86>
 8005b48:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005b4c:	464a      	mov	r2, r9
 8005b4e:	4640      	mov	r0, r8
 8005b50:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b54:	4798      	blx	r3
 8005b56:	6923      	ldr	r3, [r4, #16]
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	6123      	str	r3, [r4, #16]
 8005b5c:	e7f0      	b.n	8005b40 <_scanf_float+0x300>
 8005b5e:	46aa      	mov	sl, r5
 8005b60:	46b3      	mov	fp, r6
 8005b62:	e7de      	b.n	8005b22 <_scanf_float+0x2e2>
 8005b64:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005b68:	6923      	ldr	r3, [r4, #16]
 8005b6a:	2965      	cmp	r1, #101	@ 0x65
 8005b6c:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b70:	f106 35ff 	add.w	r5, r6, #4294967295
 8005b74:	6123      	str	r3, [r4, #16]
 8005b76:	d00c      	beq.n	8005b92 <_scanf_float+0x352>
 8005b78:	2945      	cmp	r1, #69	@ 0x45
 8005b7a:	d00a      	beq.n	8005b92 <_scanf_float+0x352>
 8005b7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005b80:	464a      	mov	r2, r9
 8005b82:	4640      	mov	r0, r8
 8005b84:	4798      	blx	r3
 8005b86:	6923      	ldr	r3, [r4, #16]
 8005b88:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	1eb5      	subs	r5, r6, #2
 8005b90:	6123      	str	r3, [r4, #16]
 8005b92:	464a      	mov	r2, r9
 8005b94:	4640      	mov	r0, r8
 8005b96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005b9a:	4798      	blx	r3
 8005b9c:	462e      	mov	r6, r5
 8005b9e:	6822      	ldr	r2, [r4, #0]
 8005ba0:	f012 0210 	ands.w	r2, r2, #16
 8005ba4:	d001      	beq.n	8005baa <_scanf_float+0x36a>
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	e68e      	b.n	80058c8 <_scanf_float+0x88>
 8005baa:	7032      	strb	r2, [r6, #0]
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bb6:	d125      	bne.n	8005c04 <_scanf_float+0x3c4>
 8005bb8:	9b02      	ldr	r3, [sp, #8]
 8005bba:	429f      	cmp	r7, r3
 8005bbc:	d00a      	beq.n	8005bd4 <_scanf_float+0x394>
 8005bbe:	1bda      	subs	r2, r3, r7
 8005bc0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005bc4:	429e      	cmp	r6, r3
 8005bc6:	bf28      	it	cs
 8005bc8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005bcc:	4630      	mov	r0, r6
 8005bce:	491f      	ldr	r1, [pc, #124]	@ (8005c4c <_scanf_float+0x40c>)
 8005bd0:	f000 f902 	bl	8005dd8 <siprintf>
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	4640      	mov	r0, r8
 8005bd8:	9901      	ldr	r1, [sp, #4]
 8005bda:	f002 fbe9 	bl	80083b0 <_strtod_r>
 8005bde:	9b03      	ldr	r3, [sp, #12]
 8005be0:	6825      	ldr	r5, [r4, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f015 0f02 	tst.w	r5, #2
 8005be8:	4606      	mov	r6, r0
 8005bea:	460f      	mov	r7, r1
 8005bec:	f103 0204 	add.w	r2, r3, #4
 8005bf0:	d015      	beq.n	8005c1e <_scanf_float+0x3de>
 8005bf2:	9903      	ldr	r1, [sp, #12]
 8005bf4:	600a      	str	r2, [r1, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	e9c3 6700 	strd	r6, r7, [r3]
 8005bfc:	68e3      	ldr	r3, [r4, #12]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	60e3      	str	r3, [r4, #12]
 8005c02:	e7d0      	b.n	8005ba6 <_scanf_float+0x366>
 8005c04:	9b04      	ldr	r3, [sp, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0e4      	beq.n	8005bd4 <_scanf_float+0x394>
 8005c0a:	9905      	ldr	r1, [sp, #20]
 8005c0c:	230a      	movs	r3, #10
 8005c0e:	4640      	mov	r0, r8
 8005c10:	3101      	adds	r1, #1
 8005c12:	f002 fc4d 	bl	80084b0 <_strtol_r>
 8005c16:	9b04      	ldr	r3, [sp, #16]
 8005c18:	9e05      	ldr	r6, [sp, #20]
 8005c1a:	1ac2      	subs	r2, r0, r3
 8005c1c:	e7d0      	b.n	8005bc0 <_scanf_float+0x380>
 8005c1e:	076d      	lsls	r5, r5, #29
 8005c20:	d4e7      	bmi.n	8005bf2 <_scanf_float+0x3b2>
 8005c22:	9d03      	ldr	r5, [sp, #12]
 8005c24:	602a      	str	r2, [r5, #0]
 8005c26:	681d      	ldr	r5, [r3, #0]
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	f7fa feee 	bl	8000a0c <__aeabi_dcmpun>
 8005c30:	b120      	cbz	r0, 8005c3c <_scanf_float+0x3fc>
 8005c32:	4807      	ldr	r0, [pc, #28]	@ (8005c50 <_scanf_float+0x410>)
 8005c34:	f000 f9c4 	bl	8005fc0 <nanf>
 8005c38:	6028      	str	r0, [r5, #0]
 8005c3a:	e7df      	b.n	8005bfc <_scanf_float+0x3bc>
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	4639      	mov	r1, r7
 8005c40:	f7fa ff42 	bl	8000ac8 <__aeabi_d2f>
 8005c44:	e7f8      	b.n	8005c38 <_scanf_float+0x3f8>
 8005c46:	2700      	movs	r7, #0
 8005c48:	e633      	b.n	80058b2 <_scanf_float+0x72>
 8005c4a:	bf00      	nop
 8005c4c:	080096ee 	.word	0x080096ee
 8005c50:	0800982f 	.word	0x0800982f

08005c54 <std>:
 8005c54:	2300      	movs	r3, #0
 8005c56:	b510      	push	{r4, lr}
 8005c58:	4604      	mov	r4, r0
 8005c5a:	e9c0 3300 	strd	r3, r3, [r0]
 8005c5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c62:	6083      	str	r3, [r0, #8]
 8005c64:	8181      	strh	r1, [r0, #12]
 8005c66:	6643      	str	r3, [r0, #100]	@ 0x64
 8005c68:	81c2      	strh	r2, [r0, #14]
 8005c6a:	6183      	str	r3, [r0, #24]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	2208      	movs	r2, #8
 8005c70:	305c      	adds	r0, #92	@ 0x5c
 8005c72:	f000 f916 	bl	8005ea2 <memset>
 8005c76:	4b0d      	ldr	r3, [pc, #52]	@ (8005cac <std+0x58>)
 8005c78:	6224      	str	r4, [r4, #32]
 8005c7a:	6263      	str	r3, [r4, #36]	@ 0x24
 8005c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb0 <std+0x5c>)
 8005c7e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005c80:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb4 <std+0x60>)
 8005c82:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005c84:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb8 <std+0x64>)
 8005c86:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c88:	4b0c      	ldr	r3, [pc, #48]	@ (8005cbc <std+0x68>)
 8005c8a:	429c      	cmp	r4, r3
 8005c8c:	d006      	beq.n	8005c9c <std+0x48>
 8005c8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c92:	4294      	cmp	r4, r2
 8005c94:	d002      	beq.n	8005c9c <std+0x48>
 8005c96:	33d0      	adds	r3, #208	@ 0xd0
 8005c98:	429c      	cmp	r4, r3
 8005c9a:	d105      	bne.n	8005ca8 <std+0x54>
 8005c9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ca4:	f000 b97a 	b.w	8005f9c <__retarget_lock_init_recursive>
 8005ca8:	bd10      	pop	{r4, pc}
 8005caa:	bf00      	nop
 8005cac:	08005e1d 	.word	0x08005e1d
 8005cb0:	08005e3f 	.word	0x08005e3f
 8005cb4:	08005e77 	.word	0x08005e77
 8005cb8:	08005e9b 	.word	0x08005e9b
 8005cbc:	20000390 	.word	0x20000390

08005cc0 <stdio_exit_handler>:
 8005cc0:	4a02      	ldr	r2, [pc, #8]	@ (8005ccc <stdio_exit_handler+0xc>)
 8005cc2:	4903      	ldr	r1, [pc, #12]	@ (8005cd0 <stdio_exit_handler+0x10>)
 8005cc4:	4803      	ldr	r0, [pc, #12]	@ (8005cd4 <stdio_exit_handler+0x14>)
 8005cc6:	f000 b869 	b.w	8005d9c <_fwalk_sglue>
 8005cca:	bf00      	nop
 8005ccc:	2000000c 	.word	0x2000000c
 8005cd0:	08008865 	.word	0x08008865
 8005cd4:	2000001c 	.word	0x2000001c

08005cd8 <cleanup_stdio>:
 8005cd8:	6841      	ldr	r1, [r0, #4]
 8005cda:	4b0c      	ldr	r3, [pc, #48]	@ (8005d0c <cleanup_stdio+0x34>)
 8005cdc:	b510      	push	{r4, lr}
 8005cde:	4299      	cmp	r1, r3
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	d001      	beq.n	8005ce8 <cleanup_stdio+0x10>
 8005ce4:	f002 fdbe 	bl	8008864 <_fflush_r>
 8005ce8:	68a1      	ldr	r1, [r4, #8]
 8005cea:	4b09      	ldr	r3, [pc, #36]	@ (8005d10 <cleanup_stdio+0x38>)
 8005cec:	4299      	cmp	r1, r3
 8005cee:	d002      	beq.n	8005cf6 <cleanup_stdio+0x1e>
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f002 fdb7 	bl	8008864 <_fflush_r>
 8005cf6:	68e1      	ldr	r1, [r4, #12]
 8005cf8:	4b06      	ldr	r3, [pc, #24]	@ (8005d14 <cleanup_stdio+0x3c>)
 8005cfa:	4299      	cmp	r1, r3
 8005cfc:	d004      	beq.n	8005d08 <cleanup_stdio+0x30>
 8005cfe:	4620      	mov	r0, r4
 8005d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d04:	f002 bdae 	b.w	8008864 <_fflush_r>
 8005d08:	bd10      	pop	{r4, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20000390 	.word	0x20000390
 8005d10:	200003f8 	.word	0x200003f8
 8005d14:	20000460 	.word	0x20000460

08005d18 <global_stdio_init.part.0>:
 8005d18:	b510      	push	{r4, lr}
 8005d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d48 <global_stdio_init.part.0+0x30>)
 8005d1c:	4c0b      	ldr	r4, [pc, #44]	@ (8005d4c <global_stdio_init.part.0+0x34>)
 8005d1e:	4a0c      	ldr	r2, [pc, #48]	@ (8005d50 <global_stdio_init.part.0+0x38>)
 8005d20:	4620      	mov	r0, r4
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	2104      	movs	r1, #4
 8005d26:	2200      	movs	r2, #0
 8005d28:	f7ff ff94 	bl	8005c54 <std>
 8005d2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d30:	2201      	movs	r2, #1
 8005d32:	2109      	movs	r1, #9
 8005d34:	f7ff ff8e 	bl	8005c54 <std>
 8005d38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d42:	2112      	movs	r1, #18
 8005d44:	f7ff bf86 	b.w	8005c54 <std>
 8005d48:	200004c8 	.word	0x200004c8
 8005d4c:	20000390 	.word	0x20000390
 8005d50:	08005cc1 	.word	0x08005cc1

08005d54 <__sfp_lock_acquire>:
 8005d54:	4801      	ldr	r0, [pc, #4]	@ (8005d5c <__sfp_lock_acquire+0x8>)
 8005d56:	f000 b922 	b.w	8005f9e <__retarget_lock_acquire_recursive>
 8005d5a:	bf00      	nop
 8005d5c:	200004d1 	.word	0x200004d1

08005d60 <__sfp_lock_release>:
 8005d60:	4801      	ldr	r0, [pc, #4]	@ (8005d68 <__sfp_lock_release+0x8>)
 8005d62:	f000 b91d 	b.w	8005fa0 <__retarget_lock_release_recursive>
 8005d66:	bf00      	nop
 8005d68:	200004d1 	.word	0x200004d1

08005d6c <__sinit>:
 8005d6c:	b510      	push	{r4, lr}
 8005d6e:	4604      	mov	r4, r0
 8005d70:	f7ff fff0 	bl	8005d54 <__sfp_lock_acquire>
 8005d74:	6a23      	ldr	r3, [r4, #32]
 8005d76:	b11b      	cbz	r3, 8005d80 <__sinit+0x14>
 8005d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d7c:	f7ff bff0 	b.w	8005d60 <__sfp_lock_release>
 8005d80:	4b04      	ldr	r3, [pc, #16]	@ (8005d94 <__sinit+0x28>)
 8005d82:	6223      	str	r3, [r4, #32]
 8005d84:	4b04      	ldr	r3, [pc, #16]	@ (8005d98 <__sinit+0x2c>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1f5      	bne.n	8005d78 <__sinit+0xc>
 8005d8c:	f7ff ffc4 	bl	8005d18 <global_stdio_init.part.0>
 8005d90:	e7f2      	b.n	8005d78 <__sinit+0xc>
 8005d92:	bf00      	nop
 8005d94:	08005cd9 	.word	0x08005cd9
 8005d98:	200004c8 	.word	0x200004c8

08005d9c <_fwalk_sglue>:
 8005d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005da0:	4607      	mov	r7, r0
 8005da2:	4688      	mov	r8, r1
 8005da4:	4614      	mov	r4, r2
 8005da6:	2600      	movs	r6, #0
 8005da8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dac:	f1b9 0901 	subs.w	r9, r9, #1
 8005db0:	d505      	bpl.n	8005dbe <_fwalk_sglue+0x22>
 8005db2:	6824      	ldr	r4, [r4, #0]
 8005db4:	2c00      	cmp	r4, #0
 8005db6:	d1f7      	bne.n	8005da8 <_fwalk_sglue+0xc>
 8005db8:	4630      	mov	r0, r6
 8005dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dbe:	89ab      	ldrh	r3, [r5, #12]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d907      	bls.n	8005dd4 <_fwalk_sglue+0x38>
 8005dc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	d003      	beq.n	8005dd4 <_fwalk_sglue+0x38>
 8005dcc:	4629      	mov	r1, r5
 8005dce:	4638      	mov	r0, r7
 8005dd0:	47c0      	blx	r8
 8005dd2:	4306      	orrs	r6, r0
 8005dd4:	3568      	adds	r5, #104	@ 0x68
 8005dd6:	e7e9      	b.n	8005dac <_fwalk_sglue+0x10>

08005dd8 <siprintf>:
 8005dd8:	b40e      	push	{r1, r2, r3}
 8005dda:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005dde:	b510      	push	{r4, lr}
 8005de0:	2400      	movs	r4, #0
 8005de2:	b09d      	sub	sp, #116	@ 0x74
 8005de4:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005de6:	9002      	str	r0, [sp, #8]
 8005de8:	9006      	str	r0, [sp, #24]
 8005dea:	9107      	str	r1, [sp, #28]
 8005dec:	9104      	str	r1, [sp, #16]
 8005dee:	4809      	ldr	r0, [pc, #36]	@ (8005e14 <siprintf+0x3c>)
 8005df0:	4909      	ldr	r1, [pc, #36]	@ (8005e18 <siprintf+0x40>)
 8005df2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005df6:	9105      	str	r1, [sp, #20]
 8005df8:	6800      	ldr	r0, [r0, #0]
 8005dfa:	a902      	add	r1, sp, #8
 8005dfc:	9301      	str	r3, [sp, #4]
 8005dfe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005e00:	f002 fbb4 	bl	800856c <_svfiprintf_r>
 8005e04:	9b02      	ldr	r3, [sp, #8]
 8005e06:	701c      	strb	r4, [r3, #0]
 8005e08:	b01d      	add	sp, #116	@ 0x74
 8005e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e0e:	b003      	add	sp, #12
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	20000018 	.word	0x20000018
 8005e18:	ffff0208 	.word	0xffff0208

08005e1c <__sread>:
 8005e1c:	b510      	push	{r4, lr}
 8005e1e:	460c      	mov	r4, r1
 8005e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e24:	f000 f86c 	bl	8005f00 <_read_r>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	bfab      	itete	ge
 8005e2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e2e:	89a3      	ldrhlt	r3, [r4, #12]
 8005e30:	181b      	addge	r3, r3, r0
 8005e32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e36:	bfac      	ite	ge
 8005e38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e3a:	81a3      	strhlt	r3, [r4, #12]
 8005e3c:	bd10      	pop	{r4, pc}

08005e3e <__swrite>:
 8005e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e42:	461f      	mov	r7, r3
 8005e44:	898b      	ldrh	r3, [r1, #12]
 8005e46:	4605      	mov	r5, r0
 8005e48:	05db      	lsls	r3, r3, #23
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	4616      	mov	r6, r2
 8005e4e:	d505      	bpl.n	8005e5c <__swrite+0x1e>
 8005e50:	2302      	movs	r3, #2
 8005e52:	2200      	movs	r2, #0
 8005e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e58:	f000 f840 	bl	8005edc <_lseek_r>
 8005e5c:	89a3      	ldrh	r3, [r4, #12]
 8005e5e:	4632      	mov	r2, r6
 8005e60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e64:	81a3      	strh	r3, [r4, #12]
 8005e66:	4628      	mov	r0, r5
 8005e68:	463b      	mov	r3, r7
 8005e6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e72:	f000 b857 	b.w	8005f24 <_write_r>

08005e76 <__sseek>:
 8005e76:	b510      	push	{r4, lr}
 8005e78:	460c      	mov	r4, r1
 8005e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e7e:	f000 f82d 	bl	8005edc <_lseek_r>
 8005e82:	1c43      	adds	r3, r0, #1
 8005e84:	89a3      	ldrh	r3, [r4, #12]
 8005e86:	bf15      	itete	ne
 8005e88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e92:	81a3      	strheq	r3, [r4, #12]
 8005e94:	bf18      	it	ne
 8005e96:	81a3      	strhne	r3, [r4, #12]
 8005e98:	bd10      	pop	{r4, pc}

08005e9a <__sclose>:
 8005e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e9e:	f000 b80d 	b.w	8005ebc <_close_r>

08005ea2 <memset>:
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	4402      	add	r2, r0
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d100      	bne.n	8005eac <memset+0xa>
 8005eaa:	4770      	bx	lr
 8005eac:	f803 1b01 	strb.w	r1, [r3], #1
 8005eb0:	e7f9      	b.n	8005ea6 <memset+0x4>
	...

08005eb4 <_localeconv_r>:
 8005eb4:	4800      	ldr	r0, [pc, #0]	@ (8005eb8 <_localeconv_r+0x4>)
 8005eb6:	4770      	bx	lr
 8005eb8:	20000158 	.word	0x20000158

08005ebc <_close_r>:
 8005ebc:	b538      	push	{r3, r4, r5, lr}
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	4d05      	ldr	r5, [pc, #20]	@ (8005ed8 <_close_r+0x1c>)
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	4608      	mov	r0, r1
 8005ec6:	602b      	str	r3, [r5, #0]
 8005ec8:	f7fb fb07 	bl	80014da <_close>
 8005ecc:	1c43      	adds	r3, r0, #1
 8005ece:	d102      	bne.n	8005ed6 <_close_r+0x1a>
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	b103      	cbz	r3, 8005ed6 <_close_r+0x1a>
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	bd38      	pop	{r3, r4, r5, pc}
 8005ed8:	200004cc 	.word	0x200004cc

08005edc <_lseek_r>:
 8005edc:	b538      	push	{r3, r4, r5, lr}
 8005ede:	4604      	mov	r4, r0
 8005ee0:	4608      	mov	r0, r1
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	4d05      	ldr	r5, [pc, #20]	@ (8005efc <_lseek_r+0x20>)
 8005ee8:	602a      	str	r2, [r5, #0]
 8005eea:	461a      	mov	r2, r3
 8005eec:	f7fb fb19 	bl	8001522 <_lseek>
 8005ef0:	1c43      	adds	r3, r0, #1
 8005ef2:	d102      	bne.n	8005efa <_lseek_r+0x1e>
 8005ef4:	682b      	ldr	r3, [r5, #0]
 8005ef6:	b103      	cbz	r3, 8005efa <_lseek_r+0x1e>
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	bd38      	pop	{r3, r4, r5, pc}
 8005efc:	200004cc 	.word	0x200004cc

08005f00 <_read_r>:
 8005f00:	b538      	push	{r3, r4, r5, lr}
 8005f02:	4604      	mov	r4, r0
 8005f04:	4608      	mov	r0, r1
 8005f06:	4611      	mov	r1, r2
 8005f08:	2200      	movs	r2, #0
 8005f0a:	4d05      	ldr	r5, [pc, #20]	@ (8005f20 <_read_r+0x20>)
 8005f0c:	602a      	str	r2, [r5, #0]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	f7fb faaa 	bl	8001468 <_read>
 8005f14:	1c43      	adds	r3, r0, #1
 8005f16:	d102      	bne.n	8005f1e <_read_r+0x1e>
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	b103      	cbz	r3, 8005f1e <_read_r+0x1e>
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	bd38      	pop	{r3, r4, r5, pc}
 8005f20:	200004cc 	.word	0x200004cc

08005f24 <_write_r>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	4604      	mov	r4, r0
 8005f28:	4608      	mov	r0, r1
 8005f2a:	4611      	mov	r1, r2
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	4d05      	ldr	r5, [pc, #20]	@ (8005f44 <_write_r+0x20>)
 8005f30:	602a      	str	r2, [r5, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	f7fb fab5 	bl	80014a2 <_write>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	d102      	bne.n	8005f42 <_write_r+0x1e>
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	b103      	cbz	r3, 8005f42 <_write_r+0x1e>
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	bd38      	pop	{r3, r4, r5, pc}
 8005f44:	200004cc 	.word	0x200004cc

08005f48 <__errno>:
 8005f48:	4b01      	ldr	r3, [pc, #4]	@ (8005f50 <__errno+0x8>)
 8005f4a:	6818      	ldr	r0, [r3, #0]
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	20000018 	.word	0x20000018

08005f54 <__libc_init_array>:
 8005f54:	b570      	push	{r4, r5, r6, lr}
 8005f56:	2600      	movs	r6, #0
 8005f58:	4d0c      	ldr	r5, [pc, #48]	@ (8005f8c <__libc_init_array+0x38>)
 8005f5a:	4c0d      	ldr	r4, [pc, #52]	@ (8005f90 <__libc_init_array+0x3c>)
 8005f5c:	1b64      	subs	r4, r4, r5
 8005f5e:	10a4      	asrs	r4, r4, #2
 8005f60:	42a6      	cmp	r6, r4
 8005f62:	d109      	bne.n	8005f78 <__libc_init_array+0x24>
 8005f64:	f003 fb6a 	bl	800963c <_init>
 8005f68:	2600      	movs	r6, #0
 8005f6a:	4d0a      	ldr	r5, [pc, #40]	@ (8005f94 <__libc_init_array+0x40>)
 8005f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8005f98 <__libc_init_array+0x44>)
 8005f6e:	1b64      	subs	r4, r4, r5
 8005f70:	10a4      	asrs	r4, r4, #2
 8005f72:	42a6      	cmp	r6, r4
 8005f74:	d105      	bne.n	8005f82 <__libc_init_array+0x2e>
 8005f76:	bd70      	pop	{r4, r5, r6, pc}
 8005f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f7c:	4798      	blx	r3
 8005f7e:	3601      	adds	r6, #1
 8005f80:	e7ee      	b.n	8005f60 <__libc_init_array+0xc>
 8005f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f86:	4798      	blx	r3
 8005f88:	3601      	adds	r6, #1
 8005f8a:	e7f2      	b.n	8005f72 <__libc_init_array+0x1e>
 8005f8c:	08009aec 	.word	0x08009aec
 8005f90:	08009aec 	.word	0x08009aec
 8005f94:	08009aec 	.word	0x08009aec
 8005f98:	08009af0 	.word	0x08009af0

08005f9c <__retarget_lock_init_recursive>:
 8005f9c:	4770      	bx	lr

08005f9e <__retarget_lock_acquire_recursive>:
 8005f9e:	4770      	bx	lr

08005fa0 <__retarget_lock_release_recursive>:
 8005fa0:	4770      	bx	lr

08005fa2 <memchr>:
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	b510      	push	{r4, lr}
 8005fa6:	b2c9      	uxtb	r1, r1
 8005fa8:	4402      	add	r2, r0
 8005faa:	4293      	cmp	r3, r2
 8005fac:	4618      	mov	r0, r3
 8005fae:	d101      	bne.n	8005fb4 <memchr+0x12>
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	e003      	b.n	8005fbc <memchr+0x1a>
 8005fb4:	7804      	ldrb	r4, [r0, #0]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	428c      	cmp	r4, r1
 8005fba:	d1f6      	bne.n	8005faa <memchr+0x8>
 8005fbc:	bd10      	pop	{r4, pc}
	...

08005fc0 <nanf>:
 8005fc0:	4800      	ldr	r0, [pc, #0]	@ (8005fc4 <nanf+0x4>)
 8005fc2:	4770      	bx	lr
 8005fc4:	7fc00000 	.word	0x7fc00000

08005fc8 <quorem>:
 8005fc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fcc:	6903      	ldr	r3, [r0, #16]
 8005fce:	690c      	ldr	r4, [r1, #16]
 8005fd0:	4607      	mov	r7, r0
 8005fd2:	42a3      	cmp	r3, r4
 8005fd4:	db7e      	blt.n	80060d4 <quorem+0x10c>
 8005fd6:	3c01      	subs	r4, #1
 8005fd8:	00a3      	lsls	r3, r4, #2
 8005fda:	f100 0514 	add.w	r5, r0, #20
 8005fde:	f101 0814 	add.w	r8, r1, #20
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fe8:	9301      	str	r3, [sp, #4]
 8005fea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005fee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ffa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ffe:	d32e      	bcc.n	800605e <quorem+0x96>
 8006000:	f04f 0a00 	mov.w	sl, #0
 8006004:	46c4      	mov	ip, r8
 8006006:	46ae      	mov	lr, r5
 8006008:	46d3      	mov	fp, sl
 800600a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800600e:	b298      	uxth	r0, r3
 8006010:	fb06 a000 	mla	r0, r6, r0, sl
 8006014:	0c1b      	lsrs	r3, r3, #16
 8006016:	0c02      	lsrs	r2, r0, #16
 8006018:	fb06 2303 	mla	r3, r6, r3, r2
 800601c:	f8de 2000 	ldr.w	r2, [lr]
 8006020:	b280      	uxth	r0, r0
 8006022:	b292      	uxth	r2, r2
 8006024:	1a12      	subs	r2, r2, r0
 8006026:	445a      	add	r2, fp
 8006028:	f8de 0000 	ldr.w	r0, [lr]
 800602c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006030:	b29b      	uxth	r3, r3
 8006032:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006036:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800603a:	b292      	uxth	r2, r2
 800603c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006040:	45e1      	cmp	r9, ip
 8006042:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006046:	f84e 2b04 	str.w	r2, [lr], #4
 800604a:	d2de      	bcs.n	800600a <quorem+0x42>
 800604c:	9b00      	ldr	r3, [sp, #0]
 800604e:	58eb      	ldr	r3, [r5, r3]
 8006050:	b92b      	cbnz	r3, 800605e <quorem+0x96>
 8006052:	9b01      	ldr	r3, [sp, #4]
 8006054:	3b04      	subs	r3, #4
 8006056:	429d      	cmp	r5, r3
 8006058:	461a      	mov	r2, r3
 800605a:	d32f      	bcc.n	80060bc <quorem+0xf4>
 800605c:	613c      	str	r4, [r7, #16]
 800605e:	4638      	mov	r0, r7
 8006060:	f001 f9c8 	bl	80073f4 <__mcmp>
 8006064:	2800      	cmp	r0, #0
 8006066:	db25      	blt.n	80060b4 <quorem+0xec>
 8006068:	4629      	mov	r1, r5
 800606a:	2000      	movs	r0, #0
 800606c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006070:	f8d1 c000 	ldr.w	ip, [r1]
 8006074:	fa1f fe82 	uxth.w	lr, r2
 8006078:	fa1f f38c 	uxth.w	r3, ip
 800607c:	eba3 030e 	sub.w	r3, r3, lr
 8006080:	4403      	add	r3, r0
 8006082:	0c12      	lsrs	r2, r2, #16
 8006084:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006088:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800608c:	b29b      	uxth	r3, r3
 800608e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006092:	45c1      	cmp	r9, r8
 8006094:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006098:	f841 3b04 	str.w	r3, [r1], #4
 800609c:	d2e6      	bcs.n	800606c <quorem+0xa4>
 800609e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060a6:	b922      	cbnz	r2, 80060b2 <quorem+0xea>
 80060a8:	3b04      	subs	r3, #4
 80060aa:	429d      	cmp	r5, r3
 80060ac:	461a      	mov	r2, r3
 80060ae:	d30b      	bcc.n	80060c8 <quorem+0x100>
 80060b0:	613c      	str	r4, [r7, #16]
 80060b2:	3601      	adds	r6, #1
 80060b4:	4630      	mov	r0, r6
 80060b6:	b003      	add	sp, #12
 80060b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060bc:	6812      	ldr	r2, [r2, #0]
 80060be:	3b04      	subs	r3, #4
 80060c0:	2a00      	cmp	r2, #0
 80060c2:	d1cb      	bne.n	800605c <quorem+0x94>
 80060c4:	3c01      	subs	r4, #1
 80060c6:	e7c6      	b.n	8006056 <quorem+0x8e>
 80060c8:	6812      	ldr	r2, [r2, #0]
 80060ca:	3b04      	subs	r3, #4
 80060cc:	2a00      	cmp	r2, #0
 80060ce:	d1ef      	bne.n	80060b0 <quorem+0xe8>
 80060d0:	3c01      	subs	r4, #1
 80060d2:	e7ea      	b.n	80060aa <quorem+0xe2>
 80060d4:	2000      	movs	r0, #0
 80060d6:	e7ee      	b.n	80060b6 <quorem+0xee>

080060d8 <_dtoa_r>:
 80060d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060dc:	4614      	mov	r4, r2
 80060de:	461d      	mov	r5, r3
 80060e0:	69c7      	ldr	r7, [r0, #28]
 80060e2:	b097      	sub	sp, #92	@ 0x5c
 80060e4:	4681      	mov	r9, r0
 80060e6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80060ea:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80060ec:	b97f      	cbnz	r7, 800610e <_dtoa_r+0x36>
 80060ee:	2010      	movs	r0, #16
 80060f0:	f000 fe0e 	bl	8006d10 <malloc>
 80060f4:	4602      	mov	r2, r0
 80060f6:	f8c9 001c 	str.w	r0, [r9, #28]
 80060fa:	b920      	cbnz	r0, 8006106 <_dtoa_r+0x2e>
 80060fc:	21ef      	movs	r1, #239	@ 0xef
 80060fe:	4bac      	ldr	r3, [pc, #688]	@ (80063b0 <_dtoa_r+0x2d8>)
 8006100:	48ac      	ldr	r0, [pc, #688]	@ (80063b4 <_dtoa_r+0x2dc>)
 8006102:	f002 fc27 	bl	8008954 <__assert_func>
 8006106:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800610a:	6007      	str	r7, [r0, #0]
 800610c:	60c7      	str	r7, [r0, #12]
 800610e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006112:	6819      	ldr	r1, [r3, #0]
 8006114:	b159      	cbz	r1, 800612e <_dtoa_r+0x56>
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	2301      	movs	r3, #1
 800611a:	4093      	lsls	r3, r2
 800611c:	604a      	str	r2, [r1, #4]
 800611e:	608b      	str	r3, [r1, #8]
 8006120:	4648      	mov	r0, r9
 8006122:	f000 feeb 	bl	8006efc <_Bfree>
 8006126:	2200      	movs	r2, #0
 8006128:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	1e2b      	subs	r3, r5, #0
 8006130:	bfaf      	iteee	ge
 8006132:	2300      	movge	r3, #0
 8006134:	2201      	movlt	r2, #1
 8006136:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800613a:	9307      	strlt	r3, [sp, #28]
 800613c:	bfa8      	it	ge
 800613e:	6033      	strge	r3, [r6, #0]
 8006140:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006144:	4b9c      	ldr	r3, [pc, #624]	@ (80063b8 <_dtoa_r+0x2e0>)
 8006146:	bfb8      	it	lt
 8006148:	6032      	strlt	r2, [r6, #0]
 800614a:	ea33 0308 	bics.w	r3, r3, r8
 800614e:	d112      	bne.n	8006176 <_dtoa_r+0x9e>
 8006150:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006154:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006156:	6013      	str	r3, [r2, #0]
 8006158:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800615c:	4323      	orrs	r3, r4
 800615e:	f000 855e 	beq.w	8006c1e <_dtoa_r+0xb46>
 8006162:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006164:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80063bc <_dtoa_r+0x2e4>
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 8560 	beq.w	8006c2e <_dtoa_r+0xb56>
 800616e:	f10a 0303 	add.w	r3, sl, #3
 8006172:	f000 bd5a 	b.w	8006c2a <_dtoa_r+0xb52>
 8006176:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800617a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800617e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006182:	2200      	movs	r2, #0
 8006184:	2300      	movs	r3, #0
 8006186:	f7fa fc0f 	bl	80009a8 <__aeabi_dcmpeq>
 800618a:	4607      	mov	r7, r0
 800618c:	b158      	cbz	r0, 80061a6 <_dtoa_r+0xce>
 800618e:	2301      	movs	r3, #1
 8006190:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006192:	6013      	str	r3, [r2, #0]
 8006194:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006196:	b113      	cbz	r3, 800619e <_dtoa_r+0xc6>
 8006198:	4b89      	ldr	r3, [pc, #548]	@ (80063c0 <_dtoa_r+0x2e8>)
 800619a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800619c:	6013      	str	r3, [r2, #0]
 800619e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80063c4 <_dtoa_r+0x2ec>
 80061a2:	f000 bd44 	b.w	8006c2e <_dtoa_r+0xb56>
 80061a6:	ab14      	add	r3, sp, #80	@ 0x50
 80061a8:	9301      	str	r3, [sp, #4]
 80061aa:	ab15      	add	r3, sp, #84	@ 0x54
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	4648      	mov	r0, r9
 80061b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80061b4:	f001 fa36 	bl	8007624 <__d2b>
 80061b8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80061bc:	9003      	str	r0, [sp, #12]
 80061be:	2e00      	cmp	r6, #0
 80061c0:	d078      	beq.n	80062b4 <_dtoa_r+0x1dc>
 80061c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061c8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80061cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061d0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80061d4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80061d8:	9712      	str	r7, [sp, #72]	@ 0x48
 80061da:	4619      	mov	r1, r3
 80061dc:	2200      	movs	r2, #0
 80061de:	4b7a      	ldr	r3, [pc, #488]	@ (80063c8 <_dtoa_r+0x2f0>)
 80061e0:	f7f9 ffc2 	bl	8000168 <__aeabi_dsub>
 80061e4:	a36c      	add	r3, pc, #432	@ (adr r3, 8006398 <_dtoa_r+0x2c0>)
 80061e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ea:	f7fa f975 	bl	80004d8 <__aeabi_dmul>
 80061ee:	a36c      	add	r3, pc, #432	@ (adr r3, 80063a0 <_dtoa_r+0x2c8>)
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f4:	f7f9 ffba 	bl	800016c <__adddf3>
 80061f8:	4604      	mov	r4, r0
 80061fa:	4630      	mov	r0, r6
 80061fc:	460d      	mov	r5, r1
 80061fe:	f7fa f901 	bl	8000404 <__aeabi_i2d>
 8006202:	a369      	add	r3, pc, #420	@ (adr r3, 80063a8 <_dtoa_r+0x2d0>)
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	f7fa f966 	bl	80004d8 <__aeabi_dmul>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4620      	mov	r0, r4
 8006212:	4629      	mov	r1, r5
 8006214:	f7f9 ffaa 	bl	800016c <__adddf3>
 8006218:	4604      	mov	r4, r0
 800621a:	460d      	mov	r5, r1
 800621c:	f7fa fc0c 	bl	8000a38 <__aeabi_d2iz>
 8006220:	2200      	movs	r2, #0
 8006222:	4607      	mov	r7, r0
 8006224:	2300      	movs	r3, #0
 8006226:	4620      	mov	r0, r4
 8006228:	4629      	mov	r1, r5
 800622a:	f7fa fbc7 	bl	80009bc <__aeabi_dcmplt>
 800622e:	b140      	cbz	r0, 8006242 <_dtoa_r+0x16a>
 8006230:	4638      	mov	r0, r7
 8006232:	f7fa f8e7 	bl	8000404 <__aeabi_i2d>
 8006236:	4622      	mov	r2, r4
 8006238:	462b      	mov	r3, r5
 800623a:	f7fa fbb5 	bl	80009a8 <__aeabi_dcmpeq>
 800623e:	b900      	cbnz	r0, 8006242 <_dtoa_r+0x16a>
 8006240:	3f01      	subs	r7, #1
 8006242:	2f16      	cmp	r7, #22
 8006244:	d854      	bhi.n	80062f0 <_dtoa_r+0x218>
 8006246:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800624a:	4b60      	ldr	r3, [pc, #384]	@ (80063cc <_dtoa_r+0x2f4>)
 800624c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	f7fa fbb2 	bl	80009bc <__aeabi_dcmplt>
 8006258:	2800      	cmp	r0, #0
 800625a:	d04b      	beq.n	80062f4 <_dtoa_r+0x21c>
 800625c:	2300      	movs	r3, #0
 800625e:	3f01      	subs	r7, #1
 8006260:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006262:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006264:	1b9b      	subs	r3, r3, r6
 8006266:	1e5a      	subs	r2, r3, #1
 8006268:	bf49      	itett	mi
 800626a:	f1c3 0301 	rsbmi	r3, r3, #1
 800626e:	2300      	movpl	r3, #0
 8006270:	9304      	strmi	r3, [sp, #16]
 8006272:	2300      	movmi	r3, #0
 8006274:	9209      	str	r2, [sp, #36]	@ 0x24
 8006276:	bf54      	ite	pl
 8006278:	9304      	strpl	r3, [sp, #16]
 800627a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800627c:	2f00      	cmp	r7, #0
 800627e:	db3b      	blt.n	80062f8 <_dtoa_r+0x220>
 8006280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006282:	970e      	str	r7, [sp, #56]	@ 0x38
 8006284:	443b      	add	r3, r7
 8006286:	9309      	str	r3, [sp, #36]	@ 0x24
 8006288:	2300      	movs	r3, #0
 800628a:	930a      	str	r3, [sp, #40]	@ 0x28
 800628c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800628e:	2b09      	cmp	r3, #9
 8006290:	d865      	bhi.n	800635e <_dtoa_r+0x286>
 8006292:	2b05      	cmp	r3, #5
 8006294:	bfc4      	itt	gt
 8006296:	3b04      	subgt	r3, #4
 8006298:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800629a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800629c:	bfc8      	it	gt
 800629e:	2400      	movgt	r4, #0
 80062a0:	f1a3 0302 	sub.w	r3, r3, #2
 80062a4:	bfd8      	it	le
 80062a6:	2401      	movle	r4, #1
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d864      	bhi.n	8006376 <_dtoa_r+0x29e>
 80062ac:	e8df f003 	tbb	[pc, r3]
 80062b0:	2c385553 	.word	0x2c385553
 80062b4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80062b8:	441e      	add	r6, r3
 80062ba:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80062be:	2b20      	cmp	r3, #32
 80062c0:	bfc1      	itttt	gt
 80062c2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80062c6:	fa08 f803 	lslgt.w	r8, r8, r3
 80062ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80062ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80062d2:	bfd6      	itet	le
 80062d4:	f1c3 0320 	rsble	r3, r3, #32
 80062d8:	ea48 0003 	orrgt.w	r0, r8, r3
 80062dc:	fa04 f003 	lslle.w	r0, r4, r3
 80062e0:	f7fa f880 	bl	80003e4 <__aeabi_ui2d>
 80062e4:	2201      	movs	r2, #1
 80062e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80062ea:	3e01      	subs	r6, #1
 80062ec:	9212      	str	r2, [sp, #72]	@ 0x48
 80062ee:	e774      	b.n	80061da <_dtoa_r+0x102>
 80062f0:	2301      	movs	r3, #1
 80062f2:	e7b5      	b.n	8006260 <_dtoa_r+0x188>
 80062f4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80062f6:	e7b4      	b.n	8006262 <_dtoa_r+0x18a>
 80062f8:	9b04      	ldr	r3, [sp, #16]
 80062fa:	1bdb      	subs	r3, r3, r7
 80062fc:	9304      	str	r3, [sp, #16]
 80062fe:	427b      	negs	r3, r7
 8006300:	930a      	str	r3, [sp, #40]	@ 0x28
 8006302:	2300      	movs	r3, #0
 8006304:	930e      	str	r3, [sp, #56]	@ 0x38
 8006306:	e7c1      	b.n	800628c <_dtoa_r+0x1b4>
 8006308:	2301      	movs	r3, #1
 800630a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800630c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800630e:	eb07 0b03 	add.w	fp, r7, r3
 8006312:	f10b 0301 	add.w	r3, fp, #1
 8006316:	2b01      	cmp	r3, #1
 8006318:	9308      	str	r3, [sp, #32]
 800631a:	bfb8      	it	lt
 800631c:	2301      	movlt	r3, #1
 800631e:	e006      	b.n	800632e <_dtoa_r+0x256>
 8006320:	2301      	movs	r3, #1
 8006322:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006324:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006326:	2b00      	cmp	r3, #0
 8006328:	dd28      	ble.n	800637c <_dtoa_r+0x2a4>
 800632a:	469b      	mov	fp, r3
 800632c:	9308      	str	r3, [sp, #32]
 800632e:	2100      	movs	r1, #0
 8006330:	2204      	movs	r2, #4
 8006332:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006336:	f102 0514 	add.w	r5, r2, #20
 800633a:	429d      	cmp	r5, r3
 800633c:	d926      	bls.n	800638c <_dtoa_r+0x2b4>
 800633e:	6041      	str	r1, [r0, #4]
 8006340:	4648      	mov	r0, r9
 8006342:	f000 fd9b 	bl	8006e7c <_Balloc>
 8006346:	4682      	mov	sl, r0
 8006348:	2800      	cmp	r0, #0
 800634a:	d143      	bne.n	80063d4 <_dtoa_r+0x2fc>
 800634c:	4602      	mov	r2, r0
 800634e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006352:	4b1f      	ldr	r3, [pc, #124]	@ (80063d0 <_dtoa_r+0x2f8>)
 8006354:	e6d4      	b.n	8006100 <_dtoa_r+0x28>
 8006356:	2300      	movs	r3, #0
 8006358:	e7e3      	b.n	8006322 <_dtoa_r+0x24a>
 800635a:	2300      	movs	r3, #0
 800635c:	e7d5      	b.n	800630a <_dtoa_r+0x232>
 800635e:	2401      	movs	r4, #1
 8006360:	2300      	movs	r3, #0
 8006362:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006364:	9320      	str	r3, [sp, #128]	@ 0x80
 8006366:	f04f 3bff 	mov.w	fp, #4294967295
 800636a:	2200      	movs	r2, #0
 800636c:	2312      	movs	r3, #18
 800636e:	f8cd b020 	str.w	fp, [sp, #32]
 8006372:	9221      	str	r2, [sp, #132]	@ 0x84
 8006374:	e7db      	b.n	800632e <_dtoa_r+0x256>
 8006376:	2301      	movs	r3, #1
 8006378:	930b      	str	r3, [sp, #44]	@ 0x2c
 800637a:	e7f4      	b.n	8006366 <_dtoa_r+0x28e>
 800637c:	f04f 0b01 	mov.w	fp, #1
 8006380:	465b      	mov	r3, fp
 8006382:	f8cd b020 	str.w	fp, [sp, #32]
 8006386:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800638a:	e7d0      	b.n	800632e <_dtoa_r+0x256>
 800638c:	3101      	adds	r1, #1
 800638e:	0052      	lsls	r2, r2, #1
 8006390:	e7d1      	b.n	8006336 <_dtoa_r+0x25e>
 8006392:	bf00      	nop
 8006394:	f3af 8000 	nop.w
 8006398:	636f4361 	.word	0x636f4361
 800639c:	3fd287a7 	.word	0x3fd287a7
 80063a0:	8b60c8b3 	.word	0x8b60c8b3
 80063a4:	3fc68a28 	.word	0x3fc68a28
 80063a8:	509f79fb 	.word	0x509f79fb
 80063ac:	3fd34413 	.word	0x3fd34413
 80063b0:	08009700 	.word	0x08009700
 80063b4:	08009717 	.word	0x08009717
 80063b8:	7ff00000 	.word	0x7ff00000
 80063bc:	080096fc 	.word	0x080096fc
 80063c0:	080096cb 	.word	0x080096cb
 80063c4:	080096ca 	.word	0x080096ca
 80063c8:	3ff80000 	.word	0x3ff80000
 80063cc:	080098c8 	.word	0x080098c8
 80063d0:	0800976f 	.word	0x0800976f
 80063d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80063d8:	6018      	str	r0, [r3, #0]
 80063da:	9b08      	ldr	r3, [sp, #32]
 80063dc:	2b0e      	cmp	r3, #14
 80063de:	f200 80a1 	bhi.w	8006524 <_dtoa_r+0x44c>
 80063e2:	2c00      	cmp	r4, #0
 80063e4:	f000 809e 	beq.w	8006524 <_dtoa_r+0x44c>
 80063e8:	2f00      	cmp	r7, #0
 80063ea:	dd33      	ble.n	8006454 <_dtoa_r+0x37c>
 80063ec:	4b9c      	ldr	r3, [pc, #624]	@ (8006660 <_dtoa_r+0x588>)
 80063ee:	f007 020f 	and.w	r2, r7, #15
 80063f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063f6:	05f8      	lsls	r0, r7, #23
 80063f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80063fc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006400:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006404:	d516      	bpl.n	8006434 <_dtoa_r+0x35c>
 8006406:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800640a:	4b96      	ldr	r3, [pc, #600]	@ (8006664 <_dtoa_r+0x58c>)
 800640c:	2603      	movs	r6, #3
 800640e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006412:	f7fa f98b 	bl	800072c <__aeabi_ddiv>
 8006416:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800641a:	f004 040f 	and.w	r4, r4, #15
 800641e:	4d91      	ldr	r5, [pc, #580]	@ (8006664 <_dtoa_r+0x58c>)
 8006420:	b954      	cbnz	r4, 8006438 <_dtoa_r+0x360>
 8006422:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006426:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800642a:	f7fa f97f 	bl	800072c <__aeabi_ddiv>
 800642e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006432:	e028      	b.n	8006486 <_dtoa_r+0x3ae>
 8006434:	2602      	movs	r6, #2
 8006436:	e7f2      	b.n	800641e <_dtoa_r+0x346>
 8006438:	07e1      	lsls	r1, r4, #31
 800643a:	d508      	bpl.n	800644e <_dtoa_r+0x376>
 800643c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006440:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006444:	f7fa f848 	bl	80004d8 <__aeabi_dmul>
 8006448:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800644c:	3601      	adds	r6, #1
 800644e:	1064      	asrs	r4, r4, #1
 8006450:	3508      	adds	r5, #8
 8006452:	e7e5      	b.n	8006420 <_dtoa_r+0x348>
 8006454:	f000 80af 	beq.w	80065b6 <_dtoa_r+0x4de>
 8006458:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800645c:	427c      	negs	r4, r7
 800645e:	4b80      	ldr	r3, [pc, #512]	@ (8006660 <_dtoa_r+0x588>)
 8006460:	f004 020f 	and.w	r2, r4, #15
 8006464:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646c:	f7fa f834 	bl	80004d8 <__aeabi_dmul>
 8006470:	2602      	movs	r6, #2
 8006472:	2300      	movs	r3, #0
 8006474:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006478:	4d7a      	ldr	r5, [pc, #488]	@ (8006664 <_dtoa_r+0x58c>)
 800647a:	1124      	asrs	r4, r4, #4
 800647c:	2c00      	cmp	r4, #0
 800647e:	f040 808f 	bne.w	80065a0 <_dtoa_r+0x4c8>
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1d3      	bne.n	800642e <_dtoa_r+0x356>
 8006486:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800648a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 8094 	beq.w	80065ba <_dtoa_r+0x4e2>
 8006492:	2200      	movs	r2, #0
 8006494:	4620      	mov	r0, r4
 8006496:	4629      	mov	r1, r5
 8006498:	4b73      	ldr	r3, [pc, #460]	@ (8006668 <_dtoa_r+0x590>)
 800649a:	f7fa fa8f 	bl	80009bc <__aeabi_dcmplt>
 800649e:	2800      	cmp	r0, #0
 80064a0:	f000 808b 	beq.w	80065ba <_dtoa_r+0x4e2>
 80064a4:	9b08      	ldr	r3, [sp, #32]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 8087 	beq.w	80065ba <_dtoa_r+0x4e2>
 80064ac:	f1bb 0f00 	cmp.w	fp, #0
 80064b0:	dd34      	ble.n	800651c <_dtoa_r+0x444>
 80064b2:	4620      	mov	r0, r4
 80064b4:	2200      	movs	r2, #0
 80064b6:	4629      	mov	r1, r5
 80064b8:	4b6c      	ldr	r3, [pc, #432]	@ (800666c <_dtoa_r+0x594>)
 80064ba:	f7fa f80d 	bl	80004d8 <__aeabi_dmul>
 80064be:	465c      	mov	r4, fp
 80064c0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80064c4:	f107 38ff 	add.w	r8, r7, #4294967295
 80064c8:	3601      	adds	r6, #1
 80064ca:	4630      	mov	r0, r6
 80064cc:	f7f9 ff9a 	bl	8000404 <__aeabi_i2d>
 80064d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064d4:	f7fa f800 	bl	80004d8 <__aeabi_dmul>
 80064d8:	2200      	movs	r2, #0
 80064da:	4b65      	ldr	r3, [pc, #404]	@ (8006670 <_dtoa_r+0x598>)
 80064dc:	f7f9 fe46 	bl	800016c <__adddf3>
 80064e0:	4605      	mov	r5, r0
 80064e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80064e6:	2c00      	cmp	r4, #0
 80064e8:	d16a      	bne.n	80065c0 <_dtoa_r+0x4e8>
 80064ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064ee:	2200      	movs	r2, #0
 80064f0:	4b60      	ldr	r3, [pc, #384]	@ (8006674 <_dtoa_r+0x59c>)
 80064f2:	f7f9 fe39 	bl	8000168 <__aeabi_dsub>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80064fe:	462a      	mov	r2, r5
 8006500:	4633      	mov	r3, r6
 8006502:	f7fa fa79 	bl	80009f8 <__aeabi_dcmpgt>
 8006506:	2800      	cmp	r0, #0
 8006508:	f040 8298 	bne.w	8006a3c <_dtoa_r+0x964>
 800650c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006510:	462a      	mov	r2, r5
 8006512:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006516:	f7fa fa51 	bl	80009bc <__aeabi_dcmplt>
 800651a:	bb38      	cbnz	r0, 800656c <_dtoa_r+0x494>
 800651c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006520:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006524:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006526:	2b00      	cmp	r3, #0
 8006528:	f2c0 8157 	blt.w	80067da <_dtoa_r+0x702>
 800652c:	2f0e      	cmp	r7, #14
 800652e:	f300 8154 	bgt.w	80067da <_dtoa_r+0x702>
 8006532:	4b4b      	ldr	r3, [pc, #300]	@ (8006660 <_dtoa_r+0x588>)
 8006534:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006538:	e9d3 3400 	ldrd	r3, r4, [r3]
 800653c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006540:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006542:	2b00      	cmp	r3, #0
 8006544:	f280 80e5 	bge.w	8006712 <_dtoa_r+0x63a>
 8006548:	9b08      	ldr	r3, [sp, #32]
 800654a:	2b00      	cmp	r3, #0
 800654c:	f300 80e1 	bgt.w	8006712 <_dtoa_r+0x63a>
 8006550:	d10c      	bne.n	800656c <_dtoa_r+0x494>
 8006552:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006556:	2200      	movs	r2, #0
 8006558:	4b46      	ldr	r3, [pc, #280]	@ (8006674 <_dtoa_r+0x59c>)
 800655a:	f7f9 ffbd 	bl	80004d8 <__aeabi_dmul>
 800655e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006562:	f7fa fa3f 	bl	80009e4 <__aeabi_dcmpge>
 8006566:	2800      	cmp	r0, #0
 8006568:	f000 8266 	beq.w	8006a38 <_dtoa_r+0x960>
 800656c:	2400      	movs	r4, #0
 800656e:	4625      	mov	r5, r4
 8006570:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006572:	4656      	mov	r6, sl
 8006574:	ea6f 0803 	mvn.w	r8, r3
 8006578:	2700      	movs	r7, #0
 800657a:	4621      	mov	r1, r4
 800657c:	4648      	mov	r0, r9
 800657e:	f000 fcbd 	bl	8006efc <_Bfree>
 8006582:	2d00      	cmp	r5, #0
 8006584:	f000 80bd 	beq.w	8006702 <_dtoa_r+0x62a>
 8006588:	b12f      	cbz	r7, 8006596 <_dtoa_r+0x4be>
 800658a:	42af      	cmp	r7, r5
 800658c:	d003      	beq.n	8006596 <_dtoa_r+0x4be>
 800658e:	4639      	mov	r1, r7
 8006590:	4648      	mov	r0, r9
 8006592:	f000 fcb3 	bl	8006efc <_Bfree>
 8006596:	4629      	mov	r1, r5
 8006598:	4648      	mov	r0, r9
 800659a:	f000 fcaf 	bl	8006efc <_Bfree>
 800659e:	e0b0      	b.n	8006702 <_dtoa_r+0x62a>
 80065a0:	07e2      	lsls	r2, r4, #31
 80065a2:	d505      	bpl.n	80065b0 <_dtoa_r+0x4d8>
 80065a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80065a8:	f7f9 ff96 	bl	80004d8 <__aeabi_dmul>
 80065ac:	2301      	movs	r3, #1
 80065ae:	3601      	adds	r6, #1
 80065b0:	1064      	asrs	r4, r4, #1
 80065b2:	3508      	adds	r5, #8
 80065b4:	e762      	b.n	800647c <_dtoa_r+0x3a4>
 80065b6:	2602      	movs	r6, #2
 80065b8:	e765      	b.n	8006486 <_dtoa_r+0x3ae>
 80065ba:	46b8      	mov	r8, r7
 80065bc:	9c08      	ldr	r4, [sp, #32]
 80065be:	e784      	b.n	80064ca <_dtoa_r+0x3f2>
 80065c0:	4b27      	ldr	r3, [pc, #156]	@ (8006660 <_dtoa_r+0x588>)
 80065c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80065c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80065cc:	4454      	add	r4, sl
 80065ce:	2900      	cmp	r1, #0
 80065d0:	d054      	beq.n	800667c <_dtoa_r+0x5a4>
 80065d2:	2000      	movs	r0, #0
 80065d4:	4928      	ldr	r1, [pc, #160]	@ (8006678 <_dtoa_r+0x5a0>)
 80065d6:	f7fa f8a9 	bl	800072c <__aeabi_ddiv>
 80065da:	4633      	mov	r3, r6
 80065dc:	462a      	mov	r2, r5
 80065de:	f7f9 fdc3 	bl	8000168 <__aeabi_dsub>
 80065e2:	4656      	mov	r6, sl
 80065e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80065e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065ec:	f7fa fa24 	bl	8000a38 <__aeabi_d2iz>
 80065f0:	4605      	mov	r5, r0
 80065f2:	f7f9 ff07 	bl	8000404 <__aeabi_i2d>
 80065f6:	4602      	mov	r2, r0
 80065f8:	460b      	mov	r3, r1
 80065fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065fe:	f7f9 fdb3 	bl	8000168 <__aeabi_dsub>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	3530      	adds	r5, #48	@ 0x30
 8006608:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800660c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006610:	f806 5b01 	strb.w	r5, [r6], #1
 8006614:	f7fa f9d2 	bl	80009bc <__aeabi_dcmplt>
 8006618:	2800      	cmp	r0, #0
 800661a:	d172      	bne.n	8006702 <_dtoa_r+0x62a>
 800661c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006620:	2000      	movs	r0, #0
 8006622:	4911      	ldr	r1, [pc, #68]	@ (8006668 <_dtoa_r+0x590>)
 8006624:	f7f9 fda0 	bl	8000168 <__aeabi_dsub>
 8006628:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800662c:	f7fa f9c6 	bl	80009bc <__aeabi_dcmplt>
 8006630:	2800      	cmp	r0, #0
 8006632:	f040 80b4 	bne.w	800679e <_dtoa_r+0x6c6>
 8006636:	42a6      	cmp	r6, r4
 8006638:	f43f af70 	beq.w	800651c <_dtoa_r+0x444>
 800663c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006640:	2200      	movs	r2, #0
 8006642:	4b0a      	ldr	r3, [pc, #40]	@ (800666c <_dtoa_r+0x594>)
 8006644:	f7f9 ff48 	bl	80004d8 <__aeabi_dmul>
 8006648:	2200      	movs	r2, #0
 800664a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800664e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006652:	4b06      	ldr	r3, [pc, #24]	@ (800666c <_dtoa_r+0x594>)
 8006654:	f7f9 ff40 	bl	80004d8 <__aeabi_dmul>
 8006658:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800665c:	e7c4      	b.n	80065e8 <_dtoa_r+0x510>
 800665e:	bf00      	nop
 8006660:	080098c8 	.word	0x080098c8
 8006664:	080098a0 	.word	0x080098a0
 8006668:	3ff00000 	.word	0x3ff00000
 800666c:	40240000 	.word	0x40240000
 8006670:	401c0000 	.word	0x401c0000
 8006674:	40140000 	.word	0x40140000
 8006678:	3fe00000 	.word	0x3fe00000
 800667c:	4631      	mov	r1, r6
 800667e:	4628      	mov	r0, r5
 8006680:	f7f9 ff2a 	bl	80004d8 <__aeabi_dmul>
 8006684:	4656      	mov	r6, sl
 8006686:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800668a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800668c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006690:	f7fa f9d2 	bl	8000a38 <__aeabi_d2iz>
 8006694:	4605      	mov	r5, r0
 8006696:	f7f9 feb5 	bl	8000404 <__aeabi_i2d>
 800669a:	4602      	mov	r2, r0
 800669c:	460b      	mov	r3, r1
 800669e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066a2:	f7f9 fd61 	bl	8000168 <__aeabi_dsub>
 80066a6:	4602      	mov	r2, r0
 80066a8:	460b      	mov	r3, r1
 80066aa:	3530      	adds	r5, #48	@ 0x30
 80066ac:	f806 5b01 	strb.w	r5, [r6], #1
 80066b0:	42a6      	cmp	r6, r4
 80066b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80066b6:	f04f 0200 	mov.w	r2, #0
 80066ba:	d124      	bne.n	8006706 <_dtoa_r+0x62e>
 80066bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80066c0:	4bae      	ldr	r3, [pc, #696]	@ (800697c <_dtoa_r+0x8a4>)
 80066c2:	f7f9 fd53 	bl	800016c <__adddf3>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066ce:	f7fa f993 	bl	80009f8 <__aeabi_dcmpgt>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d163      	bne.n	800679e <_dtoa_r+0x6c6>
 80066d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066da:	2000      	movs	r0, #0
 80066dc:	49a7      	ldr	r1, [pc, #668]	@ (800697c <_dtoa_r+0x8a4>)
 80066de:	f7f9 fd43 	bl	8000168 <__aeabi_dsub>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066ea:	f7fa f967 	bl	80009bc <__aeabi_dcmplt>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	f43f af14 	beq.w	800651c <_dtoa_r+0x444>
 80066f4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80066f6:	1e73      	subs	r3, r6, #1
 80066f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80066fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80066fe:	2b30      	cmp	r3, #48	@ 0x30
 8006700:	d0f8      	beq.n	80066f4 <_dtoa_r+0x61c>
 8006702:	4647      	mov	r7, r8
 8006704:	e03b      	b.n	800677e <_dtoa_r+0x6a6>
 8006706:	4b9e      	ldr	r3, [pc, #632]	@ (8006980 <_dtoa_r+0x8a8>)
 8006708:	f7f9 fee6 	bl	80004d8 <__aeabi_dmul>
 800670c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006710:	e7bc      	b.n	800668c <_dtoa_r+0x5b4>
 8006712:	4656      	mov	r6, sl
 8006714:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800671c:	4620      	mov	r0, r4
 800671e:	4629      	mov	r1, r5
 8006720:	f7fa f804 	bl	800072c <__aeabi_ddiv>
 8006724:	f7fa f988 	bl	8000a38 <__aeabi_d2iz>
 8006728:	4680      	mov	r8, r0
 800672a:	f7f9 fe6b 	bl	8000404 <__aeabi_i2d>
 800672e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006732:	f7f9 fed1 	bl	80004d8 <__aeabi_dmul>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	4620      	mov	r0, r4
 800673c:	4629      	mov	r1, r5
 800673e:	f7f9 fd13 	bl	8000168 <__aeabi_dsub>
 8006742:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006746:	9d08      	ldr	r5, [sp, #32]
 8006748:	f806 4b01 	strb.w	r4, [r6], #1
 800674c:	eba6 040a 	sub.w	r4, r6, sl
 8006750:	42a5      	cmp	r5, r4
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	d133      	bne.n	80067c0 <_dtoa_r+0x6e8>
 8006758:	f7f9 fd08 	bl	800016c <__adddf3>
 800675c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006760:	4604      	mov	r4, r0
 8006762:	460d      	mov	r5, r1
 8006764:	f7fa f948 	bl	80009f8 <__aeabi_dcmpgt>
 8006768:	b9c0      	cbnz	r0, 800679c <_dtoa_r+0x6c4>
 800676a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800676e:	4620      	mov	r0, r4
 8006770:	4629      	mov	r1, r5
 8006772:	f7fa f919 	bl	80009a8 <__aeabi_dcmpeq>
 8006776:	b110      	cbz	r0, 800677e <_dtoa_r+0x6a6>
 8006778:	f018 0f01 	tst.w	r8, #1
 800677c:	d10e      	bne.n	800679c <_dtoa_r+0x6c4>
 800677e:	4648      	mov	r0, r9
 8006780:	9903      	ldr	r1, [sp, #12]
 8006782:	f000 fbbb 	bl	8006efc <_Bfree>
 8006786:	2300      	movs	r3, #0
 8006788:	7033      	strb	r3, [r6, #0]
 800678a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800678c:	3701      	adds	r7, #1
 800678e:	601f      	str	r7, [r3, #0]
 8006790:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 824b 	beq.w	8006c2e <_dtoa_r+0xb56>
 8006798:	601e      	str	r6, [r3, #0]
 800679a:	e248      	b.n	8006c2e <_dtoa_r+0xb56>
 800679c:	46b8      	mov	r8, r7
 800679e:	4633      	mov	r3, r6
 80067a0:	461e      	mov	r6, r3
 80067a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067a6:	2a39      	cmp	r2, #57	@ 0x39
 80067a8:	d106      	bne.n	80067b8 <_dtoa_r+0x6e0>
 80067aa:	459a      	cmp	sl, r3
 80067ac:	d1f8      	bne.n	80067a0 <_dtoa_r+0x6c8>
 80067ae:	2230      	movs	r2, #48	@ 0x30
 80067b0:	f108 0801 	add.w	r8, r8, #1
 80067b4:	f88a 2000 	strb.w	r2, [sl]
 80067b8:	781a      	ldrb	r2, [r3, #0]
 80067ba:	3201      	adds	r2, #1
 80067bc:	701a      	strb	r2, [r3, #0]
 80067be:	e7a0      	b.n	8006702 <_dtoa_r+0x62a>
 80067c0:	2200      	movs	r2, #0
 80067c2:	4b6f      	ldr	r3, [pc, #444]	@ (8006980 <_dtoa_r+0x8a8>)
 80067c4:	f7f9 fe88 	bl	80004d8 <__aeabi_dmul>
 80067c8:	2200      	movs	r2, #0
 80067ca:	2300      	movs	r3, #0
 80067cc:	4604      	mov	r4, r0
 80067ce:	460d      	mov	r5, r1
 80067d0:	f7fa f8ea 	bl	80009a8 <__aeabi_dcmpeq>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d09f      	beq.n	8006718 <_dtoa_r+0x640>
 80067d8:	e7d1      	b.n	800677e <_dtoa_r+0x6a6>
 80067da:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80067dc:	2a00      	cmp	r2, #0
 80067de:	f000 80ea 	beq.w	80069b6 <_dtoa_r+0x8de>
 80067e2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80067e4:	2a01      	cmp	r2, #1
 80067e6:	f300 80cd 	bgt.w	8006984 <_dtoa_r+0x8ac>
 80067ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80067ec:	2a00      	cmp	r2, #0
 80067ee:	f000 80c1 	beq.w	8006974 <_dtoa_r+0x89c>
 80067f2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80067f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80067f8:	9e04      	ldr	r6, [sp, #16]
 80067fa:	9a04      	ldr	r2, [sp, #16]
 80067fc:	2101      	movs	r1, #1
 80067fe:	441a      	add	r2, r3
 8006800:	9204      	str	r2, [sp, #16]
 8006802:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006804:	4648      	mov	r0, r9
 8006806:	441a      	add	r2, r3
 8006808:	9209      	str	r2, [sp, #36]	@ 0x24
 800680a:	f000 fc75 	bl	80070f8 <__i2b>
 800680e:	4605      	mov	r5, r0
 8006810:	b166      	cbz	r6, 800682c <_dtoa_r+0x754>
 8006812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006814:	2b00      	cmp	r3, #0
 8006816:	dd09      	ble.n	800682c <_dtoa_r+0x754>
 8006818:	42b3      	cmp	r3, r6
 800681a:	bfa8      	it	ge
 800681c:	4633      	movge	r3, r6
 800681e:	9a04      	ldr	r2, [sp, #16]
 8006820:	1af6      	subs	r6, r6, r3
 8006822:	1ad2      	subs	r2, r2, r3
 8006824:	9204      	str	r2, [sp, #16]
 8006826:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	9309      	str	r3, [sp, #36]	@ 0x24
 800682c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800682e:	b30b      	cbz	r3, 8006874 <_dtoa_r+0x79c>
 8006830:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 80c6 	beq.w	80069c4 <_dtoa_r+0x8ec>
 8006838:	2c00      	cmp	r4, #0
 800683a:	f000 80c0 	beq.w	80069be <_dtoa_r+0x8e6>
 800683e:	4629      	mov	r1, r5
 8006840:	4622      	mov	r2, r4
 8006842:	4648      	mov	r0, r9
 8006844:	f000 fd10 	bl	8007268 <__pow5mult>
 8006848:	9a03      	ldr	r2, [sp, #12]
 800684a:	4601      	mov	r1, r0
 800684c:	4605      	mov	r5, r0
 800684e:	4648      	mov	r0, r9
 8006850:	f000 fc68 	bl	8007124 <__multiply>
 8006854:	9903      	ldr	r1, [sp, #12]
 8006856:	4680      	mov	r8, r0
 8006858:	4648      	mov	r0, r9
 800685a:	f000 fb4f 	bl	8006efc <_Bfree>
 800685e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006860:	1b1b      	subs	r3, r3, r4
 8006862:	930a      	str	r3, [sp, #40]	@ 0x28
 8006864:	f000 80b1 	beq.w	80069ca <_dtoa_r+0x8f2>
 8006868:	4641      	mov	r1, r8
 800686a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800686c:	4648      	mov	r0, r9
 800686e:	f000 fcfb 	bl	8007268 <__pow5mult>
 8006872:	9003      	str	r0, [sp, #12]
 8006874:	2101      	movs	r1, #1
 8006876:	4648      	mov	r0, r9
 8006878:	f000 fc3e 	bl	80070f8 <__i2b>
 800687c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800687e:	4604      	mov	r4, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	f000 81d8 	beq.w	8006c36 <_dtoa_r+0xb5e>
 8006886:	461a      	mov	r2, r3
 8006888:	4601      	mov	r1, r0
 800688a:	4648      	mov	r0, r9
 800688c:	f000 fcec 	bl	8007268 <__pow5mult>
 8006890:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006892:	4604      	mov	r4, r0
 8006894:	2b01      	cmp	r3, #1
 8006896:	f300 809f 	bgt.w	80069d8 <_dtoa_r+0x900>
 800689a:	9b06      	ldr	r3, [sp, #24]
 800689c:	2b00      	cmp	r3, #0
 800689e:	f040 8097 	bne.w	80069d0 <_dtoa_r+0x8f8>
 80068a2:	9b07      	ldr	r3, [sp, #28]
 80068a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f040 8093 	bne.w	80069d4 <_dtoa_r+0x8fc>
 80068ae:	9b07      	ldr	r3, [sp, #28]
 80068b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068b4:	0d1b      	lsrs	r3, r3, #20
 80068b6:	051b      	lsls	r3, r3, #20
 80068b8:	b133      	cbz	r3, 80068c8 <_dtoa_r+0x7f0>
 80068ba:	9b04      	ldr	r3, [sp, #16]
 80068bc:	3301      	adds	r3, #1
 80068be:	9304      	str	r3, [sp, #16]
 80068c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068c2:	3301      	adds	r3, #1
 80068c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80068c6:	2301      	movs	r3, #1
 80068c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80068ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 81b8 	beq.w	8006c42 <_dtoa_r+0xb6a>
 80068d2:	6923      	ldr	r3, [r4, #16]
 80068d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80068d8:	6918      	ldr	r0, [r3, #16]
 80068da:	f000 fbc1 	bl	8007060 <__hi0bits>
 80068de:	f1c0 0020 	rsb	r0, r0, #32
 80068e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068e4:	4418      	add	r0, r3
 80068e6:	f010 001f 	ands.w	r0, r0, #31
 80068ea:	f000 8082 	beq.w	80069f2 <_dtoa_r+0x91a>
 80068ee:	f1c0 0320 	rsb	r3, r0, #32
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	dd73      	ble.n	80069de <_dtoa_r+0x906>
 80068f6:	9b04      	ldr	r3, [sp, #16]
 80068f8:	f1c0 001c 	rsb	r0, r0, #28
 80068fc:	4403      	add	r3, r0
 80068fe:	9304      	str	r3, [sp, #16]
 8006900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006902:	4406      	add	r6, r0
 8006904:	4403      	add	r3, r0
 8006906:	9309      	str	r3, [sp, #36]	@ 0x24
 8006908:	9b04      	ldr	r3, [sp, #16]
 800690a:	2b00      	cmp	r3, #0
 800690c:	dd05      	ble.n	800691a <_dtoa_r+0x842>
 800690e:	461a      	mov	r2, r3
 8006910:	4648      	mov	r0, r9
 8006912:	9903      	ldr	r1, [sp, #12]
 8006914:	f000 fd02 	bl	800731c <__lshift>
 8006918:	9003      	str	r0, [sp, #12]
 800691a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800691c:	2b00      	cmp	r3, #0
 800691e:	dd05      	ble.n	800692c <_dtoa_r+0x854>
 8006920:	4621      	mov	r1, r4
 8006922:	461a      	mov	r2, r3
 8006924:	4648      	mov	r0, r9
 8006926:	f000 fcf9 	bl	800731c <__lshift>
 800692a:	4604      	mov	r4, r0
 800692c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800692e:	2b00      	cmp	r3, #0
 8006930:	d061      	beq.n	80069f6 <_dtoa_r+0x91e>
 8006932:	4621      	mov	r1, r4
 8006934:	9803      	ldr	r0, [sp, #12]
 8006936:	f000 fd5d 	bl	80073f4 <__mcmp>
 800693a:	2800      	cmp	r0, #0
 800693c:	da5b      	bge.n	80069f6 <_dtoa_r+0x91e>
 800693e:	2300      	movs	r3, #0
 8006940:	220a      	movs	r2, #10
 8006942:	4648      	mov	r0, r9
 8006944:	9903      	ldr	r1, [sp, #12]
 8006946:	f000 fafb 	bl	8006f40 <__multadd>
 800694a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800694c:	f107 38ff 	add.w	r8, r7, #4294967295
 8006950:	9003      	str	r0, [sp, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 8177 	beq.w	8006c46 <_dtoa_r+0xb6e>
 8006958:	4629      	mov	r1, r5
 800695a:	2300      	movs	r3, #0
 800695c:	220a      	movs	r2, #10
 800695e:	4648      	mov	r0, r9
 8006960:	f000 faee 	bl	8006f40 <__multadd>
 8006964:	f1bb 0f00 	cmp.w	fp, #0
 8006968:	4605      	mov	r5, r0
 800696a:	dc6f      	bgt.n	8006a4c <_dtoa_r+0x974>
 800696c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800696e:	2b02      	cmp	r3, #2
 8006970:	dc49      	bgt.n	8006a06 <_dtoa_r+0x92e>
 8006972:	e06b      	b.n	8006a4c <_dtoa_r+0x974>
 8006974:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006976:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800697a:	e73c      	b.n	80067f6 <_dtoa_r+0x71e>
 800697c:	3fe00000 	.word	0x3fe00000
 8006980:	40240000 	.word	0x40240000
 8006984:	9b08      	ldr	r3, [sp, #32]
 8006986:	1e5c      	subs	r4, r3, #1
 8006988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800698a:	42a3      	cmp	r3, r4
 800698c:	db09      	blt.n	80069a2 <_dtoa_r+0x8ca>
 800698e:	1b1c      	subs	r4, r3, r4
 8006990:	9b08      	ldr	r3, [sp, #32]
 8006992:	2b00      	cmp	r3, #0
 8006994:	f6bf af30 	bge.w	80067f8 <_dtoa_r+0x720>
 8006998:	9b04      	ldr	r3, [sp, #16]
 800699a:	9a08      	ldr	r2, [sp, #32]
 800699c:	1a9e      	subs	r6, r3, r2
 800699e:	2300      	movs	r3, #0
 80069a0:	e72b      	b.n	80067fa <_dtoa_r+0x722>
 80069a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80069a6:	1ae3      	subs	r3, r4, r3
 80069a8:	441a      	add	r2, r3
 80069aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80069ac:	9e04      	ldr	r6, [sp, #16]
 80069ae:	2400      	movs	r4, #0
 80069b0:	9b08      	ldr	r3, [sp, #32]
 80069b2:	920e      	str	r2, [sp, #56]	@ 0x38
 80069b4:	e721      	b.n	80067fa <_dtoa_r+0x722>
 80069b6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80069b8:	9e04      	ldr	r6, [sp, #16]
 80069ba:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80069bc:	e728      	b.n	8006810 <_dtoa_r+0x738>
 80069be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80069c2:	e751      	b.n	8006868 <_dtoa_r+0x790>
 80069c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069c6:	9903      	ldr	r1, [sp, #12]
 80069c8:	e750      	b.n	800686c <_dtoa_r+0x794>
 80069ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80069ce:	e751      	b.n	8006874 <_dtoa_r+0x79c>
 80069d0:	2300      	movs	r3, #0
 80069d2:	e779      	b.n	80068c8 <_dtoa_r+0x7f0>
 80069d4:	9b06      	ldr	r3, [sp, #24]
 80069d6:	e777      	b.n	80068c8 <_dtoa_r+0x7f0>
 80069d8:	2300      	movs	r3, #0
 80069da:	930a      	str	r3, [sp, #40]	@ 0x28
 80069dc:	e779      	b.n	80068d2 <_dtoa_r+0x7fa>
 80069de:	d093      	beq.n	8006908 <_dtoa_r+0x830>
 80069e0:	9a04      	ldr	r2, [sp, #16]
 80069e2:	331c      	adds	r3, #28
 80069e4:	441a      	add	r2, r3
 80069e6:	9204      	str	r2, [sp, #16]
 80069e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069ea:	441e      	add	r6, r3
 80069ec:	441a      	add	r2, r3
 80069ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80069f0:	e78a      	b.n	8006908 <_dtoa_r+0x830>
 80069f2:	4603      	mov	r3, r0
 80069f4:	e7f4      	b.n	80069e0 <_dtoa_r+0x908>
 80069f6:	9b08      	ldr	r3, [sp, #32]
 80069f8:	46b8      	mov	r8, r7
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	dc20      	bgt.n	8006a40 <_dtoa_r+0x968>
 80069fe:	469b      	mov	fp, r3
 8006a00:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	dd1e      	ble.n	8006a44 <_dtoa_r+0x96c>
 8006a06:	f1bb 0f00 	cmp.w	fp, #0
 8006a0a:	f47f adb1 	bne.w	8006570 <_dtoa_r+0x498>
 8006a0e:	4621      	mov	r1, r4
 8006a10:	465b      	mov	r3, fp
 8006a12:	2205      	movs	r2, #5
 8006a14:	4648      	mov	r0, r9
 8006a16:	f000 fa93 	bl	8006f40 <__multadd>
 8006a1a:	4601      	mov	r1, r0
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	9803      	ldr	r0, [sp, #12]
 8006a20:	f000 fce8 	bl	80073f4 <__mcmp>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	f77f ada3 	ble.w	8006570 <_dtoa_r+0x498>
 8006a2a:	4656      	mov	r6, sl
 8006a2c:	2331      	movs	r3, #49	@ 0x31
 8006a2e:	f108 0801 	add.w	r8, r8, #1
 8006a32:	f806 3b01 	strb.w	r3, [r6], #1
 8006a36:	e59f      	b.n	8006578 <_dtoa_r+0x4a0>
 8006a38:	46b8      	mov	r8, r7
 8006a3a:	9c08      	ldr	r4, [sp, #32]
 8006a3c:	4625      	mov	r5, r4
 8006a3e:	e7f4      	b.n	8006a2a <_dtoa_r+0x952>
 8006a40:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006a44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 8101 	beq.w	8006c4e <_dtoa_r+0xb76>
 8006a4c:	2e00      	cmp	r6, #0
 8006a4e:	dd05      	ble.n	8006a5c <_dtoa_r+0x984>
 8006a50:	4629      	mov	r1, r5
 8006a52:	4632      	mov	r2, r6
 8006a54:	4648      	mov	r0, r9
 8006a56:	f000 fc61 	bl	800731c <__lshift>
 8006a5a:	4605      	mov	r5, r0
 8006a5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d05c      	beq.n	8006b1c <_dtoa_r+0xa44>
 8006a62:	4648      	mov	r0, r9
 8006a64:	6869      	ldr	r1, [r5, #4]
 8006a66:	f000 fa09 	bl	8006e7c <_Balloc>
 8006a6a:	4606      	mov	r6, r0
 8006a6c:	b928      	cbnz	r0, 8006a7a <_dtoa_r+0x9a2>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006a74:	4b80      	ldr	r3, [pc, #512]	@ (8006c78 <_dtoa_r+0xba0>)
 8006a76:	f7ff bb43 	b.w	8006100 <_dtoa_r+0x28>
 8006a7a:	692a      	ldr	r2, [r5, #16]
 8006a7c:	f105 010c 	add.w	r1, r5, #12
 8006a80:	3202      	adds	r2, #2
 8006a82:	0092      	lsls	r2, r2, #2
 8006a84:	300c      	adds	r0, #12
 8006a86:	f001 ff51 	bl	800892c <memcpy>
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	4631      	mov	r1, r6
 8006a8e:	4648      	mov	r0, r9
 8006a90:	f000 fc44 	bl	800731c <__lshift>
 8006a94:	462f      	mov	r7, r5
 8006a96:	4605      	mov	r5, r0
 8006a98:	f10a 0301 	add.w	r3, sl, #1
 8006a9c:	9304      	str	r3, [sp, #16]
 8006a9e:	eb0a 030b 	add.w	r3, sl, fp
 8006aa2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006aa4:	9b06      	ldr	r3, [sp, #24]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8006aac:	9b04      	ldr	r3, [sp, #16]
 8006aae:	4621      	mov	r1, r4
 8006ab0:	9803      	ldr	r0, [sp, #12]
 8006ab2:	f103 3bff 	add.w	fp, r3, #4294967295
 8006ab6:	f7ff fa87 	bl	8005fc8 <quorem>
 8006aba:	4603      	mov	r3, r0
 8006abc:	4639      	mov	r1, r7
 8006abe:	3330      	adds	r3, #48	@ 0x30
 8006ac0:	9006      	str	r0, [sp, #24]
 8006ac2:	9803      	ldr	r0, [sp, #12]
 8006ac4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ac6:	f000 fc95 	bl	80073f4 <__mcmp>
 8006aca:	462a      	mov	r2, r5
 8006acc:	9008      	str	r0, [sp, #32]
 8006ace:	4621      	mov	r1, r4
 8006ad0:	4648      	mov	r0, r9
 8006ad2:	f000 fcab 	bl	800742c <__mdiff>
 8006ad6:	68c2      	ldr	r2, [r0, #12]
 8006ad8:	4606      	mov	r6, r0
 8006ada:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006adc:	bb02      	cbnz	r2, 8006b20 <_dtoa_r+0xa48>
 8006ade:	4601      	mov	r1, r0
 8006ae0:	9803      	ldr	r0, [sp, #12]
 8006ae2:	f000 fc87 	bl	80073f4 <__mcmp>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006aea:	4631      	mov	r1, r6
 8006aec:	4648      	mov	r0, r9
 8006aee:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006af2:	f000 fa03 	bl	8006efc <_Bfree>
 8006af6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006af8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006afa:	9e04      	ldr	r6, [sp, #16]
 8006afc:	ea42 0103 	orr.w	r1, r2, r3
 8006b00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b02:	4319      	orrs	r1, r3
 8006b04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b06:	d10d      	bne.n	8006b24 <_dtoa_r+0xa4c>
 8006b08:	2b39      	cmp	r3, #57	@ 0x39
 8006b0a:	d027      	beq.n	8006b5c <_dtoa_r+0xa84>
 8006b0c:	9a08      	ldr	r2, [sp, #32]
 8006b0e:	2a00      	cmp	r2, #0
 8006b10:	dd01      	ble.n	8006b16 <_dtoa_r+0xa3e>
 8006b12:	9b06      	ldr	r3, [sp, #24]
 8006b14:	3331      	adds	r3, #49	@ 0x31
 8006b16:	f88b 3000 	strb.w	r3, [fp]
 8006b1a:	e52e      	b.n	800657a <_dtoa_r+0x4a2>
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	e7b9      	b.n	8006a94 <_dtoa_r+0x9bc>
 8006b20:	2201      	movs	r2, #1
 8006b22:	e7e2      	b.n	8006aea <_dtoa_r+0xa12>
 8006b24:	9908      	ldr	r1, [sp, #32]
 8006b26:	2900      	cmp	r1, #0
 8006b28:	db04      	blt.n	8006b34 <_dtoa_r+0xa5c>
 8006b2a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006b2c:	4301      	orrs	r1, r0
 8006b2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b30:	4301      	orrs	r1, r0
 8006b32:	d120      	bne.n	8006b76 <_dtoa_r+0xa9e>
 8006b34:	2a00      	cmp	r2, #0
 8006b36:	ddee      	ble.n	8006b16 <_dtoa_r+0xa3e>
 8006b38:	2201      	movs	r2, #1
 8006b3a:	9903      	ldr	r1, [sp, #12]
 8006b3c:	4648      	mov	r0, r9
 8006b3e:	9304      	str	r3, [sp, #16]
 8006b40:	f000 fbec 	bl	800731c <__lshift>
 8006b44:	4621      	mov	r1, r4
 8006b46:	9003      	str	r0, [sp, #12]
 8006b48:	f000 fc54 	bl	80073f4 <__mcmp>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	9b04      	ldr	r3, [sp, #16]
 8006b50:	dc02      	bgt.n	8006b58 <_dtoa_r+0xa80>
 8006b52:	d1e0      	bne.n	8006b16 <_dtoa_r+0xa3e>
 8006b54:	07da      	lsls	r2, r3, #31
 8006b56:	d5de      	bpl.n	8006b16 <_dtoa_r+0xa3e>
 8006b58:	2b39      	cmp	r3, #57	@ 0x39
 8006b5a:	d1da      	bne.n	8006b12 <_dtoa_r+0xa3a>
 8006b5c:	2339      	movs	r3, #57	@ 0x39
 8006b5e:	f88b 3000 	strb.w	r3, [fp]
 8006b62:	4633      	mov	r3, r6
 8006b64:	461e      	mov	r6, r3
 8006b66:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	2a39      	cmp	r2, #57	@ 0x39
 8006b6e:	d04e      	beq.n	8006c0e <_dtoa_r+0xb36>
 8006b70:	3201      	adds	r2, #1
 8006b72:	701a      	strb	r2, [r3, #0]
 8006b74:	e501      	b.n	800657a <_dtoa_r+0x4a2>
 8006b76:	2a00      	cmp	r2, #0
 8006b78:	dd03      	ble.n	8006b82 <_dtoa_r+0xaaa>
 8006b7a:	2b39      	cmp	r3, #57	@ 0x39
 8006b7c:	d0ee      	beq.n	8006b5c <_dtoa_r+0xa84>
 8006b7e:	3301      	adds	r3, #1
 8006b80:	e7c9      	b.n	8006b16 <_dtoa_r+0xa3e>
 8006b82:	9a04      	ldr	r2, [sp, #16]
 8006b84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b86:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006b8a:	428a      	cmp	r2, r1
 8006b8c:	d028      	beq.n	8006be0 <_dtoa_r+0xb08>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	220a      	movs	r2, #10
 8006b92:	9903      	ldr	r1, [sp, #12]
 8006b94:	4648      	mov	r0, r9
 8006b96:	f000 f9d3 	bl	8006f40 <__multadd>
 8006b9a:	42af      	cmp	r7, r5
 8006b9c:	9003      	str	r0, [sp, #12]
 8006b9e:	f04f 0300 	mov.w	r3, #0
 8006ba2:	f04f 020a 	mov.w	r2, #10
 8006ba6:	4639      	mov	r1, r7
 8006ba8:	4648      	mov	r0, r9
 8006baa:	d107      	bne.n	8006bbc <_dtoa_r+0xae4>
 8006bac:	f000 f9c8 	bl	8006f40 <__multadd>
 8006bb0:	4607      	mov	r7, r0
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	9b04      	ldr	r3, [sp, #16]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	9304      	str	r3, [sp, #16]
 8006bba:	e777      	b.n	8006aac <_dtoa_r+0x9d4>
 8006bbc:	f000 f9c0 	bl	8006f40 <__multadd>
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	4607      	mov	r7, r0
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	220a      	movs	r2, #10
 8006bc8:	4648      	mov	r0, r9
 8006bca:	f000 f9b9 	bl	8006f40 <__multadd>
 8006bce:	4605      	mov	r5, r0
 8006bd0:	e7f0      	b.n	8006bb4 <_dtoa_r+0xadc>
 8006bd2:	f1bb 0f00 	cmp.w	fp, #0
 8006bd6:	bfcc      	ite	gt
 8006bd8:	465e      	movgt	r6, fp
 8006bda:	2601      	movle	r6, #1
 8006bdc:	2700      	movs	r7, #0
 8006bde:	4456      	add	r6, sl
 8006be0:	2201      	movs	r2, #1
 8006be2:	9903      	ldr	r1, [sp, #12]
 8006be4:	4648      	mov	r0, r9
 8006be6:	9304      	str	r3, [sp, #16]
 8006be8:	f000 fb98 	bl	800731c <__lshift>
 8006bec:	4621      	mov	r1, r4
 8006bee:	9003      	str	r0, [sp, #12]
 8006bf0:	f000 fc00 	bl	80073f4 <__mcmp>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	dcb4      	bgt.n	8006b62 <_dtoa_r+0xa8a>
 8006bf8:	d102      	bne.n	8006c00 <_dtoa_r+0xb28>
 8006bfa:	9b04      	ldr	r3, [sp, #16]
 8006bfc:	07db      	lsls	r3, r3, #31
 8006bfe:	d4b0      	bmi.n	8006b62 <_dtoa_r+0xa8a>
 8006c00:	4633      	mov	r3, r6
 8006c02:	461e      	mov	r6, r3
 8006c04:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c08:	2a30      	cmp	r2, #48	@ 0x30
 8006c0a:	d0fa      	beq.n	8006c02 <_dtoa_r+0xb2a>
 8006c0c:	e4b5      	b.n	800657a <_dtoa_r+0x4a2>
 8006c0e:	459a      	cmp	sl, r3
 8006c10:	d1a8      	bne.n	8006b64 <_dtoa_r+0xa8c>
 8006c12:	2331      	movs	r3, #49	@ 0x31
 8006c14:	f108 0801 	add.w	r8, r8, #1
 8006c18:	f88a 3000 	strb.w	r3, [sl]
 8006c1c:	e4ad      	b.n	800657a <_dtoa_r+0x4a2>
 8006c1e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006c20:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006c7c <_dtoa_r+0xba4>
 8006c24:	b11b      	cbz	r3, 8006c2e <_dtoa_r+0xb56>
 8006c26:	f10a 0308 	add.w	r3, sl, #8
 8006c2a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	4650      	mov	r0, sl
 8006c30:	b017      	add	sp, #92	@ 0x5c
 8006c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	f77f ae2e 	ble.w	800689a <_dtoa_r+0x7c2>
 8006c3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c40:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c42:	2001      	movs	r0, #1
 8006c44:	e64d      	b.n	80068e2 <_dtoa_r+0x80a>
 8006c46:	f1bb 0f00 	cmp.w	fp, #0
 8006c4a:	f77f aed9 	ble.w	8006a00 <_dtoa_r+0x928>
 8006c4e:	4656      	mov	r6, sl
 8006c50:	4621      	mov	r1, r4
 8006c52:	9803      	ldr	r0, [sp, #12]
 8006c54:	f7ff f9b8 	bl	8005fc8 <quorem>
 8006c58:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006c5c:	f806 3b01 	strb.w	r3, [r6], #1
 8006c60:	eba6 020a 	sub.w	r2, r6, sl
 8006c64:	4593      	cmp	fp, r2
 8006c66:	ddb4      	ble.n	8006bd2 <_dtoa_r+0xafa>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	220a      	movs	r2, #10
 8006c6c:	4648      	mov	r0, r9
 8006c6e:	9903      	ldr	r1, [sp, #12]
 8006c70:	f000 f966 	bl	8006f40 <__multadd>
 8006c74:	9003      	str	r0, [sp, #12]
 8006c76:	e7eb      	b.n	8006c50 <_dtoa_r+0xb78>
 8006c78:	0800976f 	.word	0x0800976f
 8006c7c:	080096f3 	.word	0x080096f3

08006c80 <_free_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4605      	mov	r5, r0
 8006c84:	2900      	cmp	r1, #0
 8006c86:	d040      	beq.n	8006d0a <_free_r+0x8a>
 8006c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c8c:	1f0c      	subs	r4, r1, #4
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	bfb8      	it	lt
 8006c92:	18e4      	addlt	r4, r4, r3
 8006c94:	f000 f8e6 	bl	8006e64 <__malloc_lock>
 8006c98:	4a1c      	ldr	r2, [pc, #112]	@ (8006d0c <_free_r+0x8c>)
 8006c9a:	6813      	ldr	r3, [r2, #0]
 8006c9c:	b933      	cbnz	r3, 8006cac <_free_r+0x2c>
 8006c9e:	6063      	str	r3, [r4, #4]
 8006ca0:	6014      	str	r4, [r2, #0]
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ca8:	f000 b8e2 	b.w	8006e70 <__malloc_unlock>
 8006cac:	42a3      	cmp	r3, r4
 8006cae:	d908      	bls.n	8006cc2 <_free_r+0x42>
 8006cb0:	6820      	ldr	r0, [r4, #0]
 8006cb2:	1821      	adds	r1, r4, r0
 8006cb4:	428b      	cmp	r3, r1
 8006cb6:	bf01      	itttt	eq
 8006cb8:	6819      	ldreq	r1, [r3, #0]
 8006cba:	685b      	ldreq	r3, [r3, #4]
 8006cbc:	1809      	addeq	r1, r1, r0
 8006cbe:	6021      	streq	r1, [r4, #0]
 8006cc0:	e7ed      	b.n	8006c9e <_free_r+0x1e>
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	b10b      	cbz	r3, 8006ccc <_free_r+0x4c>
 8006cc8:	42a3      	cmp	r3, r4
 8006cca:	d9fa      	bls.n	8006cc2 <_free_r+0x42>
 8006ccc:	6811      	ldr	r1, [r2, #0]
 8006cce:	1850      	adds	r0, r2, r1
 8006cd0:	42a0      	cmp	r0, r4
 8006cd2:	d10b      	bne.n	8006cec <_free_r+0x6c>
 8006cd4:	6820      	ldr	r0, [r4, #0]
 8006cd6:	4401      	add	r1, r0
 8006cd8:	1850      	adds	r0, r2, r1
 8006cda:	4283      	cmp	r3, r0
 8006cdc:	6011      	str	r1, [r2, #0]
 8006cde:	d1e0      	bne.n	8006ca2 <_free_r+0x22>
 8006ce0:	6818      	ldr	r0, [r3, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	4408      	add	r0, r1
 8006ce6:	6010      	str	r0, [r2, #0]
 8006ce8:	6053      	str	r3, [r2, #4]
 8006cea:	e7da      	b.n	8006ca2 <_free_r+0x22>
 8006cec:	d902      	bls.n	8006cf4 <_free_r+0x74>
 8006cee:	230c      	movs	r3, #12
 8006cf0:	602b      	str	r3, [r5, #0]
 8006cf2:	e7d6      	b.n	8006ca2 <_free_r+0x22>
 8006cf4:	6820      	ldr	r0, [r4, #0]
 8006cf6:	1821      	adds	r1, r4, r0
 8006cf8:	428b      	cmp	r3, r1
 8006cfa:	bf01      	itttt	eq
 8006cfc:	6819      	ldreq	r1, [r3, #0]
 8006cfe:	685b      	ldreq	r3, [r3, #4]
 8006d00:	1809      	addeq	r1, r1, r0
 8006d02:	6021      	streq	r1, [r4, #0]
 8006d04:	6063      	str	r3, [r4, #4]
 8006d06:	6054      	str	r4, [r2, #4]
 8006d08:	e7cb      	b.n	8006ca2 <_free_r+0x22>
 8006d0a:	bd38      	pop	{r3, r4, r5, pc}
 8006d0c:	200004d8 	.word	0x200004d8

08006d10 <malloc>:
 8006d10:	4b02      	ldr	r3, [pc, #8]	@ (8006d1c <malloc+0xc>)
 8006d12:	4601      	mov	r1, r0
 8006d14:	6818      	ldr	r0, [r3, #0]
 8006d16:	f000 b825 	b.w	8006d64 <_malloc_r>
 8006d1a:	bf00      	nop
 8006d1c:	20000018 	.word	0x20000018

08006d20 <sbrk_aligned>:
 8006d20:	b570      	push	{r4, r5, r6, lr}
 8006d22:	4e0f      	ldr	r6, [pc, #60]	@ (8006d60 <sbrk_aligned+0x40>)
 8006d24:	460c      	mov	r4, r1
 8006d26:	6831      	ldr	r1, [r6, #0]
 8006d28:	4605      	mov	r5, r0
 8006d2a:	b911      	cbnz	r1, 8006d32 <sbrk_aligned+0x12>
 8006d2c:	f001 fdee 	bl	800890c <_sbrk_r>
 8006d30:	6030      	str	r0, [r6, #0]
 8006d32:	4621      	mov	r1, r4
 8006d34:	4628      	mov	r0, r5
 8006d36:	f001 fde9 	bl	800890c <_sbrk_r>
 8006d3a:	1c43      	adds	r3, r0, #1
 8006d3c:	d103      	bne.n	8006d46 <sbrk_aligned+0x26>
 8006d3e:	f04f 34ff 	mov.w	r4, #4294967295
 8006d42:	4620      	mov	r0, r4
 8006d44:	bd70      	pop	{r4, r5, r6, pc}
 8006d46:	1cc4      	adds	r4, r0, #3
 8006d48:	f024 0403 	bic.w	r4, r4, #3
 8006d4c:	42a0      	cmp	r0, r4
 8006d4e:	d0f8      	beq.n	8006d42 <sbrk_aligned+0x22>
 8006d50:	1a21      	subs	r1, r4, r0
 8006d52:	4628      	mov	r0, r5
 8006d54:	f001 fdda 	bl	800890c <_sbrk_r>
 8006d58:	3001      	adds	r0, #1
 8006d5a:	d1f2      	bne.n	8006d42 <sbrk_aligned+0x22>
 8006d5c:	e7ef      	b.n	8006d3e <sbrk_aligned+0x1e>
 8006d5e:	bf00      	nop
 8006d60:	200004d4 	.word	0x200004d4

08006d64 <_malloc_r>:
 8006d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d68:	1ccd      	adds	r5, r1, #3
 8006d6a:	f025 0503 	bic.w	r5, r5, #3
 8006d6e:	3508      	adds	r5, #8
 8006d70:	2d0c      	cmp	r5, #12
 8006d72:	bf38      	it	cc
 8006d74:	250c      	movcc	r5, #12
 8006d76:	2d00      	cmp	r5, #0
 8006d78:	4606      	mov	r6, r0
 8006d7a:	db01      	blt.n	8006d80 <_malloc_r+0x1c>
 8006d7c:	42a9      	cmp	r1, r5
 8006d7e:	d904      	bls.n	8006d8a <_malloc_r+0x26>
 8006d80:	230c      	movs	r3, #12
 8006d82:	6033      	str	r3, [r6, #0]
 8006d84:	2000      	movs	r0, #0
 8006d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e60 <_malloc_r+0xfc>
 8006d8e:	f000 f869 	bl	8006e64 <__malloc_lock>
 8006d92:	f8d8 3000 	ldr.w	r3, [r8]
 8006d96:	461c      	mov	r4, r3
 8006d98:	bb44      	cbnz	r4, 8006dec <_malloc_r+0x88>
 8006d9a:	4629      	mov	r1, r5
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	f7ff ffbf 	bl	8006d20 <sbrk_aligned>
 8006da2:	1c43      	adds	r3, r0, #1
 8006da4:	4604      	mov	r4, r0
 8006da6:	d158      	bne.n	8006e5a <_malloc_r+0xf6>
 8006da8:	f8d8 4000 	ldr.w	r4, [r8]
 8006dac:	4627      	mov	r7, r4
 8006dae:	2f00      	cmp	r7, #0
 8006db0:	d143      	bne.n	8006e3a <_malloc_r+0xd6>
 8006db2:	2c00      	cmp	r4, #0
 8006db4:	d04b      	beq.n	8006e4e <_malloc_r+0xea>
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	4639      	mov	r1, r7
 8006dba:	4630      	mov	r0, r6
 8006dbc:	eb04 0903 	add.w	r9, r4, r3
 8006dc0:	f001 fda4 	bl	800890c <_sbrk_r>
 8006dc4:	4581      	cmp	r9, r0
 8006dc6:	d142      	bne.n	8006e4e <_malloc_r+0xea>
 8006dc8:	6821      	ldr	r1, [r4, #0]
 8006dca:	4630      	mov	r0, r6
 8006dcc:	1a6d      	subs	r5, r5, r1
 8006dce:	4629      	mov	r1, r5
 8006dd0:	f7ff ffa6 	bl	8006d20 <sbrk_aligned>
 8006dd4:	3001      	adds	r0, #1
 8006dd6:	d03a      	beq.n	8006e4e <_malloc_r+0xea>
 8006dd8:	6823      	ldr	r3, [r4, #0]
 8006dda:	442b      	add	r3, r5
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	f8d8 3000 	ldr.w	r3, [r8]
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	bb62      	cbnz	r2, 8006e40 <_malloc_r+0xdc>
 8006de6:	f8c8 7000 	str.w	r7, [r8]
 8006dea:	e00f      	b.n	8006e0c <_malloc_r+0xa8>
 8006dec:	6822      	ldr	r2, [r4, #0]
 8006dee:	1b52      	subs	r2, r2, r5
 8006df0:	d420      	bmi.n	8006e34 <_malloc_r+0xd0>
 8006df2:	2a0b      	cmp	r2, #11
 8006df4:	d917      	bls.n	8006e26 <_malloc_r+0xc2>
 8006df6:	1961      	adds	r1, r4, r5
 8006df8:	42a3      	cmp	r3, r4
 8006dfa:	6025      	str	r5, [r4, #0]
 8006dfc:	bf18      	it	ne
 8006dfe:	6059      	strne	r1, [r3, #4]
 8006e00:	6863      	ldr	r3, [r4, #4]
 8006e02:	bf08      	it	eq
 8006e04:	f8c8 1000 	streq.w	r1, [r8]
 8006e08:	5162      	str	r2, [r4, r5]
 8006e0a:	604b      	str	r3, [r1, #4]
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	f000 f82f 	bl	8006e70 <__malloc_unlock>
 8006e12:	f104 000b 	add.w	r0, r4, #11
 8006e16:	1d23      	adds	r3, r4, #4
 8006e18:	f020 0007 	bic.w	r0, r0, #7
 8006e1c:	1ac2      	subs	r2, r0, r3
 8006e1e:	bf1c      	itt	ne
 8006e20:	1a1b      	subne	r3, r3, r0
 8006e22:	50a3      	strne	r3, [r4, r2]
 8006e24:	e7af      	b.n	8006d86 <_malloc_r+0x22>
 8006e26:	6862      	ldr	r2, [r4, #4]
 8006e28:	42a3      	cmp	r3, r4
 8006e2a:	bf0c      	ite	eq
 8006e2c:	f8c8 2000 	streq.w	r2, [r8]
 8006e30:	605a      	strne	r2, [r3, #4]
 8006e32:	e7eb      	b.n	8006e0c <_malloc_r+0xa8>
 8006e34:	4623      	mov	r3, r4
 8006e36:	6864      	ldr	r4, [r4, #4]
 8006e38:	e7ae      	b.n	8006d98 <_malloc_r+0x34>
 8006e3a:	463c      	mov	r4, r7
 8006e3c:	687f      	ldr	r7, [r7, #4]
 8006e3e:	e7b6      	b.n	8006dae <_malloc_r+0x4a>
 8006e40:	461a      	mov	r2, r3
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	42a3      	cmp	r3, r4
 8006e46:	d1fb      	bne.n	8006e40 <_malloc_r+0xdc>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	6053      	str	r3, [r2, #4]
 8006e4c:	e7de      	b.n	8006e0c <_malloc_r+0xa8>
 8006e4e:	230c      	movs	r3, #12
 8006e50:	4630      	mov	r0, r6
 8006e52:	6033      	str	r3, [r6, #0]
 8006e54:	f000 f80c 	bl	8006e70 <__malloc_unlock>
 8006e58:	e794      	b.n	8006d84 <_malloc_r+0x20>
 8006e5a:	6005      	str	r5, [r0, #0]
 8006e5c:	e7d6      	b.n	8006e0c <_malloc_r+0xa8>
 8006e5e:	bf00      	nop
 8006e60:	200004d8 	.word	0x200004d8

08006e64 <__malloc_lock>:
 8006e64:	4801      	ldr	r0, [pc, #4]	@ (8006e6c <__malloc_lock+0x8>)
 8006e66:	f7ff b89a 	b.w	8005f9e <__retarget_lock_acquire_recursive>
 8006e6a:	bf00      	nop
 8006e6c:	200004d0 	.word	0x200004d0

08006e70 <__malloc_unlock>:
 8006e70:	4801      	ldr	r0, [pc, #4]	@ (8006e78 <__malloc_unlock+0x8>)
 8006e72:	f7ff b895 	b.w	8005fa0 <__retarget_lock_release_recursive>
 8006e76:	bf00      	nop
 8006e78:	200004d0 	.word	0x200004d0

08006e7c <_Balloc>:
 8006e7c:	b570      	push	{r4, r5, r6, lr}
 8006e7e:	69c6      	ldr	r6, [r0, #28]
 8006e80:	4604      	mov	r4, r0
 8006e82:	460d      	mov	r5, r1
 8006e84:	b976      	cbnz	r6, 8006ea4 <_Balloc+0x28>
 8006e86:	2010      	movs	r0, #16
 8006e88:	f7ff ff42 	bl	8006d10 <malloc>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	61e0      	str	r0, [r4, #28]
 8006e90:	b920      	cbnz	r0, 8006e9c <_Balloc+0x20>
 8006e92:	216b      	movs	r1, #107	@ 0x6b
 8006e94:	4b17      	ldr	r3, [pc, #92]	@ (8006ef4 <_Balloc+0x78>)
 8006e96:	4818      	ldr	r0, [pc, #96]	@ (8006ef8 <_Balloc+0x7c>)
 8006e98:	f001 fd5c 	bl	8008954 <__assert_func>
 8006e9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ea0:	6006      	str	r6, [r0, #0]
 8006ea2:	60c6      	str	r6, [r0, #12]
 8006ea4:	69e6      	ldr	r6, [r4, #28]
 8006ea6:	68f3      	ldr	r3, [r6, #12]
 8006ea8:	b183      	cbz	r3, 8006ecc <_Balloc+0x50>
 8006eaa:	69e3      	ldr	r3, [r4, #28]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006eb2:	b9b8      	cbnz	r0, 8006ee4 <_Balloc+0x68>
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	fa01 f605 	lsl.w	r6, r1, r5
 8006eba:	1d72      	adds	r2, r6, #5
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	0092      	lsls	r2, r2, #2
 8006ec0:	f001 fd66 	bl	8008990 <_calloc_r>
 8006ec4:	b160      	cbz	r0, 8006ee0 <_Balloc+0x64>
 8006ec6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006eca:	e00e      	b.n	8006eea <_Balloc+0x6e>
 8006ecc:	2221      	movs	r2, #33	@ 0x21
 8006ece:	2104      	movs	r1, #4
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f001 fd5d 	bl	8008990 <_calloc_r>
 8006ed6:	69e3      	ldr	r3, [r4, #28]
 8006ed8:	60f0      	str	r0, [r6, #12]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1e4      	bne.n	8006eaa <_Balloc+0x2e>
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	bd70      	pop	{r4, r5, r6, pc}
 8006ee4:	6802      	ldr	r2, [r0, #0]
 8006ee6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006eea:	2300      	movs	r3, #0
 8006eec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ef0:	e7f7      	b.n	8006ee2 <_Balloc+0x66>
 8006ef2:	bf00      	nop
 8006ef4:	08009700 	.word	0x08009700
 8006ef8:	08009780 	.word	0x08009780

08006efc <_Bfree>:
 8006efc:	b570      	push	{r4, r5, r6, lr}
 8006efe:	69c6      	ldr	r6, [r0, #28]
 8006f00:	4605      	mov	r5, r0
 8006f02:	460c      	mov	r4, r1
 8006f04:	b976      	cbnz	r6, 8006f24 <_Bfree+0x28>
 8006f06:	2010      	movs	r0, #16
 8006f08:	f7ff ff02 	bl	8006d10 <malloc>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	61e8      	str	r0, [r5, #28]
 8006f10:	b920      	cbnz	r0, 8006f1c <_Bfree+0x20>
 8006f12:	218f      	movs	r1, #143	@ 0x8f
 8006f14:	4b08      	ldr	r3, [pc, #32]	@ (8006f38 <_Bfree+0x3c>)
 8006f16:	4809      	ldr	r0, [pc, #36]	@ (8006f3c <_Bfree+0x40>)
 8006f18:	f001 fd1c 	bl	8008954 <__assert_func>
 8006f1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f20:	6006      	str	r6, [r0, #0]
 8006f22:	60c6      	str	r6, [r0, #12]
 8006f24:	b13c      	cbz	r4, 8006f36 <_Bfree+0x3a>
 8006f26:	69eb      	ldr	r3, [r5, #28]
 8006f28:	6862      	ldr	r2, [r4, #4]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f30:	6021      	str	r1, [r4, #0]
 8006f32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f36:	bd70      	pop	{r4, r5, r6, pc}
 8006f38:	08009700 	.word	0x08009700
 8006f3c:	08009780 	.word	0x08009780

08006f40 <__multadd>:
 8006f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f44:	4607      	mov	r7, r0
 8006f46:	460c      	mov	r4, r1
 8006f48:	461e      	mov	r6, r3
 8006f4a:	2000      	movs	r0, #0
 8006f4c:	690d      	ldr	r5, [r1, #16]
 8006f4e:	f101 0c14 	add.w	ip, r1, #20
 8006f52:	f8dc 3000 	ldr.w	r3, [ip]
 8006f56:	3001      	adds	r0, #1
 8006f58:	b299      	uxth	r1, r3
 8006f5a:	fb02 6101 	mla	r1, r2, r1, r6
 8006f5e:	0c1e      	lsrs	r6, r3, #16
 8006f60:	0c0b      	lsrs	r3, r1, #16
 8006f62:	fb02 3306 	mla	r3, r2, r6, r3
 8006f66:	b289      	uxth	r1, r1
 8006f68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f6c:	4285      	cmp	r5, r0
 8006f6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f72:	f84c 1b04 	str.w	r1, [ip], #4
 8006f76:	dcec      	bgt.n	8006f52 <__multadd+0x12>
 8006f78:	b30e      	cbz	r6, 8006fbe <__multadd+0x7e>
 8006f7a:	68a3      	ldr	r3, [r4, #8]
 8006f7c:	42ab      	cmp	r3, r5
 8006f7e:	dc19      	bgt.n	8006fb4 <__multadd+0x74>
 8006f80:	6861      	ldr	r1, [r4, #4]
 8006f82:	4638      	mov	r0, r7
 8006f84:	3101      	adds	r1, #1
 8006f86:	f7ff ff79 	bl	8006e7c <_Balloc>
 8006f8a:	4680      	mov	r8, r0
 8006f8c:	b928      	cbnz	r0, 8006f9a <__multadd+0x5a>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	21ba      	movs	r1, #186	@ 0xba
 8006f92:	4b0c      	ldr	r3, [pc, #48]	@ (8006fc4 <__multadd+0x84>)
 8006f94:	480c      	ldr	r0, [pc, #48]	@ (8006fc8 <__multadd+0x88>)
 8006f96:	f001 fcdd 	bl	8008954 <__assert_func>
 8006f9a:	6922      	ldr	r2, [r4, #16]
 8006f9c:	f104 010c 	add.w	r1, r4, #12
 8006fa0:	3202      	adds	r2, #2
 8006fa2:	0092      	lsls	r2, r2, #2
 8006fa4:	300c      	adds	r0, #12
 8006fa6:	f001 fcc1 	bl	800892c <memcpy>
 8006faa:	4621      	mov	r1, r4
 8006fac:	4638      	mov	r0, r7
 8006fae:	f7ff ffa5 	bl	8006efc <_Bfree>
 8006fb2:	4644      	mov	r4, r8
 8006fb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006fb8:	3501      	adds	r5, #1
 8006fba:	615e      	str	r6, [r3, #20]
 8006fbc:	6125      	str	r5, [r4, #16]
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fc4:	0800976f 	.word	0x0800976f
 8006fc8:	08009780 	.word	0x08009780

08006fcc <__s2b>:
 8006fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fd0:	4615      	mov	r5, r2
 8006fd2:	2209      	movs	r2, #9
 8006fd4:	461f      	mov	r7, r3
 8006fd6:	3308      	adds	r3, #8
 8006fd8:	460c      	mov	r4, r1
 8006fda:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fde:	4606      	mov	r6, r0
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	db09      	blt.n	8006ffc <__s2b+0x30>
 8006fe8:	4630      	mov	r0, r6
 8006fea:	f7ff ff47 	bl	8006e7c <_Balloc>
 8006fee:	b940      	cbnz	r0, 8007002 <__s2b+0x36>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	21d3      	movs	r1, #211	@ 0xd3
 8006ff4:	4b18      	ldr	r3, [pc, #96]	@ (8007058 <__s2b+0x8c>)
 8006ff6:	4819      	ldr	r0, [pc, #100]	@ (800705c <__s2b+0x90>)
 8006ff8:	f001 fcac 	bl	8008954 <__assert_func>
 8006ffc:	0052      	lsls	r2, r2, #1
 8006ffe:	3101      	adds	r1, #1
 8007000:	e7f0      	b.n	8006fe4 <__s2b+0x18>
 8007002:	9b08      	ldr	r3, [sp, #32]
 8007004:	2d09      	cmp	r5, #9
 8007006:	6143      	str	r3, [r0, #20]
 8007008:	f04f 0301 	mov.w	r3, #1
 800700c:	6103      	str	r3, [r0, #16]
 800700e:	dd16      	ble.n	800703e <__s2b+0x72>
 8007010:	f104 0909 	add.w	r9, r4, #9
 8007014:	46c8      	mov	r8, r9
 8007016:	442c      	add	r4, r5
 8007018:	f818 3b01 	ldrb.w	r3, [r8], #1
 800701c:	4601      	mov	r1, r0
 800701e:	220a      	movs	r2, #10
 8007020:	4630      	mov	r0, r6
 8007022:	3b30      	subs	r3, #48	@ 0x30
 8007024:	f7ff ff8c 	bl	8006f40 <__multadd>
 8007028:	45a0      	cmp	r8, r4
 800702a:	d1f5      	bne.n	8007018 <__s2b+0x4c>
 800702c:	f1a5 0408 	sub.w	r4, r5, #8
 8007030:	444c      	add	r4, r9
 8007032:	1b2d      	subs	r5, r5, r4
 8007034:	1963      	adds	r3, r4, r5
 8007036:	42bb      	cmp	r3, r7
 8007038:	db04      	blt.n	8007044 <__s2b+0x78>
 800703a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800703e:	2509      	movs	r5, #9
 8007040:	340a      	adds	r4, #10
 8007042:	e7f6      	b.n	8007032 <__s2b+0x66>
 8007044:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007048:	4601      	mov	r1, r0
 800704a:	220a      	movs	r2, #10
 800704c:	4630      	mov	r0, r6
 800704e:	3b30      	subs	r3, #48	@ 0x30
 8007050:	f7ff ff76 	bl	8006f40 <__multadd>
 8007054:	e7ee      	b.n	8007034 <__s2b+0x68>
 8007056:	bf00      	nop
 8007058:	0800976f 	.word	0x0800976f
 800705c:	08009780 	.word	0x08009780

08007060 <__hi0bits>:
 8007060:	4603      	mov	r3, r0
 8007062:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007066:	bf3a      	itte	cc
 8007068:	0403      	lslcc	r3, r0, #16
 800706a:	2010      	movcc	r0, #16
 800706c:	2000      	movcs	r0, #0
 800706e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007072:	bf3c      	itt	cc
 8007074:	021b      	lslcc	r3, r3, #8
 8007076:	3008      	addcc	r0, #8
 8007078:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800707c:	bf3c      	itt	cc
 800707e:	011b      	lslcc	r3, r3, #4
 8007080:	3004      	addcc	r0, #4
 8007082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007086:	bf3c      	itt	cc
 8007088:	009b      	lslcc	r3, r3, #2
 800708a:	3002      	addcc	r0, #2
 800708c:	2b00      	cmp	r3, #0
 800708e:	db05      	blt.n	800709c <__hi0bits+0x3c>
 8007090:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007094:	f100 0001 	add.w	r0, r0, #1
 8007098:	bf08      	it	eq
 800709a:	2020      	moveq	r0, #32
 800709c:	4770      	bx	lr

0800709e <__lo0bits>:
 800709e:	6803      	ldr	r3, [r0, #0]
 80070a0:	4602      	mov	r2, r0
 80070a2:	f013 0007 	ands.w	r0, r3, #7
 80070a6:	d00b      	beq.n	80070c0 <__lo0bits+0x22>
 80070a8:	07d9      	lsls	r1, r3, #31
 80070aa:	d421      	bmi.n	80070f0 <__lo0bits+0x52>
 80070ac:	0798      	lsls	r0, r3, #30
 80070ae:	bf49      	itett	mi
 80070b0:	085b      	lsrmi	r3, r3, #1
 80070b2:	089b      	lsrpl	r3, r3, #2
 80070b4:	2001      	movmi	r0, #1
 80070b6:	6013      	strmi	r3, [r2, #0]
 80070b8:	bf5c      	itt	pl
 80070ba:	2002      	movpl	r0, #2
 80070bc:	6013      	strpl	r3, [r2, #0]
 80070be:	4770      	bx	lr
 80070c0:	b299      	uxth	r1, r3
 80070c2:	b909      	cbnz	r1, 80070c8 <__lo0bits+0x2a>
 80070c4:	2010      	movs	r0, #16
 80070c6:	0c1b      	lsrs	r3, r3, #16
 80070c8:	b2d9      	uxtb	r1, r3
 80070ca:	b909      	cbnz	r1, 80070d0 <__lo0bits+0x32>
 80070cc:	3008      	adds	r0, #8
 80070ce:	0a1b      	lsrs	r3, r3, #8
 80070d0:	0719      	lsls	r1, r3, #28
 80070d2:	bf04      	itt	eq
 80070d4:	091b      	lsreq	r3, r3, #4
 80070d6:	3004      	addeq	r0, #4
 80070d8:	0799      	lsls	r1, r3, #30
 80070da:	bf04      	itt	eq
 80070dc:	089b      	lsreq	r3, r3, #2
 80070de:	3002      	addeq	r0, #2
 80070e0:	07d9      	lsls	r1, r3, #31
 80070e2:	d403      	bmi.n	80070ec <__lo0bits+0x4e>
 80070e4:	085b      	lsrs	r3, r3, #1
 80070e6:	f100 0001 	add.w	r0, r0, #1
 80070ea:	d003      	beq.n	80070f4 <__lo0bits+0x56>
 80070ec:	6013      	str	r3, [r2, #0]
 80070ee:	4770      	bx	lr
 80070f0:	2000      	movs	r0, #0
 80070f2:	4770      	bx	lr
 80070f4:	2020      	movs	r0, #32
 80070f6:	4770      	bx	lr

080070f8 <__i2b>:
 80070f8:	b510      	push	{r4, lr}
 80070fa:	460c      	mov	r4, r1
 80070fc:	2101      	movs	r1, #1
 80070fe:	f7ff febd 	bl	8006e7c <_Balloc>
 8007102:	4602      	mov	r2, r0
 8007104:	b928      	cbnz	r0, 8007112 <__i2b+0x1a>
 8007106:	f240 1145 	movw	r1, #325	@ 0x145
 800710a:	4b04      	ldr	r3, [pc, #16]	@ (800711c <__i2b+0x24>)
 800710c:	4804      	ldr	r0, [pc, #16]	@ (8007120 <__i2b+0x28>)
 800710e:	f001 fc21 	bl	8008954 <__assert_func>
 8007112:	2301      	movs	r3, #1
 8007114:	6144      	str	r4, [r0, #20]
 8007116:	6103      	str	r3, [r0, #16]
 8007118:	bd10      	pop	{r4, pc}
 800711a:	bf00      	nop
 800711c:	0800976f 	.word	0x0800976f
 8007120:	08009780 	.word	0x08009780

08007124 <__multiply>:
 8007124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007128:	4617      	mov	r7, r2
 800712a:	690a      	ldr	r2, [r1, #16]
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	4689      	mov	r9, r1
 8007130:	429a      	cmp	r2, r3
 8007132:	bfa2      	ittt	ge
 8007134:	463b      	movge	r3, r7
 8007136:	460f      	movge	r7, r1
 8007138:	4699      	movge	r9, r3
 800713a:	693d      	ldr	r5, [r7, #16]
 800713c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	6879      	ldr	r1, [r7, #4]
 8007144:	eb05 060a 	add.w	r6, r5, sl
 8007148:	42b3      	cmp	r3, r6
 800714a:	b085      	sub	sp, #20
 800714c:	bfb8      	it	lt
 800714e:	3101      	addlt	r1, #1
 8007150:	f7ff fe94 	bl	8006e7c <_Balloc>
 8007154:	b930      	cbnz	r0, 8007164 <__multiply+0x40>
 8007156:	4602      	mov	r2, r0
 8007158:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800715c:	4b40      	ldr	r3, [pc, #256]	@ (8007260 <__multiply+0x13c>)
 800715e:	4841      	ldr	r0, [pc, #260]	@ (8007264 <__multiply+0x140>)
 8007160:	f001 fbf8 	bl	8008954 <__assert_func>
 8007164:	f100 0414 	add.w	r4, r0, #20
 8007168:	4623      	mov	r3, r4
 800716a:	2200      	movs	r2, #0
 800716c:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007170:	4573      	cmp	r3, lr
 8007172:	d320      	bcc.n	80071b6 <__multiply+0x92>
 8007174:	f107 0814 	add.w	r8, r7, #20
 8007178:	f109 0114 	add.w	r1, r9, #20
 800717c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007180:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007184:	9302      	str	r3, [sp, #8]
 8007186:	1beb      	subs	r3, r5, r7
 8007188:	3b15      	subs	r3, #21
 800718a:	f023 0303 	bic.w	r3, r3, #3
 800718e:	3304      	adds	r3, #4
 8007190:	3715      	adds	r7, #21
 8007192:	42bd      	cmp	r5, r7
 8007194:	bf38      	it	cc
 8007196:	2304      	movcc	r3, #4
 8007198:	9301      	str	r3, [sp, #4]
 800719a:	9b02      	ldr	r3, [sp, #8]
 800719c:	9103      	str	r1, [sp, #12]
 800719e:	428b      	cmp	r3, r1
 80071a0:	d80c      	bhi.n	80071bc <__multiply+0x98>
 80071a2:	2e00      	cmp	r6, #0
 80071a4:	dd03      	ble.n	80071ae <__multiply+0x8a>
 80071a6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d055      	beq.n	800725a <__multiply+0x136>
 80071ae:	6106      	str	r6, [r0, #16]
 80071b0:	b005      	add	sp, #20
 80071b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b6:	f843 2b04 	str.w	r2, [r3], #4
 80071ba:	e7d9      	b.n	8007170 <__multiply+0x4c>
 80071bc:	f8b1 a000 	ldrh.w	sl, [r1]
 80071c0:	f1ba 0f00 	cmp.w	sl, #0
 80071c4:	d01f      	beq.n	8007206 <__multiply+0xe2>
 80071c6:	46c4      	mov	ip, r8
 80071c8:	46a1      	mov	r9, r4
 80071ca:	2700      	movs	r7, #0
 80071cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80071d0:	f8d9 3000 	ldr.w	r3, [r9]
 80071d4:	fa1f fb82 	uxth.w	fp, r2
 80071d8:	b29b      	uxth	r3, r3
 80071da:	fb0a 330b 	mla	r3, sl, fp, r3
 80071de:	443b      	add	r3, r7
 80071e0:	f8d9 7000 	ldr.w	r7, [r9]
 80071e4:	0c12      	lsrs	r2, r2, #16
 80071e6:	0c3f      	lsrs	r7, r7, #16
 80071e8:	fb0a 7202 	mla	r2, sl, r2, r7
 80071ec:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071f6:	4565      	cmp	r5, ip
 80071f8:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80071fc:	f849 3b04 	str.w	r3, [r9], #4
 8007200:	d8e4      	bhi.n	80071cc <__multiply+0xa8>
 8007202:	9b01      	ldr	r3, [sp, #4]
 8007204:	50e7      	str	r7, [r4, r3]
 8007206:	9b03      	ldr	r3, [sp, #12]
 8007208:	3104      	adds	r1, #4
 800720a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800720e:	f1b9 0f00 	cmp.w	r9, #0
 8007212:	d020      	beq.n	8007256 <__multiply+0x132>
 8007214:	4647      	mov	r7, r8
 8007216:	46a4      	mov	ip, r4
 8007218:	f04f 0a00 	mov.w	sl, #0
 800721c:	6823      	ldr	r3, [r4, #0]
 800721e:	f8b7 b000 	ldrh.w	fp, [r7]
 8007222:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007226:	b29b      	uxth	r3, r3
 8007228:	fb09 220b 	mla	r2, r9, fp, r2
 800722c:	4452      	add	r2, sl
 800722e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007232:	f84c 3b04 	str.w	r3, [ip], #4
 8007236:	f857 3b04 	ldr.w	r3, [r7], #4
 800723a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800723e:	f8bc 3000 	ldrh.w	r3, [ip]
 8007242:	42bd      	cmp	r5, r7
 8007244:	fb09 330a 	mla	r3, r9, sl, r3
 8007248:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800724c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007250:	d8e5      	bhi.n	800721e <__multiply+0xfa>
 8007252:	9a01      	ldr	r2, [sp, #4]
 8007254:	50a3      	str	r3, [r4, r2]
 8007256:	3404      	adds	r4, #4
 8007258:	e79f      	b.n	800719a <__multiply+0x76>
 800725a:	3e01      	subs	r6, #1
 800725c:	e7a1      	b.n	80071a2 <__multiply+0x7e>
 800725e:	bf00      	nop
 8007260:	0800976f 	.word	0x0800976f
 8007264:	08009780 	.word	0x08009780

08007268 <__pow5mult>:
 8007268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800726c:	4615      	mov	r5, r2
 800726e:	f012 0203 	ands.w	r2, r2, #3
 8007272:	4607      	mov	r7, r0
 8007274:	460e      	mov	r6, r1
 8007276:	d007      	beq.n	8007288 <__pow5mult+0x20>
 8007278:	4c25      	ldr	r4, [pc, #148]	@ (8007310 <__pow5mult+0xa8>)
 800727a:	3a01      	subs	r2, #1
 800727c:	2300      	movs	r3, #0
 800727e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007282:	f7ff fe5d 	bl	8006f40 <__multadd>
 8007286:	4606      	mov	r6, r0
 8007288:	10ad      	asrs	r5, r5, #2
 800728a:	d03d      	beq.n	8007308 <__pow5mult+0xa0>
 800728c:	69fc      	ldr	r4, [r7, #28]
 800728e:	b97c      	cbnz	r4, 80072b0 <__pow5mult+0x48>
 8007290:	2010      	movs	r0, #16
 8007292:	f7ff fd3d 	bl	8006d10 <malloc>
 8007296:	4602      	mov	r2, r0
 8007298:	61f8      	str	r0, [r7, #28]
 800729a:	b928      	cbnz	r0, 80072a8 <__pow5mult+0x40>
 800729c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80072a0:	4b1c      	ldr	r3, [pc, #112]	@ (8007314 <__pow5mult+0xac>)
 80072a2:	481d      	ldr	r0, [pc, #116]	@ (8007318 <__pow5mult+0xb0>)
 80072a4:	f001 fb56 	bl	8008954 <__assert_func>
 80072a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072ac:	6004      	str	r4, [r0, #0]
 80072ae:	60c4      	str	r4, [r0, #12]
 80072b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80072b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072b8:	b94c      	cbnz	r4, 80072ce <__pow5mult+0x66>
 80072ba:	f240 2171 	movw	r1, #625	@ 0x271
 80072be:	4638      	mov	r0, r7
 80072c0:	f7ff ff1a 	bl	80070f8 <__i2b>
 80072c4:	2300      	movs	r3, #0
 80072c6:	4604      	mov	r4, r0
 80072c8:	f8c8 0008 	str.w	r0, [r8, #8]
 80072cc:	6003      	str	r3, [r0, #0]
 80072ce:	f04f 0900 	mov.w	r9, #0
 80072d2:	07eb      	lsls	r3, r5, #31
 80072d4:	d50a      	bpl.n	80072ec <__pow5mult+0x84>
 80072d6:	4631      	mov	r1, r6
 80072d8:	4622      	mov	r2, r4
 80072da:	4638      	mov	r0, r7
 80072dc:	f7ff ff22 	bl	8007124 <__multiply>
 80072e0:	4680      	mov	r8, r0
 80072e2:	4631      	mov	r1, r6
 80072e4:	4638      	mov	r0, r7
 80072e6:	f7ff fe09 	bl	8006efc <_Bfree>
 80072ea:	4646      	mov	r6, r8
 80072ec:	106d      	asrs	r5, r5, #1
 80072ee:	d00b      	beq.n	8007308 <__pow5mult+0xa0>
 80072f0:	6820      	ldr	r0, [r4, #0]
 80072f2:	b938      	cbnz	r0, 8007304 <__pow5mult+0x9c>
 80072f4:	4622      	mov	r2, r4
 80072f6:	4621      	mov	r1, r4
 80072f8:	4638      	mov	r0, r7
 80072fa:	f7ff ff13 	bl	8007124 <__multiply>
 80072fe:	6020      	str	r0, [r4, #0]
 8007300:	f8c0 9000 	str.w	r9, [r0]
 8007304:	4604      	mov	r4, r0
 8007306:	e7e4      	b.n	80072d2 <__pow5mult+0x6a>
 8007308:	4630      	mov	r0, r6
 800730a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800730e:	bf00      	nop
 8007310:	08009890 	.word	0x08009890
 8007314:	08009700 	.word	0x08009700
 8007318:	08009780 	.word	0x08009780

0800731c <__lshift>:
 800731c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007320:	460c      	mov	r4, r1
 8007322:	4607      	mov	r7, r0
 8007324:	4691      	mov	r9, r2
 8007326:	6923      	ldr	r3, [r4, #16]
 8007328:	6849      	ldr	r1, [r1, #4]
 800732a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800732e:	68a3      	ldr	r3, [r4, #8]
 8007330:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007334:	f108 0601 	add.w	r6, r8, #1
 8007338:	42b3      	cmp	r3, r6
 800733a:	db0b      	blt.n	8007354 <__lshift+0x38>
 800733c:	4638      	mov	r0, r7
 800733e:	f7ff fd9d 	bl	8006e7c <_Balloc>
 8007342:	4605      	mov	r5, r0
 8007344:	b948      	cbnz	r0, 800735a <__lshift+0x3e>
 8007346:	4602      	mov	r2, r0
 8007348:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800734c:	4b27      	ldr	r3, [pc, #156]	@ (80073ec <__lshift+0xd0>)
 800734e:	4828      	ldr	r0, [pc, #160]	@ (80073f0 <__lshift+0xd4>)
 8007350:	f001 fb00 	bl	8008954 <__assert_func>
 8007354:	3101      	adds	r1, #1
 8007356:	005b      	lsls	r3, r3, #1
 8007358:	e7ee      	b.n	8007338 <__lshift+0x1c>
 800735a:	2300      	movs	r3, #0
 800735c:	f100 0114 	add.w	r1, r0, #20
 8007360:	f100 0210 	add.w	r2, r0, #16
 8007364:	4618      	mov	r0, r3
 8007366:	4553      	cmp	r3, sl
 8007368:	db33      	blt.n	80073d2 <__lshift+0xb6>
 800736a:	6920      	ldr	r0, [r4, #16]
 800736c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007370:	f104 0314 	add.w	r3, r4, #20
 8007374:	f019 091f 	ands.w	r9, r9, #31
 8007378:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800737c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007380:	d02b      	beq.n	80073da <__lshift+0xbe>
 8007382:	468a      	mov	sl, r1
 8007384:	2200      	movs	r2, #0
 8007386:	f1c9 0e20 	rsb	lr, r9, #32
 800738a:	6818      	ldr	r0, [r3, #0]
 800738c:	fa00 f009 	lsl.w	r0, r0, r9
 8007390:	4310      	orrs	r0, r2
 8007392:	f84a 0b04 	str.w	r0, [sl], #4
 8007396:	f853 2b04 	ldr.w	r2, [r3], #4
 800739a:	459c      	cmp	ip, r3
 800739c:	fa22 f20e 	lsr.w	r2, r2, lr
 80073a0:	d8f3      	bhi.n	800738a <__lshift+0x6e>
 80073a2:	ebac 0304 	sub.w	r3, ip, r4
 80073a6:	3b15      	subs	r3, #21
 80073a8:	f023 0303 	bic.w	r3, r3, #3
 80073ac:	3304      	adds	r3, #4
 80073ae:	f104 0015 	add.w	r0, r4, #21
 80073b2:	4560      	cmp	r0, ip
 80073b4:	bf88      	it	hi
 80073b6:	2304      	movhi	r3, #4
 80073b8:	50ca      	str	r2, [r1, r3]
 80073ba:	b10a      	cbz	r2, 80073c0 <__lshift+0xa4>
 80073bc:	f108 0602 	add.w	r6, r8, #2
 80073c0:	3e01      	subs	r6, #1
 80073c2:	4638      	mov	r0, r7
 80073c4:	4621      	mov	r1, r4
 80073c6:	612e      	str	r6, [r5, #16]
 80073c8:	f7ff fd98 	bl	8006efc <_Bfree>
 80073cc:	4628      	mov	r0, r5
 80073ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80073d6:	3301      	adds	r3, #1
 80073d8:	e7c5      	b.n	8007366 <__lshift+0x4a>
 80073da:	3904      	subs	r1, #4
 80073dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80073e0:	459c      	cmp	ip, r3
 80073e2:	f841 2f04 	str.w	r2, [r1, #4]!
 80073e6:	d8f9      	bhi.n	80073dc <__lshift+0xc0>
 80073e8:	e7ea      	b.n	80073c0 <__lshift+0xa4>
 80073ea:	bf00      	nop
 80073ec:	0800976f 	.word	0x0800976f
 80073f0:	08009780 	.word	0x08009780

080073f4 <__mcmp>:
 80073f4:	4603      	mov	r3, r0
 80073f6:	690a      	ldr	r2, [r1, #16]
 80073f8:	6900      	ldr	r0, [r0, #16]
 80073fa:	b530      	push	{r4, r5, lr}
 80073fc:	1a80      	subs	r0, r0, r2
 80073fe:	d10e      	bne.n	800741e <__mcmp+0x2a>
 8007400:	3314      	adds	r3, #20
 8007402:	3114      	adds	r1, #20
 8007404:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007408:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800740c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007410:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007414:	4295      	cmp	r5, r2
 8007416:	d003      	beq.n	8007420 <__mcmp+0x2c>
 8007418:	d205      	bcs.n	8007426 <__mcmp+0x32>
 800741a:	f04f 30ff 	mov.w	r0, #4294967295
 800741e:	bd30      	pop	{r4, r5, pc}
 8007420:	42a3      	cmp	r3, r4
 8007422:	d3f3      	bcc.n	800740c <__mcmp+0x18>
 8007424:	e7fb      	b.n	800741e <__mcmp+0x2a>
 8007426:	2001      	movs	r0, #1
 8007428:	e7f9      	b.n	800741e <__mcmp+0x2a>
	...

0800742c <__mdiff>:
 800742c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007430:	4689      	mov	r9, r1
 8007432:	4606      	mov	r6, r0
 8007434:	4611      	mov	r1, r2
 8007436:	4648      	mov	r0, r9
 8007438:	4614      	mov	r4, r2
 800743a:	f7ff ffdb 	bl	80073f4 <__mcmp>
 800743e:	1e05      	subs	r5, r0, #0
 8007440:	d112      	bne.n	8007468 <__mdiff+0x3c>
 8007442:	4629      	mov	r1, r5
 8007444:	4630      	mov	r0, r6
 8007446:	f7ff fd19 	bl	8006e7c <_Balloc>
 800744a:	4602      	mov	r2, r0
 800744c:	b928      	cbnz	r0, 800745a <__mdiff+0x2e>
 800744e:	f240 2137 	movw	r1, #567	@ 0x237
 8007452:	4b3e      	ldr	r3, [pc, #248]	@ (800754c <__mdiff+0x120>)
 8007454:	483e      	ldr	r0, [pc, #248]	@ (8007550 <__mdiff+0x124>)
 8007456:	f001 fa7d 	bl	8008954 <__assert_func>
 800745a:	2301      	movs	r3, #1
 800745c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007460:	4610      	mov	r0, r2
 8007462:	b003      	add	sp, #12
 8007464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007468:	bfbc      	itt	lt
 800746a:	464b      	movlt	r3, r9
 800746c:	46a1      	movlt	r9, r4
 800746e:	4630      	mov	r0, r6
 8007470:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007474:	bfba      	itte	lt
 8007476:	461c      	movlt	r4, r3
 8007478:	2501      	movlt	r5, #1
 800747a:	2500      	movge	r5, #0
 800747c:	f7ff fcfe 	bl	8006e7c <_Balloc>
 8007480:	4602      	mov	r2, r0
 8007482:	b918      	cbnz	r0, 800748c <__mdiff+0x60>
 8007484:	f240 2145 	movw	r1, #581	@ 0x245
 8007488:	4b30      	ldr	r3, [pc, #192]	@ (800754c <__mdiff+0x120>)
 800748a:	e7e3      	b.n	8007454 <__mdiff+0x28>
 800748c:	f100 0b14 	add.w	fp, r0, #20
 8007490:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007494:	f109 0310 	add.w	r3, r9, #16
 8007498:	60c5      	str	r5, [r0, #12]
 800749a:	f04f 0c00 	mov.w	ip, #0
 800749e:	f109 0514 	add.w	r5, r9, #20
 80074a2:	46d9      	mov	r9, fp
 80074a4:	6926      	ldr	r6, [r4, #16]
 80074a6:	f104 0e14 	add.w	lr, r4, #20
 80074aa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80074ae:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80074b2:	9301      	str	r3, [sp, #4]
 80074b4:	9b01      	ldr	r3, [sp, #4]
 80074b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80074ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80074be:	b281      	uxth	r1, r0
 80074c0:	9301      	str	r3, [sp, #4]
 80074c2:	fa1f f38a 	uxth.w	r3, sl
 80074c6:	1a5b      	subs	r3, r3, r1
 80074c8:	0c00      	lsrs	r0, r0, #16
 80074ca:	4463      	add	r3, ip
 80074cc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80074d0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80074da:	4576      	cmp	r6, lr
 80074dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80074e0:	f849 3b04 	str.w	r3, [r9], #4
 80074e4:	d8e6      	bhi.n	80074b4 <__mdiff+0x88>
 80074e6:	1b33      	subs	r3, r6, r4
 80074e8:	3b15      	subs	r3, #21
 80074ea:	f023 0303 	bic.w	r3, r3, #3
 80074ee:	3415      	adds	r4, #21
 80074f0:	3304      	adds	r3, #4
 80074f2:	42a6      	cmp	r6, r4
 80074f4:	bf38      	it	cc
 80074f6:	2304      	movcc	r3, #4
 80074f8:	441d      	add	r5, r3
 80074fa:	445b      	add	r3, fp
 80074fc:	461e      	mov	r6, r3
 80074fe:	462c      	mov	r4, r5
 8007500:	4544      	cmp	r4, r8
 8007502:	d30e      	bcc.n	8007522 <__mdiff+0xf6>
 8007504:	f108 0103 	add.w	r1, r8, #3
 8007508:	1b49      	subs	r1, r1, r5
 800750a:	f021 0103 	bic.w	r1, r1, #3
 800750e:	3d03      	subs	r5, #3
 8007510:	45a8      	cmp	r8, r5
 8007512:	bf38      	it	cc
 8007514:	2100      	movcc	r1, #0
 8007516:	440b      	add	r3, r1
 8007518:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800751c:	b199      	cbz	r1, 8007546 <__mdiff+0x11a>
 800751e:	6117      	str	r7, [r2, #16]
 8007520:	e79e      	b.n	8007460 <__mdiff+0x34>
 8007522:	46e6      	mov	lr, ip
 8007524:	f854 1b04 	ldr.w	r1, [r4], #4
 8007528:	fa1f fc81 	uxth.w	ip, r1
 800752c:	44f4      	add	ip, lr
 800752e:	0c08      	lsrs	r0, r1, #16
 8007530:	4471      	add	r1, lr
 8007532:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007536:	b289      	uxth	r1, r1
 8007538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800753c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007540:	f846 1b04 	str.w	r1, [r6], #4
 8007544:	e7dc      	b.n	8007500 <__mdiff+0xd4>
 8007546:	3f01      	subs	r7, #1
 8007548:	e7e6      	b.n	8007518 <__mdiff+0xec>
 800754a:	bf00      	nop
 800754c:	0800976f 	.word	0x0800976f
 8007550:	08009780 	.word	0x08009780

08007554 <__ulp>:
 8007554:	4b0e      	ldr	r3, [pc, #56]	@ (8007590 <__ulp+0x3c>)
 8007556:	400b      	ands	r3, r1
 8007558:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800755c:	2b00      	cmp	r3, #0
 800755e:	dc08      	bgt.n	8007572 <__ulp+0x1e>
 8007560:	425b      	negs	r3, r3
 8007562:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007566:	ea4f 5223 	mov.w	r2, r3, asr #20
 800756a:	da04      	bge.n	8007576 <__ulp+0x22>
 800756c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007570:	4113      	asrs	r3, r2
 8007572:	2200      	movs	r2, #0
 8007574:	e008      	b.n	8007588 <__ulp+0x34>
 8007576:	f1a2 0314 	sub.w	r3, r2, #20
 800757a:	2b1e      	cmp	r3, #30
 800757c:	bfd6      	itet	le
 800757e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007582:	2201      	movgt	r2, #1
 8007584:	40da      	lsrle	r2, r3
 8007586:	2300      	movs	r3, #0
 8007588:	4619      	mov	r1, r3
 800758a:	4610      	mov	r0, r2
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	7ff00000 	.word	0x7ff00000

08007594 <__b2d>:
 8007594:	6902      	ldr	r2, [r0, #16]
 8007596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007598:	f100 0614 	add.w	r6, r0, #20
 800759c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80075a0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80075a4:	4f1e      	ldr	r7, [pc, #120]	@ (8007620 <__b2d+0x8c>)
 80075a6:	4620      	mov	r0, r4
 80075a8:	f7ff fd5a 	bl	8007060 <__hi0bits>
 80075ac:	4603      	mov	r3, r0
 80075ae:	f1c0 0020 	rsb	r0, r0, #32
 80075b2:	2b0a      	cmp	r3, #10
 80075b4:	f1a2 0504 	sub.w	r5, r2, #4
 80075b8:	6008      	str	r0, [r1, #0]
 80075ba:	dc12      	bgt.n	80075e2 <__b2d+0x4e>
 80075bc:	42ae      	cmp	r6, r5
 80075be:	bf2c      	ite	cs
 80075c0:	2200      	movcs	r2, #0
 80075c2:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80075c6:	f1c3 0c0b 	rsb	ip, r3, #11
 80075ca:	3315      	adds	r3, #21
 80075cc:	fa24 fe0c 	lsr.w	lr, r4, ip
 80075d0:	fa04 f303 	lsl.w	r3, r4, r3
 80075d4:	fa22 f20c 	lsr.w	r2, r2, ip
 80075d8:	ea4e 0107 	orr.w	r1, lr, r7
 80075dc:	431a      	orrs	r2, r3
 80075de:	4610      	mov	r0, r2
 80075e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075e2:	42ae      	cmp	r6, r5
 80075e4:	bf36      	itet	cc
 80075e6:	f1a2 0508 	subcc.w	r5, r2, #8
 80075ea:	2200      	movcs	r2, #0
 80075ec:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80075f0:	3b0b      	subs	r3, #11
 80075f2:	d012      	beq.n	800761a <__b2d+0x86>
 80075f4:	f1c3 0720 	rsb	r7, r3, #32
 80075f8:	fa22 f107 	lsr.w	r1, r2, r7
 80075fc:	409c      	lsls	r4, r3
 80075fe:	430c      	orrs	r4, r1
 8007600:	42b5      	cmp	r5, r6
 8007602:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8007606:	bf94      	ite	ls
 8007608:	2400      	movls	r4, #0
 800760a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800760e:	409a      	lsls	r2, r3
 8007610:	40fc      	lsrs	r4, r7
 8007612:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007616:	4322      	orrs	r2, r4
 8007618:	e7e1      	b.n	80075de <__b2d+0x4a>
 800761a:	ea44 0107 	orr.w	r1, r4, r7
 800761e:	e7de      	b.n	80075de <__b2d+0x4a>
 8007620:	3ff00000 	.word	0x3ff00000

08007624 <__d2b>:
 8007624:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007628:	2101      	movs	r1, #1
 800762a:	4690      	mov	r8, r2
 800762c:	4699      	mov	r9, r3
 800762e:	9e08      	ldr	r6, [sp, #32]
 8007630:	f7ff fc24 	bl	8006e7c <_Balloc>
 8007634:	4604      	mov	r4, r0
 8007636:	b930      	cbnz	r0, 8007646 <__d2b+0x22>
 8007638:	4602      	mov	r2, r0
 800763a:	f240 310f 	movw	r1, #783	@ 0x30f
 800763e:	4b23      	ldr	r3, [pc, #140]	@ (80076cc <__d2b+0xa8>)
 8007640:	4823      	ldr	r0, [pc, #140]	@ (80076d0 <__d2b+0xac>)
 8007642:	f001 f987 	bl	8008954 <__assert_func>
 8007646:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800764a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800764e:	b10d      	cbz	r5, 8007654 <__d2b+0x30>
 8007650:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007654:	9301      	str	r3, [sp, #4]
 8007656:	f1b8 0300 	subs.w	r3, r8, #0
 800765a:	d024      	beq.n	80076a6 <__d2b+0x82>
 800765c:	4668      	mov	r0, sp
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	f7ff fd1d 	bl	800709e <__lo0bits>
 8007664:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007668:	b1d8      	cbz	r0, 80076a2 <__d2b+0x7e>
 800766a:	f1c0 0320 	rsb	r3, r0, #32
 800766e:	fa02 f303 	lsl.w	r3, r2, r3
 8007672:	430b      	orrs	r3, r1
 8007674:	40c2      	lsrs	r2, r0
 8007676:	6163      	str	r3, [r4, #20]
 8007678:	9201      	str	r2, [sp, #4]
 800767a:	9b01      	ldr	r3, [sp, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	bf0c      	ite	eq
 8007680:	2201      	moveq	r2, #1
 8007682:	2202      	movne	r2, #2
 8007684:	61a3      	str	r3, [r4, #24]
 8007686:	6122      	str	r2, [r4, #16]
 8007688:	b1ad      	cbz	r5, 80076b6 <__d2b+0x92>
 800768a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800768e:	4405      	add	r5, r0
 8007690:	6035      	str	r5, [r6, #0]
 8007692:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007698:	6018      	str	r0, [r3, #0]
 800769a:	4620      	mov	r0, r4
 800769c:	b002      	add	sp, #8
 800769e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80076a2:	6161      	str	r1, [r4, #20]
 80076a4:	e7e9      	b.n	800767a <__d2b+0x56>
 80076a6:	a801      	add	r0, sp, #4
 80076a8:	f7ff fcf9 	bl	800709e <__lo0bits>
 80076ac:	9b01      	ldr	r3, [sp, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	6163      	str	r3, [r4, #20]
 80076b2:	3020      	adds	r0, #32
 80076b4:	e7e7      	b.n	8007686 <__d2b+0x62>
 80076b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80076ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80076be:	6030      	str	r0, [r6, #0]
 80076c0:	6918      	ldr	r0, [r3, #16]
 80076c2:	f7ff fccd 	bl	8007060 <__hi0bits>
 80076c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80076ca:	e7e4      	b.n	8007696 <__d2b+0x72>
 80076cc:	0800976f 	.word	0x0800976f
 80076d0:	08009780 	.word	0x08009780

080076d4 <__ratio>:
 80076d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d8:	b085      	sub	sp, #20
 80076da:	e9cd 1000 	strd	r1, r0, [sp]
 80076de:	a902      	add	r1, sp, #8
 80076e0:	f7ff ff58 	bl	8007594 <__b2d>
 80076e4:	468b      	mov	fp, r1
 80076e6:	4606      	mov	r6, r0
 80076e8:	460f      	mov	r7, r1
 80076ea:	9800      	ldr	r0, [sp, #0]
 80076ec:	a903      	add	r1, sp, #12
 80076ee:	f7ff ff51 	bl	8007594 <__b2d>
 80076f2:	460d      	mov	r5, r1
 80076f4:	9b01      	ldr	r3, [sp, #4]
 80076f6:	4689      	mov	r9, r1
 80076f8:	6919      	ldr	r1, [r3, #16]
 80076fa:	9b00      	ldr	r3, [sp, #0]
 80076fc:	4604      	mov	r4, r0
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	4630      	mov	r0, r6
 8007702:	1ac9      	subs	r1, r1, r3
 8007704:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007708:	1a9b      	subs	r3, r3, r2
 800770a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800770e:	2b00      	cmp	r3, #0
 8007710:	bfcd      	iteet	gt
 8007712:	463a      	movgt	r2, r7
 8007714:	462a      	movle	r2, r5
 8007716:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800771a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800771e:	bfd8      	it	le
 8007720:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007724:	464b      	mov	r3, r9
 8007726:	4622      	mov	r2, r4
 8007728:	4659      	mov	r1, fp
 800772a:	f7f8 ffff 	bl	800072c <__aeabi_ddiv>
 800772e:	b005      	add	sp, #20
 8007730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007734 <__copybits>:
 8007734:	3901      	subs	r1, #1
 8007736:	b570      	push	{r4, r5, r6, lr}
 8007738:	1149      	asrs	r1, r1, #5
 800773a:	6914      	ldr	r4, [r2, #16]
 800773c:	3101      	adds	r1, #1
 800773e:	f102 0314 	add.w	r3, r2, #20
 8007742:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007746:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800774a:	1f05      	subs	r5, r0, #4
 800774c:	42a3      	cmp	r3, r4
 800774e:	d30c      	bcc.n	800776a <__copybits+0x36>
 8007750:	1aa3      	subs	r3, r4, r2
 8007752:	3b11      	subs	r3, #17
 8007754:	f023 0303 	bic.w	r3, r3, #3
 8007758:	3211      	adds	r2, #17
 800775a:	42a2      	cmp	r2, r4
 800775c:	bf88      	it	hi
 800775e:	2300      	movhi	r3, #0
 8007760:	4418      	add	r0, r3
 8007762:	2300      	movs	r3, #0
 8007764:	4288      	cmp	r0, r1
 8007766:	d305      	bcc.n	8007774 <__copybits+0x40>
 8007768:	bd70      	pop	{r4, r5, r6, pc}
 800776a:	f853 6b04 	ldr.w	r6, [r3], #4
 800776e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007772:	e7eb      	b.n	800774c <__copybits+0x18>
 8007774:	f840 3b04 	str.w	r3, [r0], #4
 8007778:	e7f4      	b.n	8007764 <__copybits+0x30>

0800777a <__any_on>:
 800777a:	f100 0214 	add.w	r2, r0, #20
 800777e:	6900      	ldr	r0, [r0, #16]
 8007780:	114b      	asrs	r3, r1, #5
 8007782:	4298      	cmp	r0, r3
 8007784:	b510      	push	{r4, lr}
 8007786:	db11      	blt.n	80077ac <__any_on+0x32>
 8007788:	dd0a      	ble.n	80077a0 <__any_on+0x26>
 800778a:	f011 011f 	ands.w	r1, r1, #31
 800778e:	d007      	beq.n	80077a0 <__any_on+0x26>
 8007790:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007794:	fa24 f001 	lsr.w	r0, r4, r1
 8007798:	fa00 f101 	lsl.w	r1, r0, r1
 800779c:	428c      	cmp	r4, r1
 800779e:	d10b      	bne.n	80077b8 <__any_on+0x3e>
 80077a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d803      	bhi.n	80077b0 <__any_on+0x36>
 80077a8:	2000      	movs	r0, #0
 80077aa:	bd10      	pop	{r4, pc}
 80077ac:	4603      	mov	r3, r0
 80077ae:	e7f7      	b.n	80077a0 <__any_on+0x26>
 80077b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80077b4:	2900      	cmp	r1, #0
 80077b6:	d0f5      	beq.n	80077a4 <__any_on+0x2a>
 80077b8:	2001      	movs	r0, #1
 80077ba:	e7f6      	b.n	80077aa <__any_on+0x30>

080077bc <sulp>:
 80077bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077c0:	460f      	mov	r7, r1
 80077c2:	4690      	mov	r8, r2
 80077c4:	f7ff fec6 	bl	8007554 <__ulp>
 80077c8:	4604      	mov	r4, r0
 80077ca:	460d      	mov	r5, r1
 80077cc:	f1b8 0f00 	cmp.w	r8, #0
 80077d0:	d011      	beq.n	80077f6 <sulp+0x3a>
 80077d2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80077d6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80077da:	2b00      	cmp	r3, #0
 80077dc:	dd0b      	ble.n	80077f6 <sulp+0x3a>
 80077de:	2400      	movs	r4, #0
 80077e0:	051b      	lsls	r3, r3, #20
 80077e2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80077e6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80077ea:	4622      	mov	r2, r4
 80077ec:	462b      	mov	r3, r5
 80077ee:	f7f8 fe73 	bl	80004d8 <__aeabi_dmul>
 80077f2:	4604      	mov	r4, r0
 80077f4:	460d      	mov	r5, r1
 80077f6:	4620      	mov	r0, r4
 80077f8:	4629      	mov	r1, r5
 80077fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007800 <_strtod_l>:
 8007800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007804:	b09f      	sub	sp, #124	@ 0x7c
 8007806:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007808:	2200      	movs	r2, #0
 800780a:	460c      	mov	r4, r1
 800780c:	921a      	str	r2, [sp, #104]	@ 0x68
 800780e:	f04f 0a00 	mov.w	sl, #0
 8007812:	f04f 0b00 	mov.w	fp, #0
 8007816:	460a      	mov	r2, r1
 8007818:	9005      	str	r0, [sp, #20]
 800781a:	9219      	str	r2, [sp, #100]	@ 0x64
 800781c:	7811      	ldrb	r1, [r2, #0]
 800781e:	292b      	cmp	r1, #43	@ 0x2b
 8007820:	d048      	beq.n	80078b4 <_strtod_l+0xb4>
 8007822:	d836      	bhi.n	8007892 <_strtod_l+0x92>
 8007824:	290d      	cmp	r1, #13
 8007826:	d830      	bhi.n	800788a <_strtod_l+0x8a>
 8007828:	2908      	cmp	r1, #8
 800782a:	d830      	bhi.n	800788e <_strtod_l+0x8e>
 800782c:	2900      	cmp	r1, #0
 800782e:	d039      	beq.n	80078a4 <_strtod_l+0xa4>
 8007830:	2200      	movs	r2, #0
 8007832:	920e      	str	r2, [sp, #56]	@ 0x38
 8007834:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007836:	782a      	ldrb	r2, [r5, #0]
 8007838:	2a30      	cmp	r2, #48	@ 0x30
 800783a:	f040 80b0 	bne.w	800799e <_strtod_l+0x19e>
 800783e:	786a      	ldrb	r2, [r5, #1]
 8007840:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007844:	2a58      	cmp	r2, #88	@ 0x58
 8007846:	d16c      	bne.n	8007922 <_strtod_l+0x122>
 8007848:	9302      	str	r3, [sp, #8]
 800784a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800784c:	4a8f      	ldr	r2, [pc, #572]	@ (8007a8c <_strtod_l+0x28c>)
 800784e:	9301      	str	r3, [sp, #4]
 8007850:	ab1a      	add	r3, sp, #104	@ 0x68
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	9805      	ldr	r0, [sp, #20]
 8007856:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007858:	a919      	add	r1, sp, #100	@ 0x64
 800785a:	f001 f915 	bl	8008a88 <__gethex>
 800785e:	f010 060f 	ands.w	r6, r0, #15
 8007862:	4604      	mov	r4, r0
 8007864:	d005      	beq.n	8007872 <_strtod_l+0x72>
 8007866:	2e06      	cmp	r6, #6
 8007868:	d126      	bne.n	80078b8 <_strtod_l+0xb8>
 800786a:	2300      	movs	r3, #0
 800786c:	3501      	adds	r5, #1
 800786e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007870:	930e      	str	r3, [sp, #56]	@ 0x38
 8007872:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007874:	2b00      	cmp	r3, #0
 8007876:	f040 8582 	bne.w	800837e <_strtod_l+0xb7e>
 800787a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800787c:	b1bb      	cbz	r3, 80078ae <_strtod_l+0xae>
 800787e:	4650      	mov	r0, sl
 8007880:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007884:	b01f      	add	sp, #124	@ 0x7c
 8007886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800788a:	2920      	cmp	r1, #32
 800788c:	d1d0      	bne.n	8007830 <_strtod_l+0x30>
 800788e:	3201      	adds	r2, #1
 8007890:	e7c3      	b.n	800781a <_strtod_l+0x1a>
 8007892:	292d      	cmp	r1, #45	@ 0x2d
 8007894:	d1cc      	bne.n	8007830 <_strtod_l+0x30>
 8007896:	2101      	movs	r1, #1
 8007898:	910e      	str	r1, [sp, #56]	@ 0x38
 800789a:	1c51      	adds	r1, r2, #1
 800789c:	9119      	str	r1, [sp, #100]	@ 0x64
 800789e:	7852      	ldrb	r2, [r2, #1]
 80078a0:	2a00      	cmp	r2, #0
 80078a2:	d1c7      	bne.n	8007834 <_strtod_l+0x34>
 80078a4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80078a6:	9419      	str	r4, [sp, #100]	@ 0x64
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f040 8566 	bne.w	800837a <_strtod_l+0xb7a>
 80078ae:	4650      	mov	r0, sl
 80078b0:	4659      	mov	r1, fp
 80078b2:	e7e7      	b.n	8007884 <_strtod_l+0x84>
 80078b4:	2100      	movs	r1, #0
 80078b6:	e7ef      	b.n	8007898 <_strtod_l+0x98>
 80078b8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80078ba:	b13a      	cbz	r2, 80078cc <_strtod_l+0xcc>
 80078bc:	2135      	movs	r1, #53	@ 0x35
 80078be:	a81c      	add	r0, sp, #112	@ 0x70
 80078c0:	f7ff ff38 	bl	8007734 <__copybits>
 80078c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078c6:	9805      	ldr	r0, [sp, #20]
 80078c8:	f7ff fb18 	bl	8006efc <_Bfree>
 80078cc:	3e01      	subs	r6, #1
 80078ce:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80078d0:	2e04      	cmp	r6, #4
 80078d2:	d806      	bhi.n	80078e2 <_strtod_l+0xe2>
 80078d4:	e8df f006 	tbb	[pc, r6]
 80078d8:	201d0314 	.word	0x201d0314
 80078dc:	14          	.byte	0x14
 80078dd:	00          	.byte	0x00
 80078de:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80078e2:	05e1      	lsls	r1, r4, #23
 80078e4:	bf48      	it	mi
 80078e6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80078ea:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80078ee:	0d1b      	lsrs	r3, r3, #20
 80078f0:	051b      	lsls	r3, r3, #20
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1bd      	bne.n	8007872 <_strtod_l+0x72>
 80078f6:	f7fe fb27 	bl	8005f48 <__errno>
 80078fa:	2322      	movs	r3, #34	@ 0x22
 80078fc:	6003      	str	r3, [r0, #0]
 80078fe:	e7b8      	b.n	8007872 <_strtod_l+0x72>
 8007900:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007904:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007908:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800790c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007910:	e7e7      	b.n	80078e2 <_strtod_l+0xe2>
 8007912:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007a90 <_strtod_l+0x290>
 8007916:	e7e4      	b.n	80078e2 <_strtod_l+0xe2>
 8007918:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800791c:	f04f 3aff 	mov.w	sl, #4294967295
 8007920:	e7df      	b.n	80078e2 <_strtod_l+0xe2>
 8007922:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	9219      	str	r2, [sp, #100]	@ 0x64
 8007928:	785b      	ldrb	r3, [r3, #1]
 800792a:	2b30      	cmp	r3, #48	@ 0x30
 800792c:	d0f9      	beq.n	8007922 <_strtod_l+0x122>
 800792e:	2b00      	cmp	r3, #0
 8007930:	d09f      	beq.n	8007872 <_strtod_l+0x72>
 8007932:	2301      	movs	r3, #1
 8007934:	2700      	movs	r7, #0
 8007936:	220a      	movs	r2, #10
 8007938:	46b9      	mov	r9, r7
 800793a:	9308      	str	r3, [sp, #32]
 800793c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800793e:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007940:	930c      	str	r3, [sp, #48]	@ 0x30
 8007942:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007944:	7805      	ldrb	r5, [r0, #0]
 8007946:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800794a:	b2d9      	uxtb	r1, r3
 800794c:	2909      	cmp	r1, #9
 800794e:	d928      	bls.n	80079a2 <_strtod_l+0x1a2>
 8007950:	2201      	movs	r2, #1
 8007952:	4950      	ldr	r1, [pc, #320]	@ (8007a94 <_strtod_l+0x294>)
 8007954:	f000 ffc8 	bl	80088e8 <strncmp>
 8007958:	2800      	cmp	r0, #0
 800795a:	d032      	beq.n	80079c2 <_strtod_l+0x1c2>
 800795c:	2000      	movs	r0, #0
 800795e:	462a      	mov	r2, r5
 8007960:	4603      	mov	r3, r0
 8007962:	464d      	mov	r5, r9
 8007964:	900a      	str	r0, [sp, #40]	@ 0x28
 8007966:	2a65      	cmp	r2, #101	@ 0x65
 8007968:	d001      	beq.n	800796e <_strtod_l+0x16e>
 800796a:	2a45      	cmp	r2, #69	@ 0x45
 800796c:	d114      	bne.n	8007998 <_strtod_l+0x198>
 800796e:	b91d      	cbnz	r5, 8007978 <_strtod_l+0x178>
 8007970:	9a08      	ldr	r2, [sp, #32]
 8007972:	4302      	orrs	r2, r0
 8007974:	d096      	beq.n	80078a4 <_strtod_l+0xa4>
 8007976:	2500      	movs	r5, #0
 8007978:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800797a:	1c62      	adds	r2, r4, #1
 800797c:	9219      	str	r2, [sp, #100]	@ 0x64
 800797e:	7862      	ldrb	r2, [r4, #1]
 8007980:	2a2b      	cmp	r2, #43	@ 0x2b
 8007982:	d07a      	beq.n	8007a7a <_strtod_l+0x27a>
 8007984:	2a2d      	cmp	r2, #45	@ 0x2d
 8007986:	d07e      	beq.n	8007a86 <_strtod_l+0x286>
 8007988:	f04f 0c00 	mov.w	ip, #0
 800798c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007990:	2909      	cmp	r1, #9
 8007992:	f240 8085 	bls.w	8007aa0 <_strtod_l+0x2a0>
 8007996:	9419      	str	r4, [sp, #100]	@ 0x64
 8007998:	f04f 0800 	mov.w	r8, #0
 800799c:	e0a5      	b.n	8007aea <_strtod_l+0x2ea>
 800799e:	2300      	movs	r3, #0
 80079a0:	e7c8      	b.n	8007934 <_strtod_l+0x134>
 80079a2:	f1b9 0f08 	cmp.w	r9, #8
 80079a6:	bfd8      	it	le
 80079a8:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80079aa:	f100 0001 	add.w	r0, r0, #1
 80079ae:	bfd6      	itet	le
 80079b0:	fb02 3301 	mlale	r3, r2, r1, r3
 80079b4:	fb02 3707 	mlagt	r7, r2, r7, r3
 80079b8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80079ba:	f109 0901 	add.w	r9, r9, #1
 80079be:	9019      	str	r0, [sp, #100]	@ 0x64
 80079c0:	e7bf      	b.n	8007942 <_strtod_l+0x142>
 80079c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079c4:	1c5a      	adds	r2, r3, #1
 80079c6:	9219      	str	r2, [sp, #100]	@ 0x64
 80079c8:	785a      	ldrb	r2, [r3, #1]
 80079ca:	f1b9 0f00 	cmp.w	r9, #0
 80079ce:	d03b      	beq.n	8007a48 <_strtod_l+0x248>
 80079d0:	464d      	mov	r5, r9
 80079d2:	900a      	str	r0, [sp, #40]	@ 0x28
 80079d4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80079d8:	2b09      	cmp	r3, #9
 80079da:	d912      	bls.n	8007a02 <_strtod_l+0x202>
 80079dc:	2301      	movs	r3, #1
 80079de:	e7c2      	b.n	8007966 <_strtod_l+0x166>
 80079e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079e2:	3001      	adds	r0, #1
 80079e4:	1c5a      	adds	r2, r3, #1
 80079e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80079e8:	785a      	ldrb	r2, [r3, #1]
 80079ea:	2a30      	cmp	r2, #48	@ 0x30
 80079ec:	d0f8      	beq.n	80079e0 <_strtod_l+0x1e0>
 80079ee:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80079f2:	2b08      	cmp	r3, #8
 80079f4:	f200 84c8 	bhi.w	8008388 <_strtod_l+0xb88>
 80079f8:	900a      	str	r0, [sp, #40]	@ 0x28
 80079fa:	2000      	movs	r0, #0
 80079fc:	4605      	mov	r5, r0
 80079fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a00:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a02:	3a30      	subs	r2, #48	@ 0x30
 8007a04:	f100 0301 	add.w	r3, r0, #1
 8007a08:	d018      	beq.n	8007a3c <_strtod_l+0x23c>
 8007a0a:	462e      	mov	r6, r5
 8007a0c:	f04f 0e0a 	mov.w	lr, #10
 8007a10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a12:	4419      	add	r1, r3
 8007a14:	910a      	str	r1, [sp, #40]	@ 0x28
 8007a16:	1c71      	adds	r1, r6, #1
 8007a18:	eba1 0c05 	sub.w	ip, r1, r5
 8007a1c:	4563      	cmp	r3, ip
 8007a1e:	dc15      	bgt.n	8007a4c <_strtod_l+0x24c>
 8007a20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007a24:	182b      	adds	r3, r5, r0
 8007a26:	2b08      	cmp	r3, #8
 8007a28:	f105 0501 	add.w	r5, r5, #1
 8007a2c:	4405      	add	r5, r0
 8007a2e:	dc1a      	bgt.n	8007a66 <_strtod_l+0x266>
 8007a30:	230a      	movs	r3, #10
 8007a32:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a34:	fb03 2301 	mla	r3, r3, r1, r2
 8007a38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a3e:	4618      	mov	r0, r3
 8007a40:	1c51      	adds	r1, r2, #1
 8007a42:	9119      	str	r1, [sp, #100]	@ 0x64
 8007a44:	7852      	ldrb	r2, [r2, #1]
 8007a46:	e7c5      	b.n	80079d4 <_strtod_l+0x1d4>
 8007a48:	4648      	mov	r0, r9
 8007a4a:	e7ce      	b.n	80079ea <_strtod_l+0x1ea>
 8007a4c:	2e08      	cmp	r6, #8
 8007a4e:	dc05      	bgt.n	8007a5c <_strtod_l+0x25c>
 8007a50:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007a52:	fb0e f606 	mul.w	r6, lr, r6
 8007a56:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007a58:	460e      	mov	r6, r1
 8007a5a:	e7dc      	b.n	8007a16 <_strtod_l+0x216>
 8007a5c:	2910      	cmp	r1, #16
 8007a5e:	bfd8      	it	le
 8007a60:	fb0e f707 	mulle.w	r7, lr, r7
 8007a64:	e7f8      	b.n	8007a58 <_strtod_l+0x258>
 8007a66:	2b0f      	cmp	r3, #15
 8007a68:	bfdc      	itt	le
 8007a6a:	230a      	movle	r3, #10
 8007a6c:	fb03 2707 	mlale	r7, r3, r7, r2
 8007a70:	e7e3      	b.n	8007a3a <_strtod_l+0x23a>
 8007a72:	2300      	movs	r3, #0
 8007a74:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a76:	2301      	movs	r3, #1
 8007a78:	e77a      	b.n	8007970 <_strtod_l+0x170>
 8007a7a:	f04f 0c00 	mov.w	ip, #0
 8007a7e:	1ca2      	adds	r2, r4, #2
 8007a80:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a82:	78a2      	ldrb	r2, [r4, #2]
 8007a84:	e782      	b.n	800798c <_strtod_l+0x18c>
 8007a86:	f04f 0c01 	mov.w	ip, #1
 8007a8a:	e7f8      	b.n	8007a7e <_strtod_l+0x27e>
 8007a8c:	080099a4 	.word	0x080099a4
 8007a90:	7ff00000 	.word	0x7ff00000
 8007a94:	080097d9 	.word	0x080097d9
 8007a98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a9a:	1c51      	adds	r1, r2, #1
 8007a9c:	9119      	str	r1, [sp, #100]	@ 0x64
 8007a9e:	7852      	ldrb	r2, [r2, #1]
 8007aa0:	2a30      	cmp	r2, #48	@ 0x30
 8007aa2:	d0f9      	beq.n	8007a98 <_strtod_l+0x298>
 8007aa4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007aa8:	2908      	cmp	r1, #8
 8007aaa:	f63f af75 	bhi.w	8007998 <_strtod_l+0x198>
 8007aae:	f04f 080a 	mov.w	r8, #10
 8007ab2:	3a30      	subs	r2, #48	@ 0x30
 8007ab4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ab6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007ab8:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007aba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007abc:	1c56      	adds	r6, r2, #1
 8007abe:	9619      	str	r6, [sp, #100]	@ 0x64
 8007ac0:	7852      	ldrb	r2, [r2, #1]
 8007ac2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007ac6:	f1be 0f09 	cmp.w	lr, #9
 8007aca:	d939      	bls.n	8007b40 <_strtod_l+0x340>
 8007acc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007ace:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007ad2:	1a76      	subs	r6, r6, r1
 8007ad4:	2e08      	cmp	r6, #8
 8007ad6:	dc03      	bgt.n	8007ae0 <_strtod_l+0x2e0>
 8007ad8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ada:	4588      	cmp	r8, r1
 8007adc:	bfa8      	it	ge
 8007ade:	4688      	movge	r8, r1
 8007ae0:	f1bc 0f00 	cmp.w	ip, #0
 8007ae4:	d001      	beq.n	8007aea <_strtod_l+0x2ea>
 8007ae6:	f1c8 0800 	rsb	r8, r8, #0
 8007aea:	2d00      	cmp	r5, #0
 8007aec:	d14e      	bne.n	8007b8c <_strtod_l+0x38c>
 8007aee:	9908      	ldr	r1, [sp, #32]
 8007af0:	4308      	orrs	r0, r1
 8007af2:	f47f aebe 	bne.w	8007872 <_strtod_l+0x72>
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f47f aed4 	bne.w	80078a4 <_strtod_l+0xa4>
 8007afc:	2a69      	cmp	r2, #105	@ 0x69
 8007afe:	d028      	beq.n	8007b52 <_strtod_l+0x352>
 8007b00:	dc25      	bgt.n	8007b4e <_strtod_l+0x34e>
 8007b02:	2a49      	cmp	r2, #73	@ 0x49
 8007b04:	d025      	beq.n	8007b52 <_strtod_l+0x352>
 8007b06:	2a4e      	cmp	r2, #78	@ 0x4e
 8007b08:	f47f aecc 	bne.w	80078a4 <_strtod_l+0xa4>
 8007b0c:	4999      	ldr	r1, [pc, #612]	@ (8007d74 <_strtod_l+0x574>)
 8007b0e:	a819      	add	r0, sp, #100	@ 0x64
 8007b10:	f001 f9dc 	bl	8008ecc <__match>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	f43f aec5 	beq.w	80078a4 <_strtod_l+0xa4>
 8007b1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	2b28      	cmp	r3, #40	@ 0x28
 8007b20:	d12e      	bne.n	8007b80 <_strtod_l+0x380>
 8007b22:	4995      	ldr	r1, [pc, #596]	@ (8007d78 <_strtod_l+0x578>)
 8007b24:	aa1c      	add	r2, sp, #112	@ 0x70
 8007b26:	a819      	add	r0, sp, #100	@ 0x64
 8007b28:	f001 f9e4 	bl	8008ef4 <__hexnan>
 8007b2c:	2805      	cmp	r0, #5
 8007b2e:	d127      	bne.n	8007b80 <_strtod_l+0x380>
 8007b30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007b32:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007b36:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007b3a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007b3e:	e698      	b.n	8007872 <_strtod_l+0x72>
 8007b40:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b42:	fb08 2101 	mla	r1, r8, r1, r2
 8007b46:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007b4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b4c:	e7b5      	b.n	8007aba <_strtod_l+0x2ba>
 8007b4e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007b50:	e7da      	b.n	8007b08 <_strtod_l+0x308>
 8007b52:	498a      	ldr	r1, [pc, #552]	@ (8007d7c <_strtod_l+0x57c>)
 8007b54:	a819      	add	r0, sp, #100	@ 0x64
 8007b56:	f001 f9b9 	bl	8008ecc <__match>
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	f43f aea2 	beq.w	80078a4 <_strtod_l+0xa4>
 8007b60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b62:	4987      	ldr	r1, [pc, #540]	@ (8007d80 <_strtod_l+0x580>)
 8007b64:	3b01      	subs	r3, #1
 8007b66:	a819      	add	r0, sp, #100	@ 0x64
 8007b68:	9319      	str	r3, [sp, #100]	@ 0x64
 8007b6a:	f001 f9af 	bl	8008ecc <__match>
 8007b6e:	b910      	cbnz	r0, 8007b76 <_strtod_l+0x376>
 8007b70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b72:	3301      	adds	r3, #1
 8007b74:	9319      	str	r3, [sp, #100]	@ 0x64
 8007b76:	f04f 0a00 	mov.w	sl, #0
 8007b7a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8007d84 <_strtod_l+0x584>
 8007b7e:	e678      	b.n	8007872 <_strtod_l+0x72>
 8007b80:	4881      	ldr	r0, [pc, #516]	@ (8007d88 <_strtod_l+0x588>)
 8007b82:	f000 fee1 	bl	8008948 <nan>
 8007b86:	4682      	mov	sl, r0
 8007b88:	468b      	mov	fp, r1
 8007b8a:	e672      	b.n	8007872 <_strtod_l+0x72>
 8007b8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b8e:	f1b9 0f00 	cmp.w	r9, #0
 8007b92:	bf08      	it	eq
 8007b94:	46a9      	moveq	r9, r5
 8007b96:	eba8 0303 	sub.w	r3, r8, r3
 8007b9a:	2d10      	cmp	r5, #16
 8007b9c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007b9e:	462c      	mov	r4, r5
 8007ba0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ba2:	bfa8      	it	ge
 8007ba4:	2410      	movge	r4, #16
 8007ba6:	f7f8 fc1d 	bl	80003e4 <__aeabi_ui2d>
 8007baa:	2d09      	cmp	r5, #9
 8007bac:	4682      	mov	sl, r0
 8007bae:	468b      	mov	fp, r1
 8007bb0:	dc11      	bgt.n	8007bd6 <_strtod_l+0x3d6>
 8007bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f43f ae5c 	beq.w	8007872 <_strtod_l+0x72>
 8007bba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bbc:	dd76      	ble.n	8007cac <_strtod_l+0x4ac>
 8007bbe:	2b16      	cmp	r3, #22
 8007bc0:	dc5d      	bgt.n	8007c7e <_strtod_l+0x47e>
 8007bc2:	4972      	ldr	r1, [pc, #456]	@ (8007d8c <_strtod_l+0x58c>)
 8007bc4:	4652      	mov	r2, sl
 8007bc6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007bca:	465b      	mov	r3, fp
 8007bcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bd0:	f7f8 fc82 	bl	80004d8 <__aeabi_dmul>
 8007bd4:	e7d7      	b.n	8007b86 <_strtod_l+0x386>
 8007bd6:	4b6d      	ldr	r3, [pc, #436]	@ (8007d8c <_strtod_l+0x58c>)
 8007bd8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007bdc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007be0:	f7f8 fc7a 	bl	80004d8 <__aeabi_dmul>
 8007be4:	4682      	mov	sl, r0
 8007be6:	4638      	mov	r0, r7
 8007be8:	468b      	mov	fp, r1
 8007bea:	f7f8 fbfb 	bl	80003e4 <__aeabi_ui2d>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	4650      	mov	r0, sl
 8007bf4:	4659      	mov	r1, fp
 8007bf6:	f7f8 fab9 	bl	800016c <__adddf3>
 8007bfa:	2d0f      	cmp	r5, #15
 8007bfc:	4682      	mov	sl, r0
 8007bfe:	468b      	mov	fp, r1
 8007c00:	ddd7      	ble.n	8007bb2 <_strtod_l+0x3b2>
 8007c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c04:	1b2c      	subs	r4, r5, r4
 8007c06:	441c      	add	r4, r3
 8007c08:	2c00      	cmp	r4, #0
 8007c0a:	f340 8093 	ble.w	8007d34 <_strtod_l+0x534>
 8007c0e:	f014 030f 	ands.w	r3, r4, #15
 8007c12:	d00a      	beq.n	8007c2a <_strtod_l+0x42a>
 8007c14:	495d      	ldr	r1, [pc, #372]	@ (8007d8c <_strtod_l+0x58c>)
 8007c16:	4652      	mov	r2, sl
 8007c18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c20:	465b      	mov	r3, fp
 8007c22:	f7f8 fc59 	bl	80004d8 <__aeabi_dmul>
 8007c26:	4682      	mov	sl, r0
 8007c28:	468b      	mov	fp, r1
 8007c2a:	f034 040f 	bics.w	r4, r4, #15
 8007c2e:	d073      	beq.n	8007d18 <_strtod_l+0x518>
 8007c30:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007c34:	dd49      	ble.n	8007cca <_strtod_l+0x4ca>
 8007c36:	2400      	movs	r4, #0
 8007c38:	46a0      	mov	r8, r4
 8007c3a:	46a1      	mov	r9, r4
 8007c3c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007c3e:	2322      	movs	r3, #34	@ 0x22
 8007c40:	f04f 0a00 	mov.w	sl, #0
 8007c44:	9a05      	ldr	r2, [sp, #20]
 8007c46:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8007d84 <_strtod_l+0x584>
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f43f ae0f 	beq.w	8007872 <_strtod_l+0x72>
 8007c54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c56:	9805      	ldr	r0, [sp, #20]
 8007c58:	f7ff f950 	bl	8006efc <_Bfree>
 8007c5c:	4649      	mov	r1, r9
 8007c5e:	9805      	ldr	r0, [sp, #20]
 8007c60:	f7ff f94c 	bl	8006efc <_Bfree>
 8007c64:	4641      	mov	r1, r8
 8007c66:	9805      	ldr	r0, [sp, #20]
 8007c68:	f7ff f948 	bl	8006efc <_Bfree>
 8007c6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c6e:	9805      	ldr	r0, [sp, #20]
 8007c70:	f7ff f944 	bl	8006efc <_Bfree>
 8007c74:	4621      	mov	r1, r4
 8007c76:	9805      	ldr	r0, [sp, #20]
 8007c78:	f7ff f940 	bl	8006efc <_Bfree>
 8007c7c:	e5f9      	b.n	8007872 <_strtod_l+0x72>
 8007c7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c80:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007c84:	4293      	cmp	r3, r2
 8007c86:	dbbc      	blt.n	8007c02 <_strtod_l+0x402>
 8007c88:	4c40      	ldr	r4, [pc, #256]	@ (8007d8c <_strtod_l+0x58c>)
 8007c8a:	f1c5 050f 	rsb	r5, r5, #15
 8007c8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007c92:	4652      	mov	r2, sl
 8007c94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c98:	465b      	mov	r3, fp
 8007c9a:	f7f8 fc1d 	bl	80004d8 <__aeabi_dmul>
 8007c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ca0:	1b5d      	subs	r5, r3, r5
 8007ca2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007ca6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007caa:	e791      	b.n	8007bd0 <_strtod_l+0x3d0>
 8007cac:	3316      	adds	r3, #22
 8007cae:	dba8      	blt.n	8007c02 <_strtod_l+0x402>
 8007cb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cb2:	4650      	mov	r0, sl
 8007cb4:	eba3 0808 	sub.w	r8, r3, r8
 8007cb8:	4b34      	ldr	r3, [pc, #208]	@ (8007d8c <_strtod_l+0x58c>)
 8007cba:	4659      	mov	r1, fp
 8007cbc:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007cc0:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007cc4:	f7f8 fd32 	bl	800072c <__aeabi_ddiv>
 8007cc8:	e75d      	b.n	8007b86 <_strtod_l+0x386>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	4650      	mov	r0, sl
 8007cce:	4659      	mov	r1, fp
 8007cd0:	461e      	mov	r6, r3
 8007cd2:	4f2f      	ldr	r7, [pc, #188]	@ (8007d90 <_strtod_l+0x590>)
 8007cd4:	1124      	asrs	r4, r4, #4
 8007cd6:	2c01      	cmp	r4, #1
 8007cd8:	dc21      	bgt.n	8007d1e <_strtod_l+0x51e>
 8007cda:	b10b      	cbz	r3, 8007ce0 <_strtod_l+0x4e0>
 8007cdc:	4682      	mov	sl, r0
 8007cde:	468b      	mov	fp, r1
 8007ce0:	492b      	ldr	r1, [pc, #172]	@ (8007d90 <_strtod_l+0x590>)
 8007ce2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007ce6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007cea:	4652      	mov	r2, sl
 8007cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cf0:	465b      	mov	r3, fp
 8007cf2:	f7f8 fbf1 	bl	80004d8 <__aeabi_dmul>
 8007cf6:	4b23      	ldr	r3, [pc, #140]	@ (8007d84 <_strtod_l+0x584>)
 8007cf8:	460a      	mov	r2, r1
 8007cfa:	400b      	ands	r3, r1
 8007cfc:	4925      	ldr	r1, [pc, #148]	@ (8007d94 <_strtod_l+0x594>)
 8007cfe:	4682      	mov	sl, r0
 8007d00:	428b      	cmp	r3, r1
 8007d02:	d898      	bhi.n	8007c36 <_strtod_l+0x436>
 8007d04:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007d08:	428b      	cmp	r3, r1
 8007d0a:	bf86      	itte	hi
 8007d0c:	f04f 3aff 	movhi.w	sl, #4294967295
 8007d10:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8007d98 <_strtod_l+0x598>
 8007d14:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007d18:	2300      	movs	r3, #0
 8007d1a:	9308      	str	r3, [sp, #32]
 8007d1c:	e076      	b.n	8007e0c <_strtod_l+0x60c>
 8007d1e:	07e2      	lsls	r2, r4, #31
 8007d20:	d504      	bpl.n	8007d2c <_strtod_l+0x52c>
 8007d22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d26:	f7f8 fbd7 	bl	80004d8 <__aeabi_dmul>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	3601      	adds	r6, #1
 8007d2e:	1064      	asrs	r4, r4, #1
 8007d30:	3708      	adds	r7, #8
 8007d32:	e7d0      	b.n	8007cd6 <_strtod_l+0x4d6>
 8007d34:	d0f0      	beq.n	8007d18 <_strtod_l+0x518>
 8007d36:	4264      	negs	r4, r4
 8007d38:	f014 020f 	ands.w	r2, r4, #15
 8007d3c:	d00a      	beq.n	8007d54 <_strtod_l+0x554>
 8007d3e:	4b13      	ldr	r3, [pc, #76]	@ (8007d8c <_strtod_l+0x58c>)
 8007d40:	4650      	mov	r0, sl
 8007d42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d46:	4659      	mov	r1, fp
 8007d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4c:	f7f8 fcee 	bl	800072c <__aeabi_ddiv>
 8007d50:	4682      	mov	sl, r0
 8007d52:	468b      	mov	fp, r1
 8007d54:	1124      	asrs	r4, r4, #4
 8007d56:	d0df      	beq.n	8007d18 <_strtod_l+0x518>
 8007d58:	2c1f      	cmp	r4, #31
 8007d5a:	dd1f      	ble.n	8007d9c <_strtod_l+0x59c>
 8007d5c:	2400      	movs	r4, #0
 8007d5e:	46a0      	mov	r8, r4
 8007d60:	46a1      	mov	r9, r4
 8007d62:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d64:	2322      	movs	r3, #34	@ 0x22
 8007d66:	9a05      	ldr	r2, [sp, #20]
 8007d68:	f04f 0a00 	mov.w	sl, #0
 8007d6c:	f04f 0b00 	mov.w	fp, #0
 8007d70:	6013      	str	r3, [r2, #0]
 8007d72:	e76b      	b.n	8007c4c <_strtod_l+0x44c>
 8007d74:	080096c7 	.word	0x080096c7
 8007d78:	08009990 	.word	0x08009990
 8007d7c:	080096bf 	.word	0x080096bf
 8007d80:	080096f6 	.word	0x080096f6
 8007d84:	7ff00000 	.word	0x7ff00000
 8007d88:	0800982f 	.word	0x0800982f
 8007d8c:	080098c8 	.word	0x080098c8
 8007d90:	080098a0 	.word	0x080098a0
 8007d94:	7ca00000 	.word	0x7ca00000
 8007d98:	7fefffff 	.word	0x7fefffff
 8007d9c:	f014 0310 	ands.w	r3, r4, #16
 8007da0:	bf18      	it	ne
 8007da2:	236a      	movne	r3, #106	@ 0x6a
 8007da4:	4650      	mov	r0, sl
 8007da6:	9308      	str	r3, [sp, #32]
 8007da8:	4659      	mov	r1, fp
 8007daa:	2300      	movs	r3, #0
 8007dac:	4e77      	ldr	r6, [pc, #476]	@ (8007f8c <_strtod_l+0x78c>)
 8007dae:	07e7      	lsls	r7, r4, #31
 8007db0:	d504      	bpl.n	8007dbc <_strtod_l+0x5bc>
 8007db2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007db6:	f7f8 fb8f 	bl	80004d8 <__aeabi_dmul>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	1064      	asrs	r4, r4, #1
 8007dbe:	f106 0608 	add.w	r6, r6, #8
 8007dc2:	d1f4      	bne.n	8007dae <_strtod_l+0x5ae>
 8007dc4:	b10b      	cbz	r3, 8007dca <_strtod_l+0x5ca>
 8007dc6:	4682      	mov	sl, r0
 8007dc8:	468b      	mov	fp, r1
 8007dca:	9b08      	ldr	r3, [sp, #32]
 8007dcc:	b1b3      	cbz	r3, 8007dfc <_strtod_l+0x5fc>
 8007dce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007dd2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	4659      	mov	r1, fp
 8007dda:	dd0f      	ble.n	8007dfc <_strtod_l+0x5fc>
 8007ddc:	2b1f      	cmp	r3, #31
 8007dde:	dd58      	ble.n	8007e92 <_strtod_l+0x692>
 8007de0:	2b34      	cmp	r3, #52	@ 0x34
 8007de2:	bfd8      	it	le
 8007de4:	f04f 33ff 	movle.w	r3, #4294967295
 8007de8:	f04f 0a00 	mov.w	sl, #0
 8007dec:	bfcf      	iteee	gt
 8007dee:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007df2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007df6:	4093      	lslle	r3, r2
 8007df8:	ea03 0b01 	andle.w	fp, r3, r1
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	2300      	movs	r3, #0
 8007e00:	4650      	mov	r0, sl
 8007e02:	4659      	mov	r1, fp
 8007e04:	f7f8 fdd0 	bl	80009a8 <__aeabi_dcmpeq>
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	d1a7      	bne.n	8007d5c <_strtod_l+0x55c>
 8007e0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e0e:	464a      	mov	r2, r9
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007e14:	462b      	mov	r3, r5
 8007e16:	9805      	ldr	r0, [sp, #20]
 8007e18:	f7ff f8d8 	bl	8006fcc <__s2b>
 8007e1c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	f43f af09 	beq.w	8007c36 <_strtod_l+0x436>
 8007e24:	2400      	movs	r4, #0
 8007e26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e2a:	2a00      	cmp	r2, #0
 8007e2c:	eba3 0308 	sub.w	r3, r3, r8
 8007e30:	bfa8      	it	ge
 8007e32:	2300      	movge	r3, #0
 8007e34:	46a0      	mov	r8, r4
 8007e36:	9312      	str	r3, [sp, #72]	@ 0x48
 8007e38:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007e3c:	9316      	str	r3, [sp, #88]	@ 0x58
 8007e3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e40:	9805      	ldr	r0, [sp, #20]
 8007e42:	6859      	ldr	r1, [r3, #4]
 8007e44:	f7ff f81a 	bl	8006e7c <_Balloc>
 8007e48:	4681      	mov	r9, r0
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	f43f aef7 	beq.w	8007c3e <_strtod_l+0x43e>
 8007e50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e52:	300c      	adds	r0, #12
 8007e54:	691a      	ldr	r2, [r3, #16]
 8007e56:	f103 010c 	add.w	r1, r3, #12
 8007e5a:	3202      	adds	r2, #2
 8007e5c:	0092      	lsls	r2, r2, #2
 8007e5e:	f000 fd65 	bl	800892c <memcpy>
 8007e62:	ab1c      	add	r3, sp, #112	@ 0x70
 8007e64:	9301      	str	r3, [sp, #4]
 8007e66:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	4652      	mov	r2, sl
 8007e6c:	465b      	mov	r3, fp
 8007e6e:	9805      	ldr	r0, [sp, #20]
 8007e70:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007e74:	f7ff fbd6 	bl	8007624 <__d2b>
 8007e78:	901a      	str	r0, [sp, #104]	@ 0x68
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	f43f aedf 	beq.w	8007c3e <_strtod_l+0x43e>
 8007e80:	2101      	movs	r1, #1
 8007e82:	9805      	ldr	r0, [sp, #20]
 8007e84:	f7ff f938 	bl	80070f8 <__i2b>
 8007e88:	4680      	mov	r8, r0
 8007e8a:	b948      	cbnz	r0, 8007ea0 <_strtod_l+0x6a0>
 8007e8c:	f04f 0800 	mov.w	r8, #0
 8007e90:	e6d5      	b.n	8007c3e <_strtod_l+0x43e>
 8007e92:	f04f 32ff 	mov.w	r2, #4294967295
 8007e96:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9a:	ea03 0a0a 	and.w	sl, r3, sl
 8007e9e:	e7ad      	b.n	8007dfc <_strtod_l+0x5fc>
 8007ea0:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007ea2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007ea4:	2d00      	cmp	r5, #0
 8007ea6:	bfab      	itete	ge
 8007ea8:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007eaa:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007eac:	18ef      	addge	r7, r5, r3
 8007eae:	1b5e      	sublt	r6, r3, r5
 8007eb0:	9b08      	ldr	r3, [sp, #32]
 8007eb2:	bfa8      	it	ge
 8007eb4:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007eb6:	eba5 0503 	sub.w	r5, r5, r3
 8007eba:	4415      	add	r5, r2
 8007ebc:	4b34      	ldr	r3, [pc, #208]	@ (8007f90 <_strtod_l+0x790>)
 8007ebe:	f105 35ff 	add.w	r5, r5, #4294967295
 8007ec2:	bfb8      	it	lt
 8007ec4:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007ec6:	429d      	cmp	r5, r3
 8007ec8:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007ecc:	da50      	bge.n	8007f70 <_strtod_l+0x770>
 8007ece:	1b5b      	subs	r3, r3, r5
 8007ed0:	2b1f      	cmp	r3, #31
 8007ed2:	f04f 0101 	mov.w	r1, #1
 8007ed6:	eba2 0203 	sub.w	r2, r2, r3
 8007eda:	dc3d      	bgt.n	8007f58 <_strtod_l+0x758>
 8007edc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ee6:	18bd      	adds	r5, r7, r2
 8007ee8:	9b08      	ldr	r3, [sp, #32]
 8007eea:	42af      	cmp	r7, r5
 8007eec:	4416      	add	r6, r2
 8007eee:	441e      	add	r6, r3
 8007ef0:	463b      	mov	r3, r7
 8007ef2:	bfa8      	it	ge
 8007ef4:	462b      	movge	r3, r5
 8007ef6:	42b3      	cmp	r3, r6
 8007ef8:	bfa8      	it	ge
 8007efa:	4633      	movge	r3, r6
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	bfc2      	ittt	gt
 8007f00:	1aed      	subgt	r5, r5, r3
 8007f02:	1af6      	subgt	r6, r6, r3
 8007f04:	1aff      	subgt	r7, r7, r3
 8007f06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	dd16      	ble.n	8007f3a <_strtod_l+0x73a>
 8007f0c:	4641      	mov	r1, r8
 8007f0e:	461a      	mov	r2, r3
 8007f10:	9805      	ldr	r0, [sp, #20]
 8007f12:	f7ff f9a9 	bl	8007268 <__pow5mult>
 8007f16:	4680      	mov	r8, r0
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	d0b7      	beq.n	8007e8c <_strtod_l+0x68c>
 8007f1c:	4601      	mov	r1, r0
 8007f1e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007f20:	9805      	ldr	r0, [sp, #20]
 8007f22:	f7ff f8ff 	bl	8007124 <__multiply>
 8007f26:	900a      	str	r0, [sp, #40]	@ 0x28
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	f43f ae88 	beq.w	8007c3e <_strtod_l+0x43e>
 8007f2e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f30:	9805      	ldr	r0, [sp, #20]
 8007f32:	f7fe ffe3 	bl	8006efc <_Bfree>
 8007f36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f38:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f3a:	2d00      	cmp	r5, #0
 8007f3c:	dc1d      	bgt.n	8007f7a <_strtod_l+0x77a>
 8007f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	dd27      	ble.n	8007f94 <_strtod_l+0x794>
 8007f44:	4649      	mov	r1, r9
 8007f46:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007f48:	9805      	ldr	r0, [sp, #20]
 8007f4a:	f7ff f98d 	bl	8007268 <__pow5mult>
 8007f4e:	4681      	mov	r9, r0
 8007f50:	bb00      	cbnz	r0, 8007f94 <_strtod_l+0x794>
 8007f52:	f04f 0900 	mov.w	r9, #0
 8007f56:	e672      	b.n	8007c3e <_strtod_l+0x43e>
 8007f58:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007f5c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007f60:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007f64:	35e2      	adds	r5, #226	@ 0xe2
 8007f66:	fa01 f305 	lsl.w	r3, r1, r5
 8007f6a:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f6c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007f6e:	e7ba      	b.n	8007ee6 <_strtod_l+0x6e6>
 8007f70:	2300      	movs	r3, #0
 8007f72:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f74:	2301      	movs	r3, #1
 8007f76:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f78:	e7b5      	b.n	8007ee6 <_strtod_l+0x6e6>
 8007f7a:	462a      	mov	r2, r5
 8007f7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f7e:	9805      	ldr	r0, [sp, #20]
 8007f80:	f7ff f9cc 	bl	800731c <__lshift>
 8007f84:	901a      	str	r0, [sp, #104]	@ 0x68
 8007f86:	2800      	cmp	r0, #0
 8007f88:	d1d9      	bne.n	8007f3e <_strtod_l+0x73e>
 8007f8a:	e658      	b.n	8007c3e <_strtod_l+0x43e>
 8007f8c:	080099b8 	.word	0x080099b8
 8007f90:	fffffc02 	.word	0xfffffc02
 8007f94:	2e00      	cmp	r6, #0
 8007f96:	dd07      	ble.n	8007fa8 <_strtod_l+0x7a8>
 8007f98:	4649      	mov	r1, r9
 8007f9a:	4632      	mov	r2, r6
 8007f9c:	9805      	ldr	r0, [sp, #20]
 8007f9e:	f7ff f9bd 	bl	800731c <__lshift>
 8007fa2:	4681      	mov	r9, r0
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	d0d4      	beq.n	8007f52 <_strtod_l+0x752>
 8007fa8:	2f00      	cmp	r7, #0
 8007faa:	dd08      	ble.n	8007fbe <_strtod_l+0x7be>
 8007fac:	4641      	mov	r1, r8
 8007fae:	463a      	mov	r2, r7
 8007fb0:	9805      	ldr	r0, [sp, #20]
 8007fb2:	f7ff f9b3 	bl	800731c <__lshift>
 8007fb6:	4680      	mov	r8, r0
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	f43f ae40 	beq.w	8007c3e <_strtod_l+0x43e>
 8007fbe:	464a      	mov	r2, r9
 8007fc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007fc2:	9805      	ldr	r0, [sp, #20]
 8007fc4:	f7ff fa32 	bl	800742c <__mdiff>
 8007fc8:	4604      	mov	r4, r0
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	f43f ae37 	beq.w	8007c3e <_strtod_l+0x43e>
 8007fd0:	68c3      	ldr	r3, [r0, #12]
 8007fd2:	4641      	mov	r1, r8
 8007fd4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	60c3      	str	r3, [r0, #12]
 8007fda:	f7ff fa0b 	bl	80073f4 <__mcmp>
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	da3d      	bge.n	800805e <_strtod_l+0x85e>
 8007fe2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fe4:	ea53 030a 	orrs.w	r3, r3, sl
 8007fe8:	d163      	bne.n	80080b2 <_strtod_l+0x8b2>
 8007fea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d15f      	bne.n	80080b2 <_strtod_l+0x8b2>
 8007ff2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ff6:	0d1b      	lsrs	r3, r3, #20
 8007ff8:	051b      	lsls	r3, r3, #20
 8007ffa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007ffe:	d958      	bls.n	80080b2 <_strtod_l+0x8b2>
 8008000:	6963      	ldr	r3, [r4, #20]
 8008002:	b913      	cbnz	r3, 800800a <_strtod_l+0x80a>
 8008004:	6923      	ldr	r3, [r4, #16]
 8008006:	2b01      	cmp	r3, #1
 8008008:	dd53      	ble.n	80080b2 <_strtod_l+0x8b2>
 800800a:	4621      	mov	r1, r4
 800800c:	2201      	movs	r2, #1
 800800e:	9805      	ldr	r0, [sp, #20]
 8008010:	f7ff f984 	bl	800731c <__lshift>
 8008014:	4641      	mov	r1, r8
 8008016:	4604      	mov	r4, r0
 8008018:	f7ff f9ec 	bl	80073f4 <__mcmp>
 800801c:	2800      	cmp	r0, #0
 800801e:	dd48      	ble.n	80080b2 <_strtod_l+0x8b2>
 8008020:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008024:	9a08      	ldr	r2, [sp, #32]
 8008026:	0d1b      	lsrs	r3, r3, #20
 8008028:	051b      	lsls	r3, r3, #20
 800802a:	2a00      	cmp	r2, #0
 800802c:	d062      	beq.n	80080f4 <_strtod_l+0x8f4>
 800802e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008032:	d85f      	bhi.n	80080f4 <_strtod_l+0x8f4>
 8008034:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008038:	f67f ae94 	bls.w	8007d64 <_strtod_l+0x564>
 800803c:	4650      	mov	r0, sl
 800803e:	4659      	mov	r1, fp
 8008040:	4ba3      	ldr	r3, [pc, #652]	@ (80082d0 <_strtod_l+0xad0>)
 8008042:	2200      	movs	r2, #0
 8008044:	f7f8 fa48 	bl	80004d8 <__aeabi_dmul>
 8008048:	4ba2      	ldr	r3, [pc, #648]	@ (80082d4 <_strtod_l+0xad4>)
 800804a:	4682      	mov	sl, r0
 800804c:	400b      	ands	r3, r1
 800804e:	468b      	mov	fp, r1
 8008050:	2b00      	cmp	r3, #0
 8008052:	f47f adff 	bne.w	8007c54 <_strtod_l+0x454>
 8008056:	2322      	movs	r3, #34	@ 0x22
 8008058:	9a05      	ldr	r2, [sp, #20]
 800805a:	6013      	str	r3, [r2, #0]
 800805c:	e5fa      	b.n	8007c54 <_strtod_l+0x454>
 800805e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008062:	d165      	bne.n	8008130 <_strtod_l+0x930>
 8008064:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008066:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800806a:	b35a      	cbz	r2, 80080c4 <_strtod_l+0x8c4>
 800806c:	4a9a      	ldr	r2, [pc, #616]	@ (80082d8 <_strtod_l+0xad8>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d12b      	bne.n	80080ca <_strtod_l+0x8ca>
 8008072:	9b08      	ldr	r3, [sp, #32]
 8008074:	4651      	mov	r1, sl
 8008076:	b303      	cbz	r3, 80080ba <_strtod_l+0x8ba>
 8008078:	465a      	mov	r2, fp
 800807a:	4b96      	ldr	r3, [pc, #600]	@ (80082d4 <_strtod_l+0xad4>)
 800807c:	4013      	ands	r3, r2
 800807e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008082:	f04f 32ff 	mov.w	r2, #4294967295
 8008086:	d81b      	bhi.n	80080c0 <_strtod_l+0x8c0>
 8008088:	0d1b      	lsrs	r3, r3, #20
 800808a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800808e:	fa02 f303 	lsl.w	r3, r2, r3
 8008092:	4299      	cmp	r1, r3
 8008094:	d119      	bne.n	80080ca <_strtod_l+0x8ca>
 8008096:	4b91      	ldr	r3, [pc, #580]	@ (80082dc <_strtod_l+0xadc>)
 8008098:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800809a:	429a      	cmp	r2, r3
 800809c:	d102      	bne.n	80080a4 <_strtod_l+0x8a4>
 800809e:	3101      	adds	r1, #1
 80080a0:	f43f adcd 	beq.w	8007c3e <_strtod_l+0x43e>
 80080a4:	f04f 0a00 	mov.w	sl, #0
 80080a8:	4b8a      	ldr	r3, [pc, #552]	@ (80082d4 <_strtod_l+0xad4>)
 80080aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080ac:	401a      	ands	r2, r3
 80080ae:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80080b2:	9b08      	ldr	r3, [sp, #32]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1c1      	bne.n	800803c <_strtod_l+0x83c>
 80080b8:	e5cc      	b.n	8007c54 <_strtod_l+0x454>
 80080ba:	f04f 33ff 	mov.w	r3, #4294967295
 80080be:	e7e8      	b.n	8008092 <_strtod_l+0x892>
 80080c0:	4613      	mov	r3, r2
 80080c2:	e7e6      	b.n	8008092 <_strtod_l+0x892>
 80080c4:	ea53 030a 	orrs.w	r3, r3, sl
 80080c8:	d0aa      	beq.n	8008020 <_strtod_l+0x820>
 80080ca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80080cc:	b1db      	cbz	r3, 8008106 <_strtod_l+0x906>
 80080ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080d0:	4213      	tst	r3, r2
 80080d2:	d0ee      	beq.n	80080b2 <_strtod_l+0x8b2>
 80080d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080d6:	4650      	mov	r0, sl
 80080d8:	4659      	mov	r1, fp
 80080da:	9a08      	ldr	r2, [sp, #32]
 80080dc:	b1bb      	cbz	r3, 800810e <_strtod_l+0x90e>
 80080de:	f7ff fb6d 	bl	80077bc <sulp>
 80080e2:	4602      	mov	r2, r0
 80080e4:	460b      	mov	r3, r1
 80080e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080ea:	f7f8 f83f 	bl	800016c <__adddf3>
 80080ee:	4682      	mov	sl, r0
 80080f0:	468b      	mov	fp, r1
 80080f2:	e7de      	b.n	80080b2 <_strtod_l+0x8b2>
 80080f4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80080f8:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80080fc:	f04f 3aff 	mov.w	sl, #4294967295
 8008100:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008104:	e7d5      	b.n	80080b2 <_strtod_l+0x8b2>
 8008106:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008108:	ea13 0f0a 	tst.w	r3, sl
 800810c:	e7e1      	b.n	80080d2 <_strtod_l+0x8d2>
 800810e:	f7ff fb55 	bl	80077bc <sulp>
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800811a:	f7f8 f825 	bl	8000168 <__aeabi_dsub>
 800811e:	2200      	movs	r2, #0
 8008120:	2300      	movs	r3, #0
 8008122:	4682      	mov	sl, r0
 8008124:	468b      	mov	fp, r1
 8008126:	f7f8 fc3f 	bl	80009a8 <__aeabi_dcmpeq>
 800812a:	2800      	cmp	r0, #0
 800812c:	d0c1      	beq.n	80080b2 <_strtod_l+0x8b2>
 800812e:	e619      	b.n	8007d64 <_strtod_l+0x564>
 8008130:	4641      	mov	r1, r8
 8008132:	4620      	mov	r0, r4
 8008134:	f7ff face 	bl	80076d4 <__ratio>
 8008138:	2200      	movs	r2, #0
 800813a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800813e:	4606      	mov	r6, r0
 8008140:	460f      	mov	r7, r1
 8008142:	f7f8 fc45 	bl	80009d0 <__aeabi_dcmple>
 8008146:	2800      	cmp	r0, #0
 8008148:	d06d      	beq.n	8008226 <_strtod_l+0xa26>
 800814a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800814c:	2b00      	cmp	r3, #0
 800814e:	d178      	bne.n	8008242 <_strtod_l+0xa42>
 8008150:	f1ba 0f00 	cmp.w	sl, #0
 8008154:	d156      	bne.n	8008204 <_strtod_l+0xa04>
 8008156:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008158:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800815c:	2b00      	cmp	r3, #0
 800815e:	d158      	bne.n	8008212 <_strtod_l+0xa12>
 8008160:	2200      	movs	r2, #0
 8008162:	4630      	mov	r0, r6
 8008164:	4639      	mov	r1, r7
 8008166:	4b5e      	ldr	r3, [pc, #376]	@ (80082e0 <_strtod_l+0xae0>)
 8008168:	f7f8 fc28 	bl	80009bc <__aeabi_dcmplt>
 800816c:	2800      	cmp	r0, #0
 800816e:	d157      	bne.n	8008220 <_strtod_l+0xa20>
 8008170:	4630      	mov	r0, r6
 8008172:	4639      	mov	r1, r7
 8008174:	2200      	movs	r2, #0
 8008176:	4b5b      	ldr	r3, [pc, #364]	@ (80082e4 <_strtod_l+0xae4>)
 8008178:	f7f8 f9ae 	bl	80004d8 <__aeabi_dmul>
 800817c:	4606      	mov	r6, r0
 800817e:	460f      	mov	r7, r1
 8008180:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008184:	9606      	str	r6, [sp, #24]
 8008186:	9307      	str	r3, [sp, #28]
 8008188:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800818c:	4d51      	ldr	r5, [pc, #324]	@ (80082d4 <_strtod_l+0xad4>)
 800818e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008192:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008194:	401d      	ands	r5, r3
 8008196:	4b54      	ldr	r3, [pc, #336]	@ (80082e8 <_strtod_l+0xae8>)
 8008198:	429d      	cmp	r5, r3
 800819a:	f040 80ab 	bne.w	80082f4 <_strtod_l+0xaf4>
 800819e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081a0:	4650      	mov	r0, sl
 80081a2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80081a6:	4659      	mov	r1, fp
 80081a8:	f7ff f9d4 	bl	8007554 <__ulp>
 80081ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081b0:	f7f8 f992 	bl	80004d8 <__aeabi_dmul>
 80081b4:	4652      	mov	r2, sl
 80081b6:	465b      	mov	r3, fp
 80081b8:	f7f7 ffd8 	bl	800016c <__adddf3>
 80081bc:	460b      	mov	r3, r1
 80081be:	4945      	ldr	r1, [pc, #276]	@ (80082d4 <_strtod_l+0xad4>)
 80081c0:	4a4a      	ldr	r2, [pc, #296]	@ (80082ec <_strtod_l+0xaec>)
 80081c2:	4019      	ands	r1, r3
 80081c4:	4291      	cmp	r1, r2
 80081c6:	4682      	mov	sl, r0
 80081c8:	d942      	bls.n	8008250 <_strtod_l+0xa50>
 80081ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80081cc:	4b43      	ldr	r3, [pc, #268]	@ (80082dc <_strtod_l+0xadc>)
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d103      	bne.n	80081da <_strtod_l+0x9da>
 80081d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081d4:	3301      	adds	r3, #1
 80081d6:	f43f ad32 	beq.w	8007c3e <_strtod_l+0x43e>
 80081da:	f04f 3aff 	mov.w	sl, #4294967295
 80081de:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80082dc <_strtod_l+0xadc>
 80081e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80081e4:	9805      	ldr	r0, [sp, #20]
 80081e6:	f7fe fe89 	bl	8006efc <_Bfree>
 80081ea:	4649      	mov	r1, r9
 80081ec:	9805      	ldr	r0, [sp, #20]
 80081ee:	f7fe fe85 	bl	8006efc <_Bfree>
 80081f2:	4641      	mov	r1, r8
 80081f4:	9805      	ldr	r0, [sp, #20]
 80081f6:	f7fe fe81 	bl	8006efc <_Bfree>
 80081fa:	4621      	mov	r1, r4
 80081fc:	9805      	ldr	r0, [sp, #20]
 80081fe:	f7fe fe7d 	bl	8006efc <_Bfree>
 8008202:	e61c      	b.n	8007e3e <_strtod_l+0x63e>
 8008204:	f1ba 0f01 	cmp.w	sl, #1
 8008208:	d103      	bne.n	8008212 <_strtod_l+0xa12>
 800820a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800820c:	2b00      	cmp	r3, #0
 800820e:	f43f ada9 	beq.w	8007d64 <_strtod_l+0x564>
 8008212:	2200      	movs	r2, #0
 8008214:	4b36      	ldr	r3, [pc, #216]	@ (80082f0 <_strtod_l+0xaf0>)
 8008216:	2600      	movs	r6, #0
 8008218:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800821c:	4f30      	ldr	r7, [pc, #192]	@ (80082e0 <_strtod_l+0xae0>)
 800821e:	e7b3      	b.n	8008188 <_strtod_l+0x988>
 8008220:	2600      	movs	r6, #0
 8008222:	4f30      	ldr	r7, [pc, #192]	@ (80082e4 <_strtod_l+0xae4>)
 8008224:	e7ac      	b.n	8008180 <_strtod_l+0x980>
 8008226:	4630      	mov	r0, r6
 8008228:	4639      	mov	r1, r7
 800822a:	4b2e      	ldr	r3, [pc, #184]	@ (80082e4 <_strtod_l+0xae4>)
 800822c:	2200      	movs	r2, #0
 800822e:	f7f8 f953 	bl	80004d8 <__aeabi_dmul>
 8008232:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008234:	4606      	mov	r6, r0
 8008236:	460f      	mov	r7, r1
 8008238:	2b00      	cmp	r3, #0
 800823a:	d0a1      	beq.n	8008180 <_strtod_l+0x980>
 800823c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008240:	e7a2      	b.n	8008188 <_strtod_l+0x988>
 8008242:	2200      	movs	r2, #0
 8008244:	4b26      	ldr	r3, [pc, #152]	@ (80082e0 <_strtod_l+0xae0>)
 8008246:	4616      	mov	r6, r2
 8008248:	461f      	mov	r7, r3
 800824a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800824e:	e79b      	b.n	8008188 <_strtod_l+0x988>
 8008250:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008254:	9b08      	ldr	r3, [sp, #32]
 8008256:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1c1      	bne.n	80081e2 <_strtod_l+0x9e2>
 800825e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008262:	0d1b      	lsrs	r3, r3, #20
 8008264:	051b      	lsls	r3, r3, #20
 8008266:	429d      	cmp	r5, r3
 8008268:	d1bb      	bne.n	80081e2 <_strtod_l+0x9e2>
 800826a:	4630      	mov	r0, r6
 800826c:	4639      	mov	r1, r7
 800826e:	f7f8 fc7b 	bl	8000b68 <__aeabi_d2lz>
 8008272:	f7f8 f903 	bl	800047c <__aeabi_l2d>
 8008276:	4602      	mov	r2, r0
 8008278:	460b      	mov	r3, r1
 800827a:	4630      	mov	r0, r6
 800827c:	4639      	mov	r1, r7
 800827e:	f7f7 ff73 	bl	8000168 <__aeabi_dsub>
 8008282:	460b      	mov	r3, r1
 8008284:	4602      	mov	r2, r0
 8008286:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800828a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800828e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008290:	ea46 060a 	orr.w	r6, r6, sl
 8008294:	431e      	orrs	r6, r3
 8008296:	d06a      	beq.n	800836e <_strtod_l+0xb6e>
 8008298:	a309      	add	r3, pc, #36	@ (adr r3, 80082c0 <_strtod_l+0xac0>)
 800829a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829e:	f7f8 fb8d 	bl	80009bc <__aeabi_dcmplt>
 80082a2:	2800      	cmp	r0, #0
 80082a4:	f47f acd6 	bne.w	8007c54 <_strtod_l+0x454>
 80082a8:	a307      	add	r3, pc, #28	@ (adr r3, 80082c8 <_strtod_l+0xac8>)
 80082aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082b2:	f7f8 fba1 	bl	80009f8 <__aeabi_dcmpgt>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d093      	beq.n	80081e2 <_strtod_l+0x9e2>
 80082ba:	e4cb      	b.n	8007c54 <_strtod_l+0x454>
 80082bc:	f3af 8000 	nop.w
 80082c0:	94a03595 	.word	0x94a03595
 80082c4:	3fdfffff 	.word	0x3fdfffff
 80082c8:	35afe535 	.word	0x35afe535
 80082cc:	3fe00000 	.word	0x3fe00000
 80082d0:	39500000 	.word	0x39500000
 80082d4:	7ff00000 	.word	0x7ff00000
 80082d8:	000fffff 	.word	0x000fffff
 80082dc:	7fefffff 	.word	0x7fefffff
 80082e0:	3ff00000 	.word	0x3ff00000
 80082e4:	3fe00000 	.word	0x3fe00000
 80082e8:	7fe00000 	.word	0x7fe00000
 80082ec:	7c9fffff 	.word	0x7c9fffff
 80082f0:	bff00000 	.word	0xbff00000
 80082f4:	9b08      	ldr	r3, [sp, #32]
 80082f6:	b323      	cbz	r3, 8008342 <_strtod_l+0xb42>
 80082f8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80082fc:	d821      	bhi.n	8008342 <_strtod_l+0xb42>
 80082fe:	a328      	add	r3, pc, #160	@ (adr r3, 80083a0 <_strtod_l+0xba0>)
 8008300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008304:	4630      	mov	r0, r6
 8008306:	4639      	mov	r1, r7
 8008308:	f7f8 fb62 	bl	80009d0 <__aeabi_dcmple>
 800830c:	b1a0      	cbz	r0, 8008338 <_strtod_l+0xb38>
 800830e:	4639      	mov	r1, r7
 8008310:	4630      	mov	r0, r6
 8008312:	f7f8 fbb9 	bl	8000a88 <__aeabi_d2uiz>
 8008316:	2801      	cmp	r0, #1
 8008318:	bf38      	it	cc
 800831a:	2001      	movcc	r0, #1
 800831c:	f7f8 f862 	bl	80003e4 <__aeabi_ui2d>
 8008320:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008322:	4606      	mov	r6, r0
 8008324:	460f      	mov	r7, r1
 8008326:	b9fb      	cbnz	r3, 8008368 <_strtod_l+0xb68>
 8008328:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800832c:	9014      	str	r0, [sp, #80]	@ 0x50
 800832e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008330:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008334:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008338:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800833a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800833e:	1b5b      	subs	r3, r3, r5
 8008340:	9311      	str	r3, [sp, #68]	@ 0x44
 8008342:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008346:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800834a:	f7ff f903 	bl	8007554 <__ulp>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	4650      	mov	r0, sl
 8008354:	4659      	mov	r1, fp
 8008356:	f7f8 f8bf 	bl	80004d8 <__aeabi_dmul>
 800835a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800835e:	f7f7 ff05 	bl	800016c <__adddf3>
 8008362:	4682      	mov	sl, r0
 8008364:	468b      	mov	fp, r1
 8008366:	e775      	b.n	8008254 <_strtod_l+0xa54>
 8008368:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800836c:	e7e0      	b.n	8008330 <_strtod_l+0xb30>
 800836e:	a30e      	add	r3, pc, #56	@ (adr r3, 80083a8 <_strtod_l+0xba8>)
 8008370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008374:	f7f8 fb22 	bl	80009bc <__aeabi_dcmplt>
 8008378:	e79d      	b.n	80082b6 <_strtod_l+0xab6>
 800837a:	2300      	movs	r3, #0
 800837c:	930e      	str	r3, [sp, #56]	@ 0x38
 800837e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008380:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008382:	6013      	str	r3, [r2, #0]
 8008384:	f7ff ba79 	b.w	800787a <_strtod_l+0x7a>
 8008388:	2a65      	cmp	r2, #101	@ 0x65
 800838a:	f43f ab72 	beq.w	8007a72 <_strtod_l+0x272>
 800838e:	2a45      	cmp	r2, #69	@ 0x45
 8008390:	f43f ab6f 	beq.w	8007a72 <_strtod_l+0x272>
 8008394:	2301      	movs	r3, #1
 8008396:	f7ff bbaa 	b.w	8007aee <_strtod_l+0x2ee>
 800839a:	bf00      	nop
 800839c:	f3af 8000 	nop.w
 80083a0:	ffc00000 	.word	0xffc00000
 80083a4:	41dfffff 	.word	0x41dfffff
 80083a8:	94a03595 	.word	0x94a03595
 80083ac:	3fcfffff 	.word	0x3fcfffff

080083b0 <_strtod_r>:
 80083b0:	4b01      	ldr	r3, [pc, #4]	@ (80083b8 <_strtod_r+0x8>)
 80083b2:	f7ff ba25 	b.w	8007800 <_strtod_l>
 80083b6:	bf00      	nop
 80083b8:	20000068 	.word	0x20000068

080083bc <_strtol_l.isra.0>:
 80083bc:	2b24      	cmp	r3, #36	@ 0x24
 80083be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083c2:	4686      	mov	lr, r0
 80083c4:	4690      	mov	r8, r2
 80083c6:	d801      	bhi.n	80083cc <_strtol_l.isra.0+0x10>
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d106      	bne.n	80083da <_strtol_l.isra.0+0x1e>
 80083cc:	f7fd fdbc 	bl	8005f48 <__errno>
 80083d0:	2316      	movs	r3, #22
 80083d2:	6003      	str	r3, [r0, #0]
 80083d4:	2000      	movs	r0, #0
 80083d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083da:	460d      	mov	r5, r1
 80083dc:	4833      	ldr	r0, [pc, #204]	@ (80084ac <_strtol_l.isra.0+0xf0>)
 80083de:	462a      	mov	r2, r5
 80083e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083e4:	5d06      	ldrb	r6, [r0, r4]
 80083e6:	f016 0608 	ands.w	r6, r6, #8
 80083ea:	d1f8      	bne.n	80083de <_strtol_l.isra.0+0x22>
 80083ec:	2c2d      	cmp	r4, #45	@ 0x2d
 80083ee:	d110      	bne.n	8008412 <_strtol_l.isra.0+0x56>
 80083f0:	2601      	movs	r6, #1
 80083f2:	782c      	ldrb	r4, [r5, #0]
 80083f4:	1c95      	adds	r5, r2, #2
 80083f6:	f033 0210 	bics.w	r2, r3, #16
 80083fa:	d115      	bne.n	8008428 <_strtol_l.isra.0+0x6c>
 80083fc:	2c30      	cmp	r4, #48	@ 0x30
 80083fe:	d10d      	bne.n	800841c <_strtol_l.isra.0+0x60>
 8008400:	782a      	ldrb	r2, [r5, #0]
 8008402:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008406:	2a58      	cmp	r2, #88	@ 0x58
 8008408:	d108      	bne.n	800841c <_strtol_l.isra.0+0x60>
 800840a:	786c      	ldrb	r4, [r5, #1]
 800840c:	3502      	adds	r5, #2
 800840e:	2310      	movs	r3, #16
 8008410:	e00a      	b.n	8008428 <_strtol_l.isra.0+0x6c>
 8008412:	2c2b      	cmp	r4, #43	@ 0x2b
 8008414:	bf04      	itt	eq
 8008416:	782c      	ldrbeq	r4, [r5, #0]
 8008418:	1c95      	addeq	r5, r2, #2
 800841a:	e7ec      	b.n	80083f6 <_strtol_l.isra.0+0x3a>
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1f6      	bne.n	800840e <_strtol_l.isra.0+0x52>
 8008420:	2c30      	cmp	r4, #48	@ 0x30
 8008422:	bf14      	ite	ne
 8008424:	230a      	movne	r3, #10
 8008426:	2308      	moveq	r3, #8
 8008428:	2200      	movs	r2, #0
 800842a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800842e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008432:	fbbc f9f3 	udiv	r9, ip, r3
 8008436:	4610      	mov	r0, r2
 8008438:	fb03 ca19 	mls	sl, r3, r9, ip
 800843c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008440:	2f09      	cmp	r7, #9
 8008442:	d80f      	bhi.n	8008464 <_strtol_l.isra.0+0xa8>
 8008444:	463c      	mov	r4, r7
 8008446:	42a3      	cmp	r3, r4
 8008448:	dd1b      	ble.n	8008482 <_strtol_l.isra.0+0xc6>
 800844a:	1c57      	adds	r7, r2, #1
 800844c:	d007      	beq.n	800845e <_strtol_l.isra.0+0xa2>
 800844e:	4581      	cmp	r9, r0
 8008450:	d314      	bcc.n	800847c <_strtol_l.isra.0+0xc0>
 8008452:	d101      	bne.n	8008458 <_strtol_l.isra.0+0x9c>
 8008454:	45a2      	cmp	sl, r4
 8008456:	db11      	blt.n	800847c <_strtol_l.isra.0+0xc0>
 8008458:	2201      	movs	r2, #1
 800845a:	fb00 4003 	mla	r0, r0, r3, r4
 800845e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008462:	e7eb      	b.n	800843c <_strtol_l.isra.0+0x80>
 8008464:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008468:	2f19      	cmp	r7, #25
 800846a:	d801      	bhi.n	8008470 <_strtol_l.isra.0+0xb4>
 800846c:	3c37      	subs	r4, #55	@ 0x37
 800846e:	e7ea      	b.n	8008446 <_strtol_l.isra.0+0x8a>
 8008470:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008474:	2f19      	cmp	r7, #25
 8008476:	d804      	bhi.n	8008482 <_strtol_l.isra.0+0xc6>
 8008478:	3c57      	subs	r4, #87	@ 0x57
 800847a:	e7e4      	b.n	8008446 <_strtol_l.isra.0+0x8a>
 800847c:	f04f 32ff 	mov.w	r2, #4294967295
 8008480:	e7ed      	b.n	800845e <_strtol_l.isra.0+0xa2>
 8008482:	1c53      	adds	r3, r2, #1
 8008484:	d108      	bne.n	8008498 <_strtol_l.isra.0+0xdc>
 8008486:	2322      	movs	r3, #34	@ 0x22
 8008488:	4660      	mov	r0, ip
 800848a:	f8ce 3000 	str.w	r3, [lr]
 800848e:	f1b8 0f00 	cmp.w	r8, #0
 8008492:	d0a0      	beq.n	80083d6 <_strtol_l.isra.0+0x1a>
 8008494:	1e69      	subs	r1, r5, #1
 8008496:	e006      	b.n	80084a6 <_strtol_l.isra.0+0xea>
 8008498:	b106      	cbz	r6, 800849c <_strtol_l.isra.0+0xe0>
 800849a:	4240      	negs	r0, r0
 800849c:	f1b8 0f00 	cmp.w	r8, #0
 80084a0:	d099      	beq.n	80083d6 <_strtol_l.isra.0+0x1a>
 80084a2:	2a00      	cmp	r2, #0
 80084a4:	d1f6      	bne.n	8008494 <_strtol_l.isra.0+0xd8>
 80084a6:	f8c8 1000 	str.w	r1, [r8]
 80084aa:	e794      	b.n	80083d6 <_strtol_l.isra.0+0x1a>
 80084ac:	080099e1 	.word	0x080099e1

080084b0 <_strtol_r>:
 80084b0:	f7ff bf84 	b.w	80083bc <_strtol_l.isra.0>

080084b4 <__ssputs_r>:
 80084b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084b8:	461f      	mov	r7, r3
 80084ba:	688e      	ldr	r6, [r1, #8]
 80084bc:	4682      	mov	sl, r0
 80084be:	42be      	cmp	r6, r7
 80084c0:	460c      	mov	r4, r1
 80084c2:	4690      	mov	r8, r2
 80084c4:	680b      	ldr	r3, [r1, #0]
 80084c6:	d82d      	bhi.n	8008524 <__ssputs_r+0x70>
 80084c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80084d0:	d026      	beq.n	8008520 <__ssputs_r+0x6c>
 80084d2:	6965      	ldr	r5, [r4, #20]
 80084d4:	6909      	ldr	r1, [r1, #16]
 80084d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084da:	eba3 0901 	sub.w	r9, r3, r1
 80084de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084e2:	1c7b      	adds	r3, r7, #1
 80084e4:	444b      	add	r3, r9
 80084e6:	106d      	asrs	r5, r5, #1
 80084e8:	429d      	cmp	r5, r3
 80084ea:	bf38      	it	cc
 80084ec:	461d      	movcc	r5, r3
 80084ee:	0553      	lsls	r3, r2, #21
 80084f0:	d527      	bpl.n	8008542 <__ssputs_r+0x8e>
 80084f2:	4629      	mov	r1, r5
 80084f4:	f7fe fc36 	bl	8006d64 <_malloc_r>
 80084f8:	4606      	mov	r6, r0
 80084fa:	b360      	cbz	r0, 8008556 <__ssputs_r+0xa2>
 80084fc:	464a      	mov	r2, r9
 80084fe:	6921      	ldr	r1, [r4, #16]
 8008500:	f000 fa14 	bl	800892c <memcpy>
 8008504:	89a3      	ldrh	r3, [r4, #12]
 8008506:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800850a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800850e:	81a3      	strh	r3, [r4, #12]
 8008510:	6126      	str	r6, [r4, #16]
 8008512:	444e      	add	r6, r9
 8008514:	6026      	str	r6, [r4, #0]
 8008516:	463e      	mov	r6, r7
 8008518:	6165      	str	r5, [r4, #20]
 800851a:	eba5 0509 	sub.w	r5, r5, r9
 800851e:	60a5      	str	r5, [r4, #8]
 8008520:	42be      	cmp	r6, r7
 8008522:	d900      	bls.n	8008526 <__ssputs_r+0x72>
 8008524:	463e      	mov	r6, r7
 8008526:	4632      	mov	r2, r6
 8008528:	4641      	mov	r1, r8
 800852a:	6820      	ldr	r0, [r4, #0]
 800852c:	f000 f9c2 	bl	80088b4 <memmove>
 8008530:	2000      	movs	r0, #0
 8008532:	68a3      	ldr	r3, [r4, #8]
 8008534:	1b9b      	subs	r3, r3, r6
 8008536:	60a3      	str	r3, [r4, #8]
 8008538:	6823      	ldr	r3, [r4, #0]
 800853a:	4433      	add	r3, r6
 800853c:	6023      	str	r3, [r4, #0]
 800853e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008542:	462a      	mov	r2, r5
 8008544:	f000 fd83 	bl	800904e <_realloc_r>
 8008548:	4606      	mov	r6, r0
 800854a:	2800      	cmp	r0, #0
 800854c:	d1e0      	bne.n	8008510 <__ssputs_r+0x5c>
 800854e:	4650      	mov	r0, sl
 8008550:	6921      	ldr	r1, [r4, #16]
 8008552:	f7fe fb95 	bl	8006c80 <_free_r>
 8008556:	230c      	movs	r3, #12
 8008558:	f8ca 3000 	str.w	r3, [sl]
 800855c:	89a3      	ldrh	r3, [r4, #12]
 800855e:	f04f 30ff 	mov.w	r0, #4294967295
 8008562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008566:	81a3      	strh	r3, [r4, #12]
 8008568:	e7e9      	b.n	800853e <__ssputs_r+0x8a>
	...

0800856c <_svfiprintf_r>:
 800856c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008570:	4698      	mov	r8, r3
 8008572:	898b      	ldrh	r3, [r1, #12]
 8008574:	4607      	mov	r7, r0
 8008576:	061b      	lsls	r3, r3, #24
 8008578:	460d      	mov	r5, r1
 800857a:	4614      	mov	r4, r2
 800857c:	b09d      	sub	sp, #116	@ 0x74
 800857e:	d510      	bpl.n	80085a2 <_svfiprintf_r+0x36>
 8008580:	690b      	ldr	r3, [r1, #16]
 8008582:	b973      	cbnz	r3, 80085a2 <_svfiprintf_r+0x36>
 8008584:	2140      	movs	r1, #64	@ 0x40
 8008586:	f7fe fbed 	bl	8006d64 <_malloc_r>
 800858a:	6028      	str	r0, [r5, #0]
 800858c:	6128      	str	r0, [r5, #16]
 800858e:	b930      	cbnz	r0, 800859e <_svfiprintf_r+0x32>
 8008590:	230c      	movs	r3, #12
 8008592:	603b      	str	r3, [r7, #0]
 8008594:	f04f 30ff 	mov.w	r0, #4294967295
 8008598:	b01d      	add	sp, #116	@ 0x74
 800859a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800859e:	2340      	movs	r3, #64	@ 0x40
 80085a0:	616b      	str	r3, [r5, #20]
 80085a2:	2300      	movs	r3, #0
 80085a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80085a6:	2320      	movs	r3, #32
 80085a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085ac:	2330      	movs	r3, #48	@ 0x30
 80085ae:	f04f 0901 	mov.w	r9, #1
 80085b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80085b6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008750 <_svfiprintf_r+0x1e4>
 80085ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085be:	4623      	mov	r3, r4
 80085c0:	469a      	mov	sl, r3
 80085c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085c6:	b10a      	cbz	r2, 80085cc <_svfiprintf_r+0x60>
 80085c8:	2a25      	cmp	r2, #37	@ 0x25
 80085ca:	d1f9      	bne.n	80085c0 <_svfiprintf_r+0x54>
 80085cc:	ebba 0b04 	subs.w	fp, sl, r4
 80085d0:	d00b      	beq.n	80085ea <_svfiprintf_r+0x7e>
 80085d2:	465b      	mov	r3, fp
 80085d4:	4622      	mov	r2, r4
 80085d6:	4629      	mov	r1, r5
 80085d8:	4638      	mov	r0, r7
 80085da:	f7ff ff6b 	bl	80084b4 <__ssputs_r>
 80085de:	3001      	adds	r0, #1
 80085e0:	f000 80a7 	beq.w	8008732 <_svfiprintf_r+0x1c6>
 80085e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085e6:	445a      	add	r2, fp
 80085e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80085ea:	f89a 3000 	ldrb.w	r3, [sl]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 809f 	beq.w	8008732 <_svfiprintf_r+0x1c6>
 80085f4:	2300      	movs	r3, #0
 80085f6:	f04f 32ff 	mov.w	r2, #4294967295
 80085fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085fe:	f10a 0a01 	add.w	sl, sl, #1
 8008602:	9304      	str	r3, [sp, #16]
 8008604:	9307      	str	r3, [sp, #28]
 8008606:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800860a:	931a      	str	r3, [sp, #104]	@ 0x68
 800860c:	4654      	mov	r4, sl
 800860e:	2205      	movs	r2, #5
 8008610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008614:	484e      	ldr	r0, [pc, #312]	@ (8008750 <_svfiprintf_r+0x1e4>)
 8008616:	f7fd fcc4 	bl	8005fa2 <memchr>
 800861a:	9a04      	ldr	r2, [sp, #16]
 800861c:	b9d8      	cbnz	r0, 8008656 <_svfiprintf_r+0xea>
 800861e:	06d0      	lsls	r0, r2, #27
 8008620:	bf44      	itt	mi
 8008622:	2320      	movmi	r3, #32
 8008624:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008628:	0711      	lsls	r1, r2, #28
 800862a:	bf44      	itt	mi
 800862c:	232b      	movmi	r3, #43	@ 0x2b
 800862e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008632:	f89a 3000 	ldrb.w	r3, [sl]
 8008636:	2b2a      	cmp	r3, #42	@ 0x2a
 8008638:	d015      	beq.n	8008666 <_svfiprintf_r+0xfa>
 800863a:	4654      	mov	r4, sl
 800863c:	2000      	movs	r0, #0
 800863e:	f04f 0c0a 	mov.w	ip, #10
 8008642:	9a07      	ldr	r2, [sp, #28]
 8008644:	4621      	mov	r1, r4
 8008646:	f811 3b01 	ldrb.w	r3, [r1], #1
 800864a:	3b30      	subs	r3, #48	@ 0x30
 800864c:	2b09      	cmp	r3, #9
 800864e:	d94b      	bls.n	80086e8 <_svfiprintf_r+0x17c>
 8008650:	b1b0      	cbz	r0, 8008680 <_svfiprintf_r+0x114>
 8008652:	9207      	str	r2, [sp, #28]
 8008654:	e014      	b.n	8008680 <_svfiprintf_r+0x114>
 8008656:	eba0 0308 	sub.w	r3, r0, r8
 800865a:	fa09 f303 	lsl.w	r3, r9, r3
 800865e:	4313      	orrs	r3, r2
 8008660:	46a2      	mov	sl, r4
 8008662:	9304      	str	r3, [sp, #16]
 8008664:	e7d2      	b.n	800860c <_svfiprintf_r+0xa0>
 8008666:	9b03      	ldr	r3, [sp, #12]
 8008668:	1d19      	adds	r1, r3, #4
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	9103      	str	r1, [sp, #12]
 800866e:	2b00      	cmp	r3, #0
 8008670:	bfbb      	ittet	lt
 8008672:	425b      	neglt	r3, r3
 8008674:	f042 0202 	orrlt.w	r2, r2, #2
 8008678:	9307      	strge	r3, [sp, #28]
 800867a:	9307      	strlt	r3, [sp, #28]
 800867c:	bfb8      	it	lt
 800867e:	9204      	strlt	r2, [sp, #16]
 8008680:	7823      	ldrb	r3, [r4, #0]
 8008682:	2b2e      	cmp	r3, #46	@ 0x2e
 8008684:	d10a      	bne.n	800869c <_svfiprintf_r+0x130>
 8008686:	7863      	ldrb	r3, [r4, #1]
 8008688:	2b2a      	cmp	r3, #42	@ 0x2a
 800868a:	d132      	bne.n	80086f2 <_svfiprintf_r+0x186>
 800868c:	9b03      	ldr	r3, [sp, #12]
 800868e:	3402      	adds	r4, #2
 8008690:	1d1a      	adds	r2, r3, #4
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	9203      	str	r2, [sp, #12]
 8008696:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800869a:	9305      	str	r3, [sp, #20]
 800869c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008754 <_svfiprintf_r+0x1e8>
 80086a0:	2203      	movs	r2, #3
 80086a2:	4650      	mov	r0, sl
 80086a4:	7821      	ldrb	r1, [r4, #0]
 80086a6:	f7fd fc7c 	bl	8005fa2 <memchr>
 80086aa:	b138      	cbz	r0, 80086bc <_svfiprintf_r+0x150>
 80086ac:	2240      	movs	r2, #64	@ 0x40
 80086ae:	9b04      	ldr	r3, [sp, #16]
 80086b0:	eba0 000a 	sub.w	r0, r0, sl
 80086b4:	4082      	lsls	r2, r0
 80086b6:	4313      	orrs	r3, r2
 80086b8:	3401      	adds	r4, #1
 80086ba:	9304      	str	r3, [sp, #16]
 80086bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086c0:	2206      	movs	r2, #6
 80086c2:	4825      	ldr	r0, [pc, #148]	@ (8008758 <_svfiprintf_r+0x1ec>)
 80086c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086c8:	f7fd fc6b 	bl	8005fa2 <memchr>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	d036      	beq.n	800873e <_svfiprintf_r+0x1d2>
 80086d0:	4b22      	ldr	r3, [pc, #136]	@ (800875c <_svfiprintf_r+0x1f0>)
 80086d2:	bb1b      	cbnz	r3, 800871c <_svfiprintf_r+0x1b0>
 80086d4:	9b03      	ldr	r3, [sp, #12]
 80086d6:	3307      	adds	r3, #7
 80086d8:	f023 0307 	bic.w	r3, r3, #7
 80086dc:	3308      	adds	r3, #8
 80086de:	9303      	str	r3, [sp, #12]
 80086e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086e2:	4433      	add	r3, r6
 80086e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80086e6:	e76a      	b.n	80085be <_svfiprintf_r+0x52>
 80086e8:	460c      	mov	r4, r1
 80086ea:	2001      	movs	r0, #1
 80086ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80086f0:	e7a8      	b.n	8008644 <_svfiprintf_r+0xd8>
 80086f2:	2300      	movs	r3, #0
 80086f4:	f04f 0c0a 	mov.w	ip, #10
 80086f8:	4619      	mov	r1, r3
 80086fa:	3401      	adds	r4, #1
 80086fc:	9305      	str	r3, [sp, #20]
 80086fe:	4620      	mov	r0, r4
 8008700:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008704:	3a30      	subs	r2, #48	@ 0x30
 8008706:	2a09      	cmp	r2, #9
 8008708:	d903      	bls.n	8008712 <_svfiprintf_r+0x1a6>
 800870a:	2b00      	cmp	r3, #0
 800870c:	d0c6      	beq.n	800869c <_svfiprintf_r+0x130>
 800870e:	9105      	str	r1, [sp, #20]
 8008710:	e7c4      	b.n	800869c <_svfiprintf_r+0x130>
 8008712:	4604      	mov	r4, r0
 8008714:	2301      	movs	r3, #1
 8008716:	fb0c 2101 	mla	r1, ip, r1, r2
 800871a:	e7f0      	b.n	80086fe <_svfiprintf_r+0x192>
 800871c:	ab03      	add	r3, sp, #12
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	462a      	mov	r2, r5
 8008722:	4638      	mov	r0, r7
 8008724:	4b0e      	ldr	r3, [pc, #56]	@ (8008760 <_svfiprintf_r+0x1f4>)
 8008726:	a904      	add	r1, sp, #16
 8008728:	f7fc fcce 	bl	80050c8 <_printf_float>
 800872c:	1c42      	adds	r2, r0, #1
 800872e:	4606      	mov	r6, r0
 8008730:	d1d6      	bne.n	80086e0 <_svfiprintf_r+0x174>
 8008732:	89ab      	ldrh	r3, [r5, #12]
 8008734:	065b      	lsls	r3, r3, #25
 8008736:	f53f af2d 	bmi.w	8008594 <_svfiprintf_r+0x28>
 800873a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800873c:	e72c      	b.n	8008598 <_svfiprintf_r+0x2c>
 800873e:	ab03      	add	r3, sp, #12
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	462a      	mov	r2, r5
 8008744:	4638      	mov	r0, r7
 8008746:	4b06      	ldr	r3, [pc, #24]	@ (8008760 <_svfiprintf_r+0x1f4>)
 8008748:	a904      	add	r1, sp, #16
 800874a:	f7fc ff5b 	bl	8005604 <_printf_i>
 800874e:	e7ed      	b.n	800872c <_svfiprintf_r+0x1c0>
 8008750:	080097db 	.word	0x080097db
 8008754:	080097e1 	.word	0x080097e1
 8008758:	080097e5 	.word	0x080097e5
 800875c:	080050c9 	.word	0x080050c9
 8008760:	080084b5 	.word	0x080084b5

08008764 <__sflush_r>:
 8008764:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876a:	0716      	lsls	r6, r2, #28
 800876c:	4605      	mov	r5, r0
 800876e:	460c      	mov	r4, r1
 8008770:	d454      	bmi.n	800881c <__sflush_r+0xb8>
 8008772:	684b      	ldr	r3, [r1, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	dc02      	bgt.n	800877e <__sflush_r+0x1a>
 8008778:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800877a:	2b00      	cmp	r3, #0
 800877c:	dd48      	ble.n	8008810 <__sflush_r+0xac>
 800877e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008780:	2e00      	cmp	r6, #0
 8008782:	d045      	beq.n	8008810 <__sflush_r+0xac>
 8008784:	2300      	movs	r3, #0
 8008786:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800878a:	682f      	ldr	r7, [r5, #0]
 800878c:	6a21      	ldr	r1, [r4, #32]
 800878e:	602b      	str	r3, [r5, #0]
 8008790:	d030      	beq.n	80087f4 <__sflush_r+0x90>
 8008792:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	0759      	lsls	r1, r3, #29
 8008798:	d505      	bpl.n	80087a6 <__sflush_r+0x42>
 800879a:	6863      	ldr	r3, [r4, #4]
 800879c:	1ad2      	subs	r2, r2, r3
 800879e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80087a0:	b10b      	cbz	r3, 80087a6 <__sflush_r+0x42>
 80087a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087a4:	1ad2      	subs	r2, r2, r3
 80087a6:	2300      	movs	r3, #0
 80087a8:	4628      	mov	r0, r5
 80087aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087ac:	6a21      	ldr	r1, [r4, #32]
 80087ae:	47b0      	blx	r6
 80087b0:	1c43      	adds	r3, r0, #1
 80087b2:	89a3      	ldrh	r3, [r4, #12]
 80087b4:	d106      	bne.n	80087c4 <__sflush_r+0x60>
 80087b6:	6829      	ldr	r1, [r5, #0]
 80087b8:	291d      	cmp	r1, #29
 80087ba:	d82b      	bhi.n	8008814 <__sflush_r+0xb0>
 80087bc:	4a28      	ldr	r2, [pc, #160]	@ (8008860 <__sflush_r+0xfc>)
 80087be:	40ca      	lsrs	r2, r1
 80087c0:	07d6      	lsls	r6, r2, #31
 80087c2:	d527      	bpl.n	8008814 <__sflush_r+0xb0>
 80087c4:	2200      	movs	r2, #0
 80087c6:	6062      	str	r2, [r4, #4]
 80087c8:	6922      	ldr	r2, [r4, #16]
 80087ca:	04d9      	lsls	r1, r3, #19
 80087cc:	6022      	str	r2, [r4, #0]
 80087ce:	d504      	bpl.n	80087da <__sflush_r+0x76>
 80087d0:	1c42      	adds	r2, r0, #1
 80087d2:	d101      	bne.n	80087d8 <__sflush_r+0x74>
 80087d4:	682b      	ldr	r3, [r5, #0]
 80087d6:	b903      	cbnz	r3, 80087da <__sflush_r+0x76>
 80087d8:	6560      	str	r0, [r4, #84]	@ 0x54
 80087da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087dc:	602f      	str	r7, [r5, #0]
 80087de:	b1b9      	cbz	r1, 8008810 <__sflush_r+0xac>
 80087e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087e4:	4299      	cmp	r1, r3
 80087e6:	d002      	beq.n	80087ee <__sflush_r+0x8a>
 80087e8:	4628      	mov	r0, r5
 80087ea:	f7fe fa49 	bl	8006c80 <_free_r>
 80087ee:	2300      	movs	r3, #0
 80087f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80087f2:	e00d      	b.n	8008810 <__sflush_r+0xac>
 80087f4:	2301      	movs	r3, #1
 80087f6:	4628      	mov	r0, r5
 80087f8:	47b0      	blx	r6
 80087fa:	4602      	mov	r2, r0
 80087fc:	1c50      	adds	r0, r2, #1
 80087fe:	d1c9      	bne.n	8008794 <__sflush_r+0x30>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d0c6      	beq.n	8008794 <__sflush_r+0x30>
 8008806:	2b1d      	cmp	r3, #29
 8008808:	d001      	beq.n	800880e <__sflush_r+0xaa>
 800880a:	2b16      	cmp	r3, #22
 800880c:	d11d      	bne.n	800884a <__sflush_r+0xe6>
 800880e:	602f      	str	r7, [r5, #0]
 8008810:	2000      	movs	r0, #0
 8008812:	e021      	b.n	8008858 <__sflush_r+0xf4>
 8008814:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008818:	b21b      	sxth	r3, r3
 800881a:	e01a      	b.n	8008852 <__sflush_r+0xee>
 800881c:	690f      	ldr	r7, [r1, #16]
 800881e:	2f00      	cmp	r7, #0
 8008820:	d0f6      	beq.n	8008810 <__sflush_r+0xac>
 8008822:	0793      	lsls	r3, r2, #30
 8008824:	bf18      	it	ne
 8008826:	2300      	movne	r3, #0
 8008828:	680e      	ldr	r6, [r1, #0]
 800882a:	bf08      	it	eq
 800882c:	694b      	ldreq	r3, [r1, #20]
 800882e:	1bf6      	subs	r6, r6, r7
 8008830:	600f      	str	r7, [r1, #0]
 8008832:	608b      	str	r3, [r1, #8]
 8008834:	2e00      	cmp	r6, #0
 8008836:	ddeb      	ble.n	8008810 <__sflush_r+0xac>
 8008838:	4633      	mov	r3, r6
 800883a:	463a      	mov	r2, r7
 800883c:	4628      	mov	r0, r5
 800883e:	6a21      	ldr	r1, [r4, #32]
 8008840:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008844:	47e0      	blx	ip
 8008846:	2800      	cmp	r0, #0
 8008848:	dc07      	bgt.n	800885a <__sflush_r+0xf6>
 800884a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800884e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008852:	f04f 30ff 	mov.w	r0, #4294967295
 8008856:	81a3      	strh	r3, [r4, #12]
 8008858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800885a:	4407      	add	r7, r0
 800885c:	1a36      	subs	r6, r6, r0
 800885e:	e7e9      	b.n	8008834 <__sflush_r+0xd0>
 8008860:	20400001 	.word	0x20400001

08008864 <_fflush_r>:
 8008864:	b538      	push	{r3, r4, r5, lr}
 8008866:	690b      	ldr	r3, [r1, #16]
 8008868:	4605      	mov	r5, r0
 800886a:	460c      	mov	r4, r1
 800886c:	b913      	cbnz	r3, 8008874 <_fflush_r+0x10>
 800886e:	2500      	movs	r5, #0
 8008870:	4628      	mov	r0, r5
 8008872:	bd38      	pop	{r3, r4, r5, pc}
 8008874:	b118      	cbz	r0, 800887e <_fflush_r+0x1a>
 8008876:	6a03      	ldr	r3, [r0, #32]
 8008878:	b90b      	cbnz	r3, 800887e <_fflush_r+0x1a>
 800887a:	f7fd fa77 	bl	8005d6c <__sinit>
 800887e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d0f3      	beq.n	800886e <_fflush_r+0xa>
 8008886:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008888:	07d0      	lsls	r0, r2, #31
 800888a:	d404      	bmi.n	8008896 <_fflush_r+0x32>
 800888c:	0599      	lsls	r1, r3, #22
 800888e:	d402      	bmi.n	8008896 <_fflush_r+0x32>
 8008890:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008892:	f7fd fb84 	bl	8005f9e <__retarget_lock_acquire_recursive>
 8008896:	4628      	mov	r0, r5
 8008898:	4621      	mov	r1, r4
 800889a:	f7ff ff63 	bl	8008764 <__sflush_r>
 800889e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088a0:	4605      	mov	r5, r0
 80088a2:	07da      	lsls	r2, r3, #31
 80088a4:	d4e4      	bmi.n	8008870 <_fflush_r+0xc>
 80088a6:	89a3      	ldrh	r3, [r4, #12]
 80088a8:	059b      	lsls	r3, r3, #22
 80088aa:	d4e1      	bmi.n	8008870 <_fflush_r+0xc>
 80088ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088ae:	f7fd fb77 	bl	8005fa0 <__retarget_lock_release_recursive>
 80088b2:	e7dd      	b.n	8008870 <_fflush_r+0xc>

080088b4 <memmove>:
 80088b4:	4288      	cmp	r0, r1
 80088b6:	b510      	push	{r4, lr}
 80088b8:	eb01 0402 	add.w	r4, r1, r2
 80088bc:	d902      	bls.n	80088c4 <memmove+0x10>
 80088be:	4284      	cmp	r4, r0
 80088c0:	4623      	mov	r3, r4
 80088c2:	d807      	bhi.n	80088d4 <memmove+0x20>
 80088c4:	1e43      	subs	r3, r0, #1
 80088c6:	42a1      	cmp	r1, r4
 80088c8:	d008      	beq.n	80088dc <memmove+0x28>
 80088ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088d2:	e7f8      	b.n	80088c6 <memmove+0x12>
 80088d4:	4601      	mov	r1, r0
 80088d6:	4402      	add	r2, r0
 80088d8:	428a      	cmp	r2, r1
 80088da:	d100      	bne.n	80088de <memmove+0x2a>
 80088dc:	bd10      	pop	{r4, pc}
 80088de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088e6:	e7f7      	b.n	80088d8 <memmove+0x24>

080088e8 <strncmp>:
 80088e8:	b510      	push	{r4, lr}
 80088ea:	b16a      	cbz	r2, 8008908 <strncmp+0x20>
 80088ec:	3901      	subs	r1, #1
 80088ee:	1884      	adds	r4, r0, r2
 80088f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d103      	bne.n	8008904 <strncmp+0x1c>
 80088fc:	42a0      	cmp	r0, r4
 80088fe:	d001      	beq.n	8008904 <strncmp+0x1c>
 8008900:	2a00      	cmp	r2, #0
 8008902:	d1f5      	bne.n	80088f0 <strncmp+0x8>
 8008904:	1ad0      	subs	r0, r2, r3
 8008906:	bd10      	pop	{r4, pc}
 8008908:	4610      	mov	r0, r2
 800890a:	e7fc      	b.n	8008906 <strncmp+0x1e>

0800890c <_sbrk_r>:
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	2300      	movs	r3, #0
 8008910:	4d05      	ldr	r5, [pc, #20]	@ (8008928 <_sbrk_r+0x1c>)
 8008912:	4604      	mov	r4, r0
 8008914:	4608      	mov	r0, r1
 8008916:	602b      	str	r3, [r5, #0]
 8008918:	f7f8 fe10 	bl	800153c <_sbrk>
 800891c:	1c43      	adds	r3, r0, #1
 800891e:	d102      	bne.n	8008926 <_sbrk_r+0x1a>
 8008920:	682b      	ldr	r3, [r5, #0]
 8008922:	b103      	cbz	r3, 8008926 <_sbrk_r+0x1a>
 8008924:	6023      	str	r3, [r4, #0]
 8008926:	bd38      	pop	{r3, r4, r5, pc}
 8008928:	200004cc 	.word	0x200004cc

0800892c <memcpy>:
 800892c:	440a      	add	r2, r1
 800892e:	4291      	cmp	r1, r2
 8008930:	f100 33ff 	add.w	r3, r0, #4294967295
 8008934:	d100      	bne.n	8008938 <memcpy+0xc>
 8008936:	4770      	bx	lr
 8008938:	b510      	push	{r4, lr}
 800893a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800893e:	4291      	cmp	r1, r2
 8008940:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008944:	d1f9      	bne.n	800893a <memcpy+0xe>
 8008946:	bd10      	pop	{r4, pc}

08008948 <nan>:
 8008948:	2000      	movs	r0, #0
 800894a:	4901      	ldr	r1, [pc, #4]	@ (8008950 <nan+0x8>)
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	7ff80000 	.word	0x7ff80000

08008954 <__assert_func>:
 8008954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008956:	4614      	mov	r4, r2
 8008958:	461a      	mov	r2, r3
 800895a:	4b09      	ldr	r3, [pc, #36]	@ (8008980 <__assert_func+0x2c>)
 800895c:	4605      	mov	r5, r0
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68d8      	ldr	r0, [r3, #12]
 8008962:	b14c      	cbz	r4, 8008978 <__assert_func+0x24>
 8008964:	4b07      	ldr	r3, [pc, #28]	@ (8008984 <__assert_func+0x30>)
 8008966:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800896a:	9100      	str	r1, [sp, #0]
 800896c:	462b      	mov	r3, r5
 800896e:	4906      	ldr	r1, [pc, #24]	@ (8008988 <__assert_func+0x34>)
 8008970:	f000 fba8 	bl	80090c4 <fiprintf>
 8008974:	f000 fbb8 	bl	80090e8 <abort>
 8008978:	4b04      	ldr	r3, [pc, #16]	@ (800898c <__assert_func+0x38>)
 800897a:	461c      	mov	r4, r3
 800897c:	e7f3      	b.n	8008966 <__assert_func+0x12>
 800897e:	bf00      	nop
 8008980:	20000018 	.word	0x20000018
 8008984:	080097f4 	.word	0x080097f4
 8008988:	08009801 	.word	0x08009801
 800898c:	0800982f 	.word	0x0800982f

08008990 <_calloc_r>:
 8008990:	b570      	push	{r4, r5, r6, lr}
 8008992:	fba1 5402 	umull	r5, r4, r1, r2
 8008996:	b934      	cbnz	r4, 80089a6 <_calloc_r+0x16>
 8008998:	4629      	mov	r1, r5
 800899a:	f7fe f9e3 	bl	8006d64 <_malloc_r>
 800899e:	4606      	mov	r6, r0
 80089a0:	b928      	cbnz	r0, 80089ae <_calloc_r+0x1e>
 80089a2:	4630      	mov	r0, r6
 80089a4:	bd70      	pop	{r4, r5, r6, pc}
 80089a6:	220c      	movs	r2, #12
 80089a8:	2600      	movs	r6, #0
 80089aa:	6002      	str	r2, [r0, #0]
 80089ac:	e7f9      	b.n	80089a2 <_calloc_r+0x12>
 80089ae:	462a      	mov	r2, r5
 80089b0:	4621      	mov	r1, r4
 80089b2:	f7fd fa76 	bl	8005ea2 <memset>
 80089b6:	e7f4      	b.n	80089a2 <_calloc_r+0x12>

080089b8 <rshift>:
 80089b8:	6903      	ldr	r3, [r0, #16]
 80089ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80089c2:	f100 0414 	add.w	r4, r0, #20
 80089c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80089ca:	dd46      	ble.n	8008a5a <rshift+0xa2>
 80089cc:	f011 011f 	ands.w	r1, r1, #31
 80089d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80089d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80089d8:	d10c      	bne.n	80089f4 <rshift+0x3c>
 80089da:	4629      	mov	r1, r5
 80089dc:	f100 0710 	add.w	r7, r0, #16
 80089e0:	42b1      	cmp	r1, r6
 80089e2:	d335      	bcc.n	8008a50 <rshift+0x98>
 80089e4:	1a9b      	subs	r3, r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	1eea      	subs	r2, r5, #3
 80089ea:	4296      	cmp	r6, r2
 80089ec:	bf38      	it	cc
 80089ee:	2300      	movcc	r3, #0
 80089f0:	4423      	add	r3, r4
 80089f2:	e015      	b.n	8008a20 <rshift+0x68>
 80089f4:	46a1      	mov	r9, r4
 80089f6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80089fa:	f1c1 0820 	rsb	r8, r1, #32
 80089fe:	40cf      	lsrs	r7, r1
 8008a00:	f105 0e04 	add.w	lr, r5, #4
 8008a04:	4576      	cmp	r6, lr
 8008a06:	46f4      	mov	ip, lr
 8008a08:	d816      	bhi.n	8008a38 <rshift+0x80>
 8008a0a:	1a9a      	subs	r2, r3, r2
 8008a0c:	0092      	lsls	r2, r2, #2
 8008a0e:	3a04      	subs	r2, #4
 8008a10:	3501      	adds	r5, #1
 8008a12:	42ae      	cmp	r6, r5
 8008a14:	bf38      	it	cc
 8008a16:	2200      	movcc	r2, #0
 8008a18:	18a3      	adds	r3, r4, r2
 8008a1a:	50a7      	str	r7, [r4, r2]
 8008a1c:	b107      	cbz	r7, 8008a20 <rshift+0x68>
 8008a1e:	3304      	adds	r3, #4
 8008a20:	42a3      	cmp	r3, r4
 8008a22:	eba3 0204 	sub.w	r2, r3, r4
 8008a26:	bf08      	it	eq
 8008a28:	2300      	moveq	r3, #0
 8008a2a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008a2e:	6102      	str	r2, [r0, #16]
 8008a30:	bf08      	it	eq
 8008a32:	6143      	streq	r3, [r0, #20]
 8008a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a38:	f8dc c000 	ldr.w	ip, [ip]
 8008a3c:	fa0c fc08 	lsl.w	ip, ip, r8
 8008a40:	ea4c 0707 	orr.w	r7, ip, r7
 8008a44:	f849 7b04 	str.w	r7, [r9], #4
 8008a48:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008a4c:	40cf      	lsrs	r7, r1
 8008a4e:	e7d9      	b.n	8008a04 <rshift+0x4c>
 8008a50:	f851 cb04 	ldr.w	ip, [r1], #4
 8008a54:	f847 cf04 	str.w	ip, [r7, #4]!
 8008a58:	e7c2      	b.n	80089e0 <rshift+0x28>
 8008a5a:	4623      	mov	r3, r4
 8008a5c:	e7e0      	b.n	8008a20 <rshift+0x68>

08008a5e <__hexdig_fun>:
 8008a5e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008a62:	2b09      	cmp	r3, #9
 8008a64:	d802      	bhi.n	8008a6c <__hexdig_fun+0xe>
 8008a66:	3820      	subs	r0, #32
 8008a68:	b2c0      	uxtb	r0, r0
 8008a6a:	4770      	bx	lr
 8008a6c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008a70:	2b05      	cmp	r3, #5
 8008a72:	d801      	bhi.n	8008a78 <__hexdig_fun+0x1a>
 8008a74:	3847      	subs	r0, #71	@ 0x47
 8008a76:	e7f7      	b.n	8008a68 <__hexdig_fun+0xa>
 8008a78:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008a7c:	2b05      	cmp	r3, #5
 8008a7e:	d801      	bhi.n	8008a84 <__hexdig_fun+0x26>
 8008a80:	3827      	subs	r0, #39	@ 0x27
 8008a82:	e7f1      	b.n	8008a68 <__hexdig_fun+0xa>
 8008a84:	2000      	movs	r0, #0
 8008a86:	4770      	bx	lr

08008a88 <__gethex>:
 8008a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8c:	468a      	mov	sl, r1
 8008a8e:	4690      	mov	r8, r2
 8008a90:	b085      	sub	sp, #20
 8008a92:	9302      	str	r3, [sp, #8]
 8008a94:	680b      	ldr	r3, [r1, #0]
 8008a96:	9001      	str	r0, [sp, #4]
 8008a98:	1c9c      	adds	r4, r3, #2
 8008a9a:	46a1      	mov	r9, r4
 8008a9c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008aa0:	2830      	cmp	r0, #48	@ 0x30
 8008aa2:	d0fa      	beq.n	8008a9a <__gethex+0x12>
 8008aa4:	eba9 0303 	sub.w	r3, r9, r3
 8008aa8:	f1a3 0b02 	sub.w	fp, r3, #2
 8008aac:	f7ff ffd7 	bl	8008a5e <__hexdig_fun>
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d168      	bne.n	8008b88 <__gethex+0x100>
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	4648      	mov	r0, r9
 8008aba:	499f      	ldr	r1, [pc, #636]	@ (8008d38 <__gethex+0x2b0>)
 8008abc:	f7ff ff14 	bl	80088e8 <strncmp>
 8008ac0:	4607      	mov	r7, r0
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	d167      	bne.n	8008b96 <__gethex+0x10e>
 8008ac6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008aca:	4626      	mov	r6, r4
 8008acc:	f7ff ffc7 	bl	8008a5e <__hexdig_fun>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d062      	beq.n	8008b9a <__gethex+0x112>
 8008ad4:	4623      	mov	r3, r4
 8008ad6:	7818      	ldrb	r0, [r3, #0]
 8008ad8:	4699      	mov	r9, r3
 8008ada:	2830      	cmp	r0, #48	@ 0x30
 8008adc:	f103 0301 	add.w	r3, r3, #1
 8008ae0:	d0f9      	beq.n	8008ad6 <__gethex+0x4e>
 8008ae2:	f7ff ffbc 	bl	8008a5e <__hexdig_fun>
 8008ae6:	fab0 f580 	clz	r5, r0
 8008aea:	f04f 0b01 	mov.w	fp, #1
 8008aee:	096d      	lsrs	r5, r5, #5
 8008af0:	464a      	mov	r2, r9
 8008af2:	4616      	mov	r6, r2
 8008af4:	7830      	ldrb	r0, [r6, #0]
 8008af6:	3201      	adds	r2, #1
 8008af8:	f7ff ffb1 	bl	8008a5e <__hexdig_fun>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d1f8      	bne.n	8008af2 <__gethex+0x6a>
 8008b00:	2201      	movs	r2, #1
 8008b02:	4630      	mov	r0, r6
 8008b04:	498c      	ldr	r1, [pc, #560]	@ (8008d38 <__gethex+0x2b0>)
 8008b06:	f7ff feef 	bl	80088e8 <strncmp>
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	d13f      	bne.n	8008b8e <__gethex+0x106>
 8008b0e:	b944      	cbnz	r4, 8008b22 <__gethex+0x9a>
 8008b10:	1c74      	adds	r4, r6, #1
 8008b12:	4622      	mov	r2, r4
 8008b14:	4616      	mov	r6, r2
 8008b16:	7830      	ldrb	r0, [r6, #0]
 8008b18:	3201      	adds	r2, #1
 8008b1a:	f7ff ffa0 	bl	8008a5e <__hexdig_fun>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d1f8      	bne.n	8008b14 <__gethex+0x8c>
 8008b22:	1ba4      	subs	r4, r4, r6
 8008b24:	00a7      	lsls	r7, r4, #2
 8008b26:	7833      	ldrb	r3, [r6, #0]
 8008b28:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008b2c:	2b50      	cmp	r3, #80	@ 0x50
 8008b2e:	d13e      	bne.n	8008bae <__gethex+0x126>
 8008b30:	7873      	ldrb	r3, [r6, #1]
 8008b32:	2b2b      	cmp	r3, #43	@ 0x2b
 8008b34:	d033      	beq.n	8008b9e <__gethex+0x116>
 8008b36:	2b2d      	cmp	r3, #45	@ 0x2d
 8008b38:	d034      	beq.n	8008ba4 <__gethex+0x11c>
 8008b3a:	2400      	movs	r4, #0
 8008b3c:	1c71      	adds	r1, r6, #1
 8008b3e:	7808      	ldrb	r0, [r1, #0]
 8008b40:	f7ff ff8d 	bl	8008a5e <__hexdig_fun>
 8008b44:	1e43      	subs	r3, r0, #1
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	2b18      	cmp	r3, #24
 8008b4a:	d830      	bhi.n	8008bae <__gethex+0x126>
 8008b4c:	f1a0 0210 	sub.w	r2, r0, #16
 8008b50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008b54:	f7ff ff83 	bl	8008a5e <__hexdig_fun>
 8008b58:	f100 3cff 	add.w	ip, r0, #4294967295
 8008b5c:	fa5f fc8c 	uxtb.w	ip, ip
 8008b60:	f1bc 0f18 	cmp.w	ip, #24
 8008b64:	f04f 030a 	mov.w	r3, #10
 8008b68:	d91e      	bls.n	8008ba8 <__gethex+0x120>
 8008b6a:	b104      	cbz	r4, 8008b6e <__gethex+0xe6>
 8008b6c:	4252      	negs	r2, r2
 8008b6e:	4417      	add	r7, r2
 8008b70:	f8ca 1000 	str.w	r1, [sl]
 8008b74:	b1ed      	cbz	r5, 8008bb2 <__gethex+0x12a>
 8008b76:	f1bb 0f00 	cmp.w	fp, #0
 8008b7a:	bf0c      	ite	eq
 8008b7c:	2506      	moveq	r5, #6
 8008b7e:	2500      	movne	r5, #0
 8008b80:	4628      	mov	r0, r5
 8008b82:	b005      	add	sp, #20
 8008b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b88:	2500      	movs	r5, #0
 8008b8a:	462c      	mov	r4, r5
 8008b8c:	e7b0      	b.n	8008af0 <__gethex+0x68>
 8008b8e:	2c00      	cmp	r4, #0
 8008b90:	d1c7      	bne.n	8008b22 <__gethex+0x9a>
 8008b92:	4627      	mov	r7, r4
 8008b94:	e7c7      	b.n	8008b26 <__gethex+0x9e>
 8008b96:	464e      	mov	r6, r9
 8008b98:	462f      	mov	r7, r5
 8008b9a:	2501      	movs	r5, #1
 8008b9c:	e7c3      	b.n	8008b26 <__gethex+0x9e>
 8008b9e:	2400      	movs	r4, #0
 8008ba0:	1cb1      	adds	r1, r6, #2
 8008ba2:	e7cc      	b.n	8008b3e <__gethex+0xb6>
 8008ba4:	2401      	movs	r4, #1
 8008ba6:	e7fb      	b.n	8008ba0 <__gethex+0x118>
 8008ba8:	fb03 0002 	mla	r0, r3, r2, r0
 8008bac:	e7ce      	b.n	8008b4c <__gethex+0xc4>
 8008bae:	4631      	mov	r1, r6
 8008bb0:	e7de      	b.n	8008b70 <__gethex+0xe8>
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	eba6 0309 	sub.w	r3, r6, r9
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	2b07      	cmp	r3, #7
 8008bbc:	dc0a      	bgt.n	8008bd4 <__gethex+0x14c>
 8008bbe:	9801      	ldr	r0, [sp, #4]
 8008bc0:	f7fe f95c 	bl	8006e7c <_Balloc>
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	b940      	cbnz	r0, 8008bda <__gethex+0x152>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	21e4      	movs	r1, #228	@ 0xe4
 8008bcc:	4b5b      	ldr	r3, [pc, #364]	@ (8008d3c <__gethex+0x2b4>)
 8008bce:	485c      	ldr	r0, [pc, #368]	@ (8008d40 <__gethex+0x2b8>)
 8008bd0:	f7ff fec0 	bl	8008954 <__assert_func>
 8008bd4:	3101      	adds	r1, #1
 8008bd6:	105b      	asrs	r3, r3, #1
 8008bd8:	e7ef      	b.n	8008bba <__gethex+0x132>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f100 0a14 	add.w	sl, r0, #20
 8008be0:	4655      	mov	r5, sl
 8008be2:	469b      	mov	fp, r3
 8008be4:	45b1      	cmp	r9, r6
 8008be6:	d337      	bcc.n	8008c58 <__gethex+0x1d0>
 8008be8:	f845 bb04 	str.w	fp, [r5], #4
 8008bec:	eba5 050a 	sub.w	r5, r5, sl
 8008bf0:	10ad      	asrs	r5, r5, #2
 8008bf2:	6125      	str	r5, [r4, #16]
 8008bf4:	4658      	mov	r0, fp
 8008bf6:	f7fe fa33 	bl	8007060 <__hi0bits>
 8008bfa:	016d      	lsls	r5, r5, #5
 8008bfc:	f8d8 6000 	ldr.w	r6, [r8]
 8008c00:	1a2d      	subs	r5, r5, r0
 8008c02:	42b5      	cmp	r5, r6
 8008c04:	dd54      	ble.n	8008cb0 <__gethex+0x228>
 8008c06:	1bad      	subs	r5, r5, r6
 8008c08:	4629      	mov	r1, r5
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f7fe fdb5 	bl	800777a <__any_on>
 8008c10:	4681      	mov	r9, r0
 8008c12:	b178      	cbz	r0, 8008c34 <__gethex+0x1ac>
 8008c14:	f04f 0901 	mov.w	r9, #1
 8008c18:	1e6b      	subs	r3, r5, #1
 8008c1a:	1159      	asrs	r1, r3, #5
 8008c1c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008c20:	f003 021f 	and.w	r2, r3, #31
 8008c24:	fa09 f202 	lsl.w	r2, r9, r2
 8008c28:	420a      	tst	r2, r1
 8008c2a:	d003      	beq.n	8008c34 <__gethex+0x1ac>
 8008c2c:	454b      	cmp	r3, r9
 8008c2e:	dc36      	bgt.n	8008c9e <__gethex+0x216>
 8008c30:	f04f 0902 	mov.w	r9, #2
 8008c34:	4629      	mov	r1, r5
 8008c36:	4620      	mov	r0, r4
 8008c38:	f7ff febe 	bl	80089b8 <rshift>
 8008c3c:	442f      	add	r7, r5
 8008c3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c42:	42bb      	cmp	r3, r7
 8008c44:	da42      	bge.n	8008ccc <__gethex+0x244>
 8008c46:	4621      	mov	r1, r4
 8008c48:	9801      	ldr	r0, [sp, #4]
 8008c4a:	f7fe f957 	bl	8006efc <_Bfree>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c52:	25a3      	movs	r5, #163	@ 0xa3
 8008c54:	6013      	str	r3, [r2, #0]
 8008c56:	e793      	b.n	8008b80 <__gethex+0xf8>
 8008c58:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008c5c:	2a2e      	cmp	r2, #46	@ 0x2e
 8008c5e:	d012      	beq.n	8008c86 <__gethex+0x1fe>
 8008c60:	2b20      	cmp	r3, #32
 8008c62:	d104      	bne.n	8008c6e <__gethex+0x1e6>
 8008c64:	f845 bb04 	str.w	fp, [r5], #4
 8008c68:	f04f 0b00 	mov.w	fp, #0
 8008c6c:	465b      	mov	r3, fp
 8008c6e:	7830      	ldrb	r0, [r6, #0]
 8008c70:	9303      	str	r3, [sp, #12]
 8008c72:	f7ff fef4 	bl	8008a5e <__hexdig_fun>
 8008c76:	9b03      	ldr	r3, [sp, #12]
 8008c78:	f000 000f 	and.w	r0, r0, #15
 8008c7c:	4098      	lsls	r0, r3
 8008c7e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008c82:	3304      	adds	r3, #4
 8008c84:	e7ae      	b.n	8008be4 <__gethex+0x15c>
 8008c86:	45b1      	cmp	r9, r6
 8008c88:	d8ea      	bhi.n	8008c60 <__gethex+0x1d8>
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	492a      	ldr	r1, [pc, #168]	@ (8008d38 <__gethex+0x2b0>)
 8008c90:	9303      	str	r3, [sp, #12]
 8008c92:	f7ff fe29 	bl	80088e8 <strncmp>
 8008c96:	9b03      	ldr	r3, [sp, #12]
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d1e1      	bne.n	8008c60 <__gethex+0x1d8>
 8008c9c:	e7a2      	b.n	8008be4 <__gethex+0x15c>
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	1ea9      	subs	r1, r5, #2
 8008ca2:	f7fe fd6a 	bl	800777a <__any_on>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d0c2      	beq.n	8008c30 <__gethex+0x1a8>
 8008caa:	f04f 0903 	mov.w	r9, #3
 8008cae:	e7c1      	b.n	8008c34 <__gethex+0x1ac>
 8008cb0:	da09      	bge.n	8008cc6 <__gethex+0x23e>
 8008cb2:	1b75      	subs	r5, r6, r5
 8008cb4:	4621      	mov	r1, r4
 8008cb6:	462a      	mov	r2, r5
 8008cb8:	9801      	ldr	r0, [sp, #4]
 8008cba:	f7fe fb2f 	bl	800731c <__lshift>
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	1b7f      	subs	r7, r7, r5
 8008cc2:	f100 0a14 	add.w	sl, r0, #20
 8008cc6:	f04f 0900 	mov.w	r9, #0
 8008cca:	e7b8      	b.n	8008c3e <__gethex+0x1b6>
 8008ccc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008cd0:	42bd      	cmp	r5, r7
 8008cd2:	dd6f      	ble.n	8008db4 <__gethex+0x32c>
 8008cd4:	1bed      	subs	r5, r5, r7
 8008cd6:	42ae      	cmp	r6, r5
 8008cd8:	dc34      	bgt.n	8008d44 <__gethex+0x2bc>
 8008cda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d022      	beq.n	8008d28 <__gethex+0x2a0>
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d024      	beq.n	8008d30 <__gethex+0x2a8>
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d115      	bne.n	8008d16 <__gethex+0x28e>
 8008cea:	42ae      	cmp	r6, r5
 8008cec:	d113      	bne.n	8008d16 <__gethex+0x28e>
 8008cee:	2e01      	cmp	r6, #1
 8008cf0:	d10b      	bne.n	8008d0a <__gethex+0x282>
 8008cf2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008cf6:	9a02      	ldr	r2, [sp, #8]
 8008cf8:	2562      	movs	r5, #98	@ 0x62
 8008cfa:	6013      	str	r3, [r2, #0]
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	6123      	str	r3, [r4, #16]
 8008d00:	f8ca 3000 	str.w	r3, [sl]
 8008d04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d06:	601c      	str	r4, [r3, #0]
 8008d08:	e73a      	b.n	8008b80 <__gethex+0xf8>
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	1e71      	subs	r1, r6, #1
 8008d0e:	f7fe fd34 	bl	800777a <__any_on>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d1ed      	bne.n	8008cf2 <__gethex+0x26a>
 8008d16:	4621      	mov	r1, r4
 8008d18:	9801      	ldr	r0, [sp, #4]
 8008d1a:	f7fe f8ef 	bl	8006efc <_Bfree>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d22:	2550      	movs	r5, #80	@ 0x50
 8008d24:	6013      	str	r3, [r2, #0]
 8008d26:	e72b      	b.n	8008b80 <__gethex+0xf8>
 8008d28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1f3      	bne.n	8008d16 <__gethex+0x28e>
 8008d2e:	e7e0      	b.n	8008cf2 <__gethex+0x26a>
 8008d30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1dd      	bne.n	8008cf2 <__gethex+0x26a>
 8008d36:	e7ee      	b.n	8008d16 <__gethex+0x28e>
 8008d38:	080097d9 	.word	0x080097d9
 8008d3c:	0800976f 	.word	0x0800976f
 8008d40:	08009830 	.word	0x08009830
 8008d44:	1e6f      	subs	r7, r5, #1
 8008d46:	f1b9 0f00 	cmp.w	r9, #0
 8008d4a:	d130      	bne.n	8008dae <__gethex+0x326>
 8008d4c:	b127      	cbz	r7, 8008d58 <__gethex+0x2d0>
 8008d4e:	4639      	mov	r1, r7
 8008d50:	4620      	mov	r0, r4
 8008d52:	f7fe fd12 	bl	800777a <__any_on>
 8008d56:	4681      	mov	r9, r0
 8008d58:	2301      	movs	r3, #1
 8008d5a:	4629      	mov	r1, r5
 8008d5c:	1b76      	subs	r6, r6, r5
 8008d5e:	2502      	movs	r5, #2
 8008d60:	117a      	asrs	r2, r7, #5
 8008d62:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008d66:	f007 071f 	and.w	r7, r7, #31
 8008d6a:	40bb      	lsls	r3, r7
 8008d6c:	4213      	tst	r3, r2
 8008d6e:	4620      	mov	r0, r4
 8008d70:	bf18      	it	ne
 8008d72:	f049 0902 	orrne.w	r9, r9, #2
 8008d76:	f7ff fe1f 	bl	80089b8 <rshift>
 8008d7a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008d7e:	f1b9 0f00 	cmp.w	r9, #0
 8008d82:	d047      	beq.n	8008e14 <__gethex+0x38c>
 8008d84:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d015      	beq.n	8008db8 <__gethex+0x330>
 8008d8c:	2b03      	cmp	r3, #3
 8008d8e:	d017      	beq.n	8008dc0 <__gethex+0x338>
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d109      	bne.n	8008da8 <__gethex+0x320>
 8008d94:	f019 0f02 	tst.w	r9, #2
 8008d98:	d006      	beq.n	8008da8 <__gethex+0x320>
 8008d9a:	f8da 3000 	ldr.w	r3, [sl]
 8008d9e:	ea49 0903 	orr.w	r9, r9, r3
 8008da2:	f019 0f01 	tst.w	r9, #1
 8008da6:	d10e      	bne.n	8008dc6 <__gethex+0x33e>
 8008da8:	f045 0510 	orr.w	r5, r5, #16
 8008dac:	e032      	b.n	8008e14 <__gethex+0x38c>
 8008dae:	f04f 0901 	mov.w	r9, #1
 8008db2:	e7d1      	b.n	8008d58 <__gethex+0x2d0>
 8008db4:	2501      	movs	r5, #1
 8008db6:	e7e2      	b.n	8008d7e <__gethex+0x2f6>
 8008db8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dba:	f1c3 0301 	rsb	r3, r3, #1
 8008dbe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008dc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d0f0      	beq.n	8008da8 <__gethex+0x320>
 8008dc6:	f04f 0c00 	mov.w	ip, #0
 8008dca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008dce:	f104 0314 	add.w	r3, r4, #20
 8008dd2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008dd6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008de0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008de4:	d01b      	beq.n	8008e1e <__gethex+0x396>
 8008de6:	3201      	adds	r2, #1
 8008de8:	6002      	str	r2, [r0, #0]
 8008dea:	2d02      	cmp	r5, #2
 8008dec:	f104 0314 	add.w	r3, r4, #20
 8008df0:	d13c      	bne.n	8008e6c <__gethex+0x3e4>
 8008df2:	f8d8 2000 	ldr.w	r2, [r8]
 8008df6:	3a01      	subs	r2, #1
 8008df8:	42b2      	cmp	r2, r6
 8008dfa:	d109      	bne.n	8008e10 <__gethex+0x388>
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	1171      	asrs	r1, r6, #5
 8008e00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e04:	f006 061f 	and.w	r6, r6, #31
 8008e08:	fa02 f606 	lsl.w	r6, r2, r6
 8008e0c:	421e      	tst	r6, r3
 8008e0e:	d13a      	bne.n	8008e86 <__gethex+0x3fe>
 8008e10:	f045 0520 	orr.w	r5, r5, #32
 8008e14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e16:	601c      	str	r4, [r3, #0]
 8008e18:	9b02      	ldr	r3, [sp, #8]
 8008e1a:	601f      	str	r7, [r3, #0]
 8008e1c:	e6b0      	b.n	8008b80 <__gethex+0xf8>
 8008e1e:	4299      	cmp	r1, r3
 8008e20:	f843 cc04 	str.w	ip, [r3, #-4]
 8008e24:	d8d9      	bhi.n	8008dda <__gethex+0x352>
 8008e26:	68a3      	ldr	r3, [r4, #8]
 8008e28:	459b      	cmp	fp, r3
 8008e2a:	db17      	blt.n	8008e5c <__gethex+0x3d4>
 8008e2c:	6861      	ldr	r1, [r4, #4]
 8008e2e:	9801      	ldr	r0, [sp, #4]
 8008e30:	3101      	adds	r1, #1
 8008e32:	f7fe f823 	bl	8006e7c <_Balloc>
 8008e36:	4681      	mov	r9, r0
 8008e38:	b918      	cbnz	r0, 8008e42 <__gethex+0x3ba>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	2184      	movs	r1, #132	@ 0x84
 8008e3e:	4b19      	ldr	r3, [pc, #100]	@ (8008ea4 <__gethex+0x41c>)
 8008e40:	e6c5      	b.n	8008bce <__gethex+0x146>
 8008e42:	6922      	ldr	r2, [r4, #16]
 8008e44:	f104 010c 	add.w	r1, r4, #12
 8008e48:	3202      	adds	r2, #2
 8008e4a:	0092      	lsls	r2, r2, #2
 8008e4c:	300c      	adds	r0, #12
 8008e4e:	f7ff fd6d 	bl	800892c <memcpy>
 8008e52:	4621      	mov	r1, r4
 8008e54:	9801      	ldr	r0, [sp, #4]
 8008e56:	f7fe f851 	bl	8006efc <_Bfree>
 8008e5a:	464c      	mov	r4, r9
 8008e5c:	6923      	ldr	r3, [r4, #16]
 8008e5e:	1c5a      	adds	r2, r3, #1
 8008e60:	6122      	str	r2, [r4, #16]
 8008e62:	2201      	movs	r2, #1
 8008e64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e68:	615a      	str	r2, [r3, #20]
 8008e6a:	e7be      	b.n	8008dea <__gethex+0x362>
 8008e6c:	6922      	ldr	r2, [r4, #16]
 8008e6e:	455a      	cmp	r2, fp
 8008e70:	dd0b      	ble.n	8008e8a <__gethex+0x402>
 8008e72:	2101      	movs	r1, #1
 8008e74:	4620      	mov	r0, r4
 8008e76:	f7ff fd9f 	bl	80089b8 <rshift>
 8008e7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e7e:	3701      	adds	r7, #1
 8008e80:	42bb      	cmp	r3, r7
 8008e82:	f6ff aee0 	blt.w	8008c46 <__gethex+0x1be>
 8008e86:	2501      	movs	r5, #1
 8008e88:	e7c2      	b.n	8008e10 <__gethex+0x388>
 8008e8a:	f016 061f 	ands.w	r6, r6, #31
 8008e8e:	d0fa      	beq.n	8008e86 <__gethex+0x3fe>
 8008e90:	4453      	add	r3, sl
 8008e92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008e96:	f7fe f8e3 	bl	8007060 <__hi0bits>
 8008e9a:	f1c6 0620 	rsb	r6, r6, #32
 8008e9e:	42b0      	cmp	r0, r6
 8008ea0:	dbe7      	blt.n	8008e72 <__gethex+0x3ea>
 8008ea2:	e7f0      	b.n	8008e86 <__gethex+0x3fe>
 8008ea4:	0800976f 	.word	0x0800976f

08008ea8 <L_shift>:
 8008ea8:	f1c2 0208 	rsb	r2, r2, #8
 8008eac:	0092      	lsls	r2, r2, #2
 8008eae:	b570      	push	{r4, r5, r6, lr}
 8008eb0:	f1c2 0620 	rsb	r6, r2, #32
 8008eb4:	6843      	ldr	r3, [r0, #4]
 8008eb6:	6804      	ldr	r4, [r0, #0]
 8008eb8:	fa03 f506 	lsl.w	r5, r3, r6
 8008ebc:	432c      	orrs	r4, r5
 8008ebe:	40d3      	lsrs	r3, r2
 8008ec0:	6004      	str	r4, [r0, #0]
 8008ec2:	f840 3f04 	str.w	r3, [r0, #4]!
 8008ec6:	4288      	cmp	r0, r1
 8008ec8:	d3f4      	bcc.n	8008eb4 <L_shift+0xc>
 8008eca:	bd70      	pop	{r4, r5, r6, pc}

08008ecc <__match>:
 8008ecc:	b530      	push	{r4, r5, lr}
 8008ece:	6803      	ldr	r3, [r0, #0]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ed6:	b914      	cbnz	r4, 8008ede <__match+0x12>
 8008ed8:	6003      	str	r3, [r0, #0]
 8008eda:	2001      	movs	r0, #1
 8008edc:	bd30      	pop	{r4, r5, pc}
 8008ede:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ee2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008ee6:	2d19      	cmp	r5, #25
 8008ee8:	bf98      	it	ls
 8008eea:	3220      	addls	r2, #32
 8008eec:	42a2      	cmp	r2, r4
 8008eee:	d0f0      	beq.n	8008ed2 <__match+0x6>
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	e7f3      	b.n	8008edc <__match+0x10>

08008ef4 <__hexnan>:
 8008ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef8:	2500      	movs	r5, #0
 8008efa:	680b      	ldr	r3, [r1, #0]
 8008efc:	4682      	mov	sl, r0
 8008efe:	115e      	asrs	r6, r3, #5
 8008f00:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008f04:	f013 031f 	ands.w	r3, r3, #31
 8008f08:	bf18      	it	ne
 8008f0a:	3604      	addne	r6, #4
 8008f0c:	1f37      	subs	r7, r6, #4
 8008f0e:	4690      	mov	r8, r2
 8008f10:	46b9      	mov	r9, r7
 8008f12:	463c      	mov	r4, r7
 8008f14:	46ab      	mov	fp, r5
 8008f16:	b087      	sub	sp, #28
 8008f18:	6801      	ldr	r1, [r0, #0]
 8008f1a:	9301      	str	r3, [sp, #4]
 8008f1c:	f846 5c04 	str.w	r5, [r6, #-4]
 8008f20:	9502      	str	r5, [sp, #8]
 8008f22:	784a      	ldrb	r2, [r1, #1]
 8008f24:	1c4b      	adds	r3, r1, #1
 8008f26:	9303      	str	r3, [sp, #12]
 8008f28:	b342      	cbz	r2, 8008f7c <__hexnan+0x88>
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	9105      	str	r1, [sp, #20]
 8008f2e:	9204      	str	r2, [sp, #16]
 8008f30:	f7ff fd95 	bl	8008a5e <__hexdig_fun>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	d151      	bne.n	8008fdc <__hexnan+0xe8>
 8008f38:	9a04      	ldr	r2, [sp, #16]
 8008f3a:	9905      	ldr	r1, [sp, #20]
 8008f3c:	2a20      	cmp	r2, #32
 8008f3e:	d818      	bhi.n	8008f72 <__hexnan+0x7e>
 8008f40:	9b02      	ldr	r3, [sp, #8]
 8008f42:	459b      	cmp	fp, r3
 8008f44:	dd13      	ble.n	8008f6e <__hexnan+0x7a>
 8008f46:	454c      	cmp	r4, r9
 8008f48:	d206      	bcs.n	8008f58 <__hexnan+0x64>
 8008f4a:	2d07      	cmp	r5, #7
 8008f4c:	dc04      	bgt.n	8008f58 <__hexnan+0x64>
 8008f4e:	462a      	mov	r2, r5
 8008f50:	4649      	mov	r1, r9
 8008f52:	4620      	mov	r0, r4
 8008f54:	f7ff ffa8 	bl	8008ea8 <L_shift>
 8008f58:	4544      	cmp	r4, r8
 8008f5a:	d952      	bls.n	8009002 <__hexnan+0x10e>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	f1a4 0904 	sub.w	r9, r4, #4
 8008f62:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f66:	461d      	mov	r5, r3
 8008f68:	464c      	mov	r4, r9
 8008f6a:	f8cd b008 	str.w	fp, [sp, #8]
 8008f6e:	9903      	ldr	r1, [sp, #12]
 8008f70:	e7d7      	b.n	8008f22 <__hexnan+0x2e>
 8008f72:	2a29      	cmp	r2, #41	@ 0x29
 8008f74:	d157      	bne.n	8009026 <__hexnan+0x132>
 8008f76:	3102      	adds	r1, #2
 8008f78:	f8ca 1000 	str.w	r1, [sl]
 8008f7c:	f1bb 0f00 	cmp.w	fp, #0
 8008f80:	d051      	beq.n	8009026 <__hexnan+0x132>
 8008f82:	454c      	cmp	r4, r9
 8008f84:	d206      	bcs.n	8008f94 <__hexnan+0xa0>
 8008f86:	2d07      	cmp	r5, #7
 8008f88:	dc04      	bgt.n	8008f94 <__hexnan+0xa0>
 8008f8a:	462a      	mov	r2, r5
 8008f8c:	4649      	mov	r1, r9
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f7ff ff8a 	bl	8008ea8 <L_shift>
 8008f94:	4544      	cmp	r4, r8
 8008f96:	d936      	bls.n	8009006 <__hexnan+0x112>
 8008f98:	4623      	mov	r3, r4
 8008f9a:	f1a8 0204 	sub.w	r2, r8, #4
 8008f9e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008fa2:	429f      	cmp	r7, r3
 8008fa4:	f842 1f04 	str.w	r1, [r2, #4]!
 8008fa8:	d2f9      	bcs.n	8008f9e <__hexnan+0xaa>
 8008faa:	1b3b      	subs	r3, r7, r4
 8008fac:	f023 0303 	bic.w	r3, r3, #3
 8008fb0:	3304      	adds	r3, #4
 8008fb2:	3401      	adds	r4, #1
 8008fb4:	3e03      	subs	r6, #3
 8008fb6:	42b4      	cmp	r4, r6
 8008fb8:	bf88      	it	hi
 8008fba:	2304      	movhi	r3, #4
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	4443      	add	r3, r8
 8008fc0:	f843 2b04 	str.w	r2, [r3], #4
 8008fc4:	429f      	cmp	r7, r3
 8008fc6:	d2fb      	bcs.n	8008fc0 <__hexnan+0xcc>
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	b91b      	cbnz	r3, 8008fd4 <__hexnan+0xe0>
 8008fcc:	4547      	cmp	r7, r8
 8008fce:	d128      	bne.n	8009022 <__hexnan+0x12e>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	603b      	str	r3, [r7, #0]
 8008fd4:	2005      	movs	r0, #5
 8008fd6:	b007      	add	sp, #28
 8008fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fdc:	3501      	adds	r5, #1
 8008fde:	2d08      	cmp	r5, #8
 8008fe0:	f10b 0b01 	add.w	fp, fp, #1
 8008fe4:	dd06      	ble.n	8008ff4 <__hexnan+0x100>
 8008fe6:	4544      	cmp	r4, r8
 8008fe8:	d9c1      	bls.n	8008f6e <__hexnan+0x7a>
 8008fea:	2300      	movs	r3, #0
 8008fec:	2501      	movs	r5, #1
 8008fee:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ff2:	3c04      	subs	r4, #4
 8008ff4:	6822      	ldr	r2, [r4, #0]
 8008ff6:	f000 000f 	and.w	r0, r0, #15
 8008ffa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008ffe:	6020      	str	r0, [r4, #0]
 8009000:	e7b5      	b.n	8008f6e <__hexnan+0x7a>
 8009002:	2508      	movs	r5, #8
 8009004:	e7b3      	b.n	8008f6e <__hexnan+0x7a>
 8009006:	9b01      	ldr	r3, [sp, #4]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d0dd      	beq.n	8008fc8 <__hexnan+0xd4>
 800900c:	f04f 32ff 	mov.w	r2, #4294967295
 8009010:	f1c3 0320 	rsb	r3, r3, #32
 8009014:	40da      	lsrs	r2, r3
 8009016:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800901a:	4013      	ands	r3, r2
 800901c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009020:	e7d2      	b.n	8008fc8 <__hexnan+0xd4>
 8009022:	3f04      	subs	r7, #4
 8009024:	e7d0      	b.n	8008fc8 <__hexnan+0xd4>
 8009026:	2004      	movs	r0, #4
 8009028:	e7d5      	b.n	8008fd6 <__hexnan+0xe2>

0800902a <__ascii_mbtowc>:
 800902a:	b082      	sub	sp, #8
 800902c:	b901      	cbnz	r1, 8009030 <__ascii_mbtowc+0x6>
 800902e:	a901      	add	r1, sp, #4
 8009030:	b142      	cbz	r2, 8009044 <__ascii_mbtowc+0x1a>
 8009032:	b14b      	cbz	r3, 8009048 <__ascii_mbtowc+0x1e>
 8009034:	7813      	ldrb	r3, [r2, #0]
 8009036:	600b      	str	r3, [r1, #0]
 8009038:	7812      	ldrb	r2, [r2, #0]
 800903a:	1e10      	subs	r0, r2, #0
 800903c:	bf18      	it	ne
 800903e:	2001      	movne	r0, #1
 8009040:	b002      	add	sp, #8
 8009042:	4770      	bx	lr
 8009044:	4610      	mov	r0, r2
 8009046:	e7fb      	b.n	8009040 <__ascii_mbtowc+0x16>
 8009048:	f06f 0001 	mvn.w	r0, #1
 800904c:	e7f8      	b.n	8009040 <__ascii_mbtowc+0x16>

0800904e <_realloc_r>:
 800904e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009052:	4607      	mov	r7, r0
 8009054:	4614      	mov	r4, r2
 8009056:	460d      	mov	r5, r1
 8009058:	b921      	cbnz	r1, 8009064 <_realloc_r+0x16>
 800905a:	4611      	mov	r1, r2
 800905c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009060:	f7fd be80 	b.w	8006d64 <_malloc_r>
 8009064:	b92a      	cbnz	r2, 8009072 <_realloc_r+0x24>
 8009066:	f7fd fe0b 	bl	8006c80 <_free_r>
 800906a:	4625      	mov	r5, r4
 800906c:	4628      	mov	r0, r5
 800906e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009072:	f000 f840 	bl	80090f6 <_malloc_usable_size_r>
 8009076:	4284      	cmp	r4, r0
 8009078:	4606      	mov	r6, r0
 800907a:	d802      	bhi.n	8009082 <_realloc_r+0x34>
 800907c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009080:	d8f4      	bhi.n	800906c <_realloc_r+0x1e>
 8009082:	4621      	mov	r1, r4
 8009084:	4638      	mov	r0, r7
 8009086:	f7fd fe6d 	bl	8006d64 <_malloc_r>
 800908a:	4680      	mov	r8, r0
 800908c:	b908      	cbnz	r0, 8009092 <_realloc_r+0x44>
 800908e:	4645      	mov	r5, r8
 8009090:	e7ec      	b.n	800906c <_realloc_r+0x1e>
 8009092:	42b4      	cmp	r4, r6
 8009094:	4622      	mov	r2, r4
 8009096:	4629      	mov	r1, r5
 8009098:	bf28      	it	cs
 800909a:	4632      	movcs	r2, r6
 800909c:	f7ff fc46 	bl	800892c <memcpy>
 80090a0:	4629      	mov	r1, r5
 80090a2:	4638      	mov	r0, r7
 80090a4:	f7fd fdec 	bl	8006c80 <_free_r>
 80090a8:	e7f1      	b.n	800908e <_realloc_r+0x40>

080090aa <__ascii_wctomb>:
 80090aa:	4603      	mov	r3, r0
 80090ac:	4608      	mov	r0, r1
 80090ae:	b141      	cbz	r1, 80090c2 <__ascii_wctomb+0x18>
 80090b0:	2aff      	cmp	r2, #255	@ 0xff
 80090b2:	d904      	bls.n	80090be <__ascii_wctomb+0x14>
 80090b4:	228a      	movs	r2, #138	@ 0x8a
 80090b6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ba:	601a      	str	r2, [r3, #0]
 80090bc:	4770      	bx	lr
 80090be:	2001      	movs	r0, #1
 80090c0:	700a      	strb	r2, [r1, #0]
 80090c2:	4770      	bx	lr

080090c4 <fiprintf>:
 80090c4:	b40e      	push	{r1, r2, r3}
 80090c6:	b503      	push	{r0, r1, lr}
 80090c8:	4601      	mov	r1, r0
 80090ca:	ab03      	add	r3, sp, #12
 80090cc:	4805      	ldr	r0, [pc, #20]	@ (80090e4 <fiprintf+0x20>)
 80090ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80090d2:	6800      	ldr	r0, [r0, #0]
 80090d4:	9301      	str	r3, [sp, #4]
 80090d6:	f000 f83d 	bl	8009154 <_vfiprintf_r>
 80090da:	b002      	add	sp, #8
 80090dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80090e0:	b003      	add	sp, #12
 80090e2:	4770      	bx	lr
 80090e4:	20000018 	.word	0x20000018

080090e8 <abort>:
 80090e8:	2006      	movs	r0, #6
 80090ea:	b508      	push	{r3, lr}
 80090ec:	f000 fa06 	bl	80094fc <raise>
 80090f0:	2001      	movs	r0, #1
 80090f2:	f7f8 f9ae 	bl	8001452 <_exit>

080090f6 <_malloc_usable_size_r>:
 80090f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090fa:	1f18      	subs	r0, r3, #4
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	bfbc      	itt	lt
 8009100:	580b      	ldrlt	r3, [r1, r0]
 8009102:	18c0      	addlt	r0, r0, r3
 8009104:	4770      	bx	lr

08009106 <__sfputc_r>:
 8009106:	6893      	ldr	r3, [r2, #8]
 8009108:	b410      	push	{r4}
 800910a:	3b01      	subs	r3, #1
 800910c:	2b00      	cmp	r3, #0
 800910e:	6093      	str	r3, [r2, #8]
 8009110:	da07      	bge.n	8009122 <__sfputc_r+0x1c>
 8009112:	6994      	ldr	r4, [r2, #24]
 8009114:	42a3      	cmp	r3, r4
 8009116:	db01      	blt.n	800911c <__sfputc_r+0x16>
 8009118:	290a      	cmp	r1, #10
 800911a:	d102      	bne.n	8009122 <__sfputc_r+0x1c>
 800911c:	bc10      	pop	{r4}
 800911e:	f000 b931 	b.w	8009384 <__swbuf_r>
 8009122:	6813      	ldr	r3, [r2, #0]
 8009124:	1c58      	adds	r0, r3, #1
 8009126:	6010      	str	r0, [r2, #0]
 8009128:	7019      	strb	r1, [r3, #0]
 800912a:	4608      	mov	r0, r1
 800912c:	bc10      	pop	{r4}
 800912e:	4770      	bx	lr

08009130 <__sfputs_r>:
 8009130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009132:	4606      	mov	r6, r0
 8009134:	460f      	mov	r7, r1
 8009136:	4614      	mov	r4, r2
 8009138:	18d5      	adds	r5, r2, r3
 800913a:	42ac      	cmp	r4, r5
 800913c:	d101      	bne.n	8009142 <__sfputs_r+0x12>
 800913e:	2000      	movs	r0, #0
 8009140:	e007      	b.n	8009152 <__sfputs_r+0x22>
 8009142:	463a      	mov	r2, r7
 8009144:	4630      	mov	r0, r6
 8009146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800914a:	f7ff ffdc 	bl	8009106 <__sfputc_r>
 800914e:	1c43      	adds	r3, r0, #1
 8009150:	d1f3      	bne.n	800913a <__sfputs_r+0xa>
 8009152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009154 <_vfiprintf_r>:
 8009154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009158:	460d      	mov	r5, r1
 800915a:	4614      	mov	r4, r2
 800915c:	4698      	mov	r8, r3
 800915e:	4606      	mov	r6, r0
 8009160:	b09d      	sub	sp, #116	@ 0x74
 8009162:	b118      	cbz	r0, 800916c <_vfiprintf_r+0x18>
 8009164:	6a03      	ldr	r3, [r0, #32]
 8009166:	b90b      	cbnz	r3, 800916c <_vfiprintf_r+0x18>
 8009168:	f7fc fe00 	bl	8005d6c <__sinit>
 800916c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800916e:	07d9      	lsls	r1, r3, #31
 8009170:	d405      	bmi.n	800917e <_vfiprintf_r+0x2a>
 8009172:	89ab      	ldrh	r3, [r5, #12]
 8009174:	059a      	lsls	r2, r3, #22
 8009176:	d402      	bmi.n	800917e <_vfiprintf_r+0x2a>
 8009178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800917a:	f7fc ff10 	bl	8005f9e <__retarget_lock_acquire_recursive>
 800917e:	89ab      	ldrh	r3, [r5, #12]
 8009180:	071b      	lsls	r3, r3, #28
 8009182:	d501      	bpl.n	8009188 <_vfiprintf_r+0x34>
 8009184:	692b      	ldr	r3, [r5, #16]
 8009186:	b99b      	cbnz	r3, 80091b0 <_vfiprintf_r+0x5c>
 8009188:	4629      	mov	r1, r5
 800918a:	4630      	mov	r0, r6
 800918c:	f000 f938 	bl	8009400 <__swsetup_r>
 8009190:	b170      	cbz	r0, 80091b0 <_vfiprintf_r+0x5c>
 8009192:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009194:	07dc      	lsls	r4, r3, #31
 8009196:	d504      	bpl.n	80091a2 <_vfiprintf_r+0x4e>
 8009198:	f04f 30ff 	mov.w	r0, #4294967295
 800919c:	b01d      	add	sp, #116	@ 0x74
 800919e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a2:	89ab      	ldrh	r3, [r5, #12]
 80091a4:	0598      	lsls	r0, r3, #22
 80091a6:	d4f7      	bmi.n	8009198 <_vfiprintf_r+0x44>
 80091a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091aa:	f7fc fef9 	bl	8005fa0 <__retarget_lock_release_recursive>
 80091ae:	e7f3      	b.n	8009198 <_vfiprintf_r+0x44>
 80091b0:	2300      	movs	r3, #0
 80091b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80091b4:	2320      	movs	r3, #32
 80091b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091ba:	2330      	movs	r3, #48	@ 0x30
 80091bc:	f04f 0901 	mov.w	r9, #1
 80091c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80091c4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009370 <_vfiprintf_r+0x21c>
 80091c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80091cc:	4623      	mov	r3, r4
 80091ce:	469a      	mov	sl, r3
 80091d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091d4:	b10a      	cbz	r2, 80091da <_vfiprintf_r+0x86>
 80091d6:	2a25      	cmp	r2, #37	@ 0x25
 80091d8:	d1f9      	bne.n	80091ce <_vfiprintf_r+0x7a>
 80091da:	ebba 0b04 	subs.w	fp, sl, r4
 80091de:	d00b      	beq.n	80091f8 <_vfiprintf_r+0xa4>
 80091e0:	465b      	mov	r3, fp
 80091e2:	4622      	mov	r2, r4
 80091e4:	4629      	mov	r1, r5
 80091e6:	4630      	mov	r0, r6
 80091e8:	f7ff ffa2 	bl	8009130 <__sfputs_r>
 80091ec:	3001      	adds	r0, #1
 80091ee:	f000 80a7 	beq.w	8009340 <_vfiprintf_r+0x1ec>
 80091f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091f4:	445a      	add	r2, fp
 80091f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80091f8:	f89a 3000 	ldrb.w	r3, [sl]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 809f 	beq.w	8009340 <_vfiprintf_r+0x1ec>
 8009202:	2300      	movs	r3, #0
 8009204:	f04f 32ff 	mov.w	r2, #4294967295
 8009208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800920c:	f10a 0a01 	add.w	sl, sl, #1
 8009210:	9304      	str	r3, [sp, #16]
 8009212:	9307      	str	r3, [sp, #28]
 8009214:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009218:	931a      	str	r3, [sp, #104]	@ 0x68
 800921a:	4654      	mov	r4, sl
 800921c:	2205      	movs	r2, #5
 800921e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009222:	4853      	ldr	r0, [pc, #332]	@ (8009370 <_vfiprintf_r+0x21c>)
 8009224:	f7fc febd 	bl	8005fa2 <memchr>
 8009228:	9a04      	ldr	r2, [sp, #16]
 800922a:	b9d8      	cbnz	r0, 8009264 <_vfiprintf_r+0x110>
 800922c:	06d1      	lsls	r1, r2, #27
 800922e:	bf44      	itt	mi
 8009230:	2320      	movmi	r3, #32
 8009232:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009236:	0713      	lsls	r3, r2, #28
 8009238:	bf44      	itt	mi
 800923a:	232b      	movmi	r3, #43	@ 0x2b
 800923c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009240:	f89a 3000 	ldrb.w	r3, [sl]
 8009244:	2b2a      	cmp	r3, #42	@ 0x2a
 8009246:	d015      	beq.n	8009274 <_vfiprintf_r+0x120>
 8009248:	4654      	mov	r4, sl
 800924a:	2000      	movs	r0, #0
 800924c:	f04f 0c0a 	mov.w	ip, #10
 8009250:	9a07      	ldr	r2, [sp, #28]
 8009252:	4621      	mov	r1, r4
 8009254:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009258:	3b30      	subs	r3, #48	@ 0x30
 800925a:	2b09      	cmp	r3, #9
 800925c:	d94b      	bls.n	80092f6 <_vfiprintf_r+0x1a2>
 800925e:	b1b0      	cbz	r0, 800928e <_vfiprintf_r+0x13a>
 8009260:	9207      	str	r2, [sp, #28]
 8009262:	e014      	b.n	800928e <_vfiprintf_r+0x13a>
 8009264:	eba0 0308 	sub.w	r3, r0, r8
 8009268:	fa09 f303 	lsl.w	r3, r9, r3
 800926c:	4313      	orrs	r3, r2
 800926e:	46a2      	mov	sl, r4
 8009270:	9304      	str	r3, [sp, #16]
 8009272:	e7d2      	b.n	800921a <_vfiprintf_r+0xc6>
 8009274:	9b03      	ldr	r3, [sp, #12]
 8009276:	1d19      	adds	r1, r3, #4
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	9103      	str	r1, [sp, #12]
 800927c:	2b00      	cmp	r3, #0
 800927e:	bfbb      	ittet	lt
 8009280:	425b      	neglt	r3, r3
 8009282:	f042 0202 	orrlt.w	r2, r2, #2
 8009286:	9307      	strge	r3, [sp, #28]
 8009288:	9307      	strlt	r3, [sp, #28]
 800928a:	bfb8      	it	lt
 800928c:	9204      	strlt	r2, [sp, #16]
 800928e:	7823      	ldrb	r3, [r4, #0]
 8009290:	2b2e      	cmp	r3, #46	@ 0x2e
 8009292:	d10a      	bne.n	80092aa <_vfiprintf_r+0x156>
 8009294:	7863      	ldrb	r3, [r4, #1]
 8009296:	2b2a      	cmp	r3, #42	@ 0x2a
 8009298:	d132      	bne.n	8009300 <_vfiprintf_r+0x1ac>
 800929a:	9b03      	ldr	r3, [sp, #12]
 800929c:	3402      	adds	r4, #2
 800929e:	1d1a      	adds	r2, r3, #4
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	9203      	str	r2, [sp, #12]
 80092a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092a8:	9305      	str	r3, [sp, #20]
 80092aa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009374 <_vfiprintf_r+0x220>
 80092ae:	2203      	movs	r2, #3
 80092b0:	4650      	mov	r0, sl
 80092b2:	7821      	ldrb	r1, [r4, #0]
 80092b4:	f7fc fe75 	bl	8005fa2 <memchr>
 80092b8:	b138      	cbz	r0, 80092ca <_vfiprintf_r+0x176>
 80092ba:	2240      	movs	r2, #64	@ 0x40
 80092bc:	9b04      	ldr	r3, [sp, #16]
 80092be:	eba0 000a 	sub.w	r0, r0, sl
 80092c2:	4082      	lsls	r2, r0
 80092c4:	4313      	orrs	r3, r2
 80092c6:	3401      	adds	r4, #1
 80092c8:	9304      	str	r3, [sp, #16]
 80092ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ce:	2206      	movs	r2, #6
 80092d0:	4829      	ldr	r0, [pc, #164]	@ (8009378 <_vfiprintf_r+0x224>)
 80092d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092d6:	f7fc fe64 	bl	8005fa2 <memchr>
 80092da:	2800      	cmp	r0, #0
 80092dc:	d03f      	beq.n	800935e <_vfiprintf_r+0x20a>
 80092de:	4b27      	ldr	r3, [pc, #156]	@ (800937c <_vfiprintf_r+0x228>)
 80092e0:	bb1b      	cbnz	r3, 800932a <_vfiprintf_r+0x1d6>
 80092e2:	9b03      	ldr	r3, [sp, #12]
 80092e4:	3307      	adds	r3, #7
 80092e6:	f023 0307 	bic.w	r3, r3, #7
 80092ea:	3308      	adds	r3, #8
 80092ec:	9303      	str	r3, [sp, #12]
 80092ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092f0:	443b      	add	r3, r7
 80092f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80092f4:	e76a      	b.n	80091cc <_vfiprintf_r+0x78>
 80092f6:	460c      	mov	r4, r1
 80092f8:	2001      	movs	r0, #1
 80092fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80092fe:	e7a8      	b.n	8009252 <_vfiprintf_r+0xfe>
 8009300:	2300      	movs	r3, #0
 8009302:	f04f 0c0a 	mov.w	ip, #10
 8009306:	4619      	mov	r1, r3
 8009308:	3401      	adds	r4, #1
 800930a:	9305      	str	r3, [sp, #20]
 800930c:	4620      	mov	r0, r4
 800930e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009312:	3a30      	subs	r2, #48	@ 0x30
 8009314:	2a09      	cmp	r2, #9
 8009316:	d903      	bls.n	8009320 <_vfiprintf_r+0x1cc>
 8009318:	2b00      	cmp	r3, #0
 800931a:	d0c6      	beq.n	80092aa <_vfiprintf_r+0x156>
 800931c:	9105      	str	r1, [sp, #20]
 800931e:	e7c4      	b.n	80092aa <_vfiprintf_r+0x156>
 8009320:	4604      	mov	r4, r0
 8009322:	2301      	movs	r3, #1
 8009324:	fb0c 2101 	mla	r1, ip, r1, r2
 8009328:	e7f0      	b.n	800930c <_vfiprintf_r+0x1b8>
 800932a:	ab03      	add	r3, sp, #12
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	462a      	mov	r2, r5
 8009330:	4630      	mov	r0, r6
 8009332:	4b13      	ldr	r3, [pc, #76]	@ (8009380 <_vfiprintf_r+0x22c>)
 8009334:	a904      	add	r1, sp, #16
 8009336:	f7fb fec7 	bl	80050c8 <_printf_float>
 800933a:	4607      	mov	r7, r0
 800933c:	1c78      	adds	r0, r7, #1
 800933e:	d1d6      	bne.n	80092ee <_vfiprintf_r+0x19a>
 8009340:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009342:	07d9      	lsls	r1, r3, #31
 8009344:	d405      	bmi.n	8009352 <_vfiprintf_r+0x1fe>
 8009346:	89ab      	ldrh	r3, [r5, #12]
 8009348:	059a      	lsls	r2, r3, #22
 800934a:	d402      	bmi.n	8009352 <_vfiprintf_r+0x1fe>
 800934c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800934e:	f7fc fe27 	bl	8005fa0 <__retarget_lock_release_recursive>
 8009352:	89ab      	ldrh	r3, [r5, #12]
 8009354:	065b      	lsls	r3, r3, #25
 8009356:	f53f af1f 	bmi.w	8009198 <_vfiprintf_r+0x44>
 800935a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800935c:	e71e      	b.n	800919c <_vfiprintf_r+0x48>
 800935e:	ab03      	add	r3, sp, #12
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	462a      	mov	r2, r5
 8009364:	4630      	mov	r0, r6
 8009366:	4b06      	ldr	r3, [pc, #24]	@ (8009380 <_vfiprintf_r+0x22c>)
 8009368:	a904      	add	r1, sp, #16
 800936a:	f7fc f94b 	bl	8005604 <_printf_i>
 800936e:	e7e4      	b.n	800933a <_vfiprintf_r+0x1e6>
 8009370:	080097db 	.word	0x080097db
 8009374:	080097e1 	.word	0x080097e1
 8009378:	080097e5 	.word	0x080097e5
 800937c:	080050c9 	.word	0x080050c9
 8009380:	08009131 	.word	0x08009131

08009384 <__swbuf_r>:
 8009384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009386:	460e      	mov	r6, r1
 8009388:	4614      	mov	r4, r2
 800938a:	4605      	mov	r5, r0
 800938c:	b118      	cbz	r0, 8009396 <__swbuf_r+0x12>
 800938e:	6a03      	ldr	r3, [r0, #32]
 8009390:	b90b      	cbnz	r3, 8009396 <__swbuf_r+0x12>
 8009392:	f7fc fceb 	bl	8005d6c <__sinit>
 8009396:	69a3      	ldr	r3, [r4, #24]
 8009398:	60a3      	str	r3, [r4, #8]
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	071a      	lsls	r2, r3, #28
 800939e:	d501      	bpl.n	80093a4 <__swbuf_r+0x20>
 80093a0:	6923      	ldr	r3, [r4, #16]
 80093a2:	b943      	cbnz	r3, 80093b6 <__swbuf_r+0x32>
 80093a4:	4621      	mov	r1, r4
 80093a6:	4628      	mov	r0, r5
 80093a8:	f000 f82a 	bl	8009400 <__swsetup_r>
 80093ac:	b118      	cbz	r0, 80093b6 <__swbuf_r+0x32>
 80093ae:	f04f 37ff 	mov.w	r7, #4294967295
 80093b2:	4638      	mov	r0, r7
 80093b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	6922      	ldr	r2, [r4, #16]
 80093ba:	b2f6      	uxtb	r6, r6
 80093bc:	1a98      	subs	r0, r3, r2
 80093be:	6963      	ldr	r3, [r4, #20]
 80093c0:	4637      	mov	r7, r6
 80093c2:	4283      	cmp	r3, r0
 80093c4:	dc05      	bgt.n	80093d2 <__swbuf_r+0x4e>
 80093c6:	4621      	mov	r1, r4
 80093c8:	4628      	mov	r0, r5
 80093ca:	f7ff fa4b 	bl	8008864 <_fflush_r>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d1ed      	bne.n	80093ae <__swbuf_r+0x2a>
 80093d2:	68a3      	ldr	r3, [r4, #8]
 80093d4:	3b01      	subs	r3, #1
 80093d6:	60a3      	str	r3, [r4, #8]
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	1c5a      	adds	r2, r3, #1
 80093dc:	6022      	str	r2, [r4, #0]
 80093de:	701e      	strb	r6, [r3, #0]
 80093e0:	6962      	ldr	r2, [r4, #20]
 80093e2:	1c43      	adds	r3, r0, #1
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d004      	beq.n	80093f2 <__swbuf_r+0x6e>
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	07db      	lsls	r3, r3, #31
 80093ec:	d5e1      	bpl.n	80093b2 <__swbuf_r+0x2e>
 80093ee:	2e0a      	cmp	r6, #10
 80093f0:	d1df      	bne.n	80093b2 <__swbuf_r+0x2e>
 80093f2:	4621      	mov	r1, r4
 80093f4:	4628      	mov	r0, r5
 80093f6:	f7ff fa35 	bl	8008864 <_fflush_r>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d0d9      	beq.n	80093b2 <__swbuf_r+0x2e>
 80093fe:	e7d6      	b.n	80093ae <__swbuf_r+0x2a>

08009400 <__swsetup_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4b29      	ldr	r3, [pc, #164]	@ (80094a8 <__swsetup_r+0xa8>)
 8009404:	4605      	mov	r5, r0
 8009406:	6818      	ldr	r0, [r3, #0]
 8009408:	460c      	mov	r4, r1
 800940a:	b118      	cbz	r0, 8009414 <__swsetup_r+0x14>
 800940c:	6a03      	ldr	r3, [r0, #32]
 800940e:	b90b      	cbnz	r3, 8009414 <__swsetup_r+0x14>
 8009410:	f7fc fcac 	bl	8005d6c <__sinit>
 8009414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009418:	0719      	lsls	r1, r3, #28
 800941a:	d422      	bmi.n	8009462 <__swsetup_r+0x62>
 800941c:	06da      	lsls	r2, r3, #27
 800941e:	d407      	bmi.n	8009430 <__swsetup_r+0x30>
 8009420:	2209      	movs	r2, #9
 8009422:	602a      	str	r2, [r5, #0]
 8009424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009428:	f04f 30ff 	mov.w	r0, #4294967295
 800942c:	81a3      	strh	r3, [r4, #12]
 800942e:	e033      	b.n	8009498 <__swsetup_r+0x98>
 8009430:	0758      	lsls	r0, r3, #29
 8009432:	d512      	bpl.n	800945a <__swsetup_r+0x5a>
 8009434:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009436:	b141      	cbz	r1, 800944a <__swsetup_r+0x4a>
 8009438:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800943c:	4299      	cmp	r1, r3
 800943e:	d002      	beq.n	8009446 <__swsetup_r+0x46>
 8009440:	4628      	mov	r0, r5
 8009442:	f7fd fc1d 	bl	8006c80 <_free_r>
 8009446:	2300      	movs	r3, #0
 8009448:	6363      	str	r3, [r4, #52]	@ 0x34
 800944a:	89a3      	ldrh	r3, [r4, #12]
 800944c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009450:	81a3      	strh	r3, [r4, #12]
 8009452:	2300      	movs	r3, #0
 8009454:	6063      	str	r3, [r4, #4]
 8009456:	6923      	ldr	r3, [r4, #16]
 8009458:	6023      	str	r3, [r4, #0]
 800945a:	89a3      	ldrh	r3, [r4, #12]
 800945c:	f043 0308 	orr.w	r3, r3, #8
 8009460:	81a3      	strh	r3, [r4, #12]
 8009462:	6923      	ldr	r3, [r4, #16]
 8009464:	b94b      	cbnz	r3, 800947a <__swsetup_r+0x7a>
 8009466:	89a3      	ldrh	r3, [r4, #12]
 8009468:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800946c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009470:	d003      	beq.n	800947a <__swsetup_r+0x7a>
 8009472:	4621      	mov	r1, r4
 8009474:	4628      	mov	r0, r5
 8009476:	f000 f882 	bl	800957e <__smakebuf_r>
 800947a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800947e:	f013 0201 	ands.w	r2, r3, #1
 8009482:	d00a      	beq.n	800949a <__swsetup_r+0x9a>
 8009484:	2200      	movs	r2, #0
 8009486:	60a2      	str	r2, [r4, #8]
 8009488:	6962      	ldr	r2, [r4, #20]
 800948a:	4252      	negs	r2, r2
 800948c:	61a2      	str	r2, [r4, #24]
 800948e:	6922      	ldr	r2, [r4, #16]
 8009490:	b942      	cbnz	r2, 80094a4 <__swsetup_r+0xa4>
 8009492:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009496:	d1c5      	bne.n	8009424 <__swsetup_r+0x24>
 8009498:	bd38      	pop	{r3, r4, r5, pc}
 800949a:	0799      	lsls	r1, r3, #30
 800949c:	bf58      	it	pl
 800949e:	6962      	ldrpl	r2, [r4, #20]
 80094a0:	60a2      	str	r2, [r4, #8]
 80094a2:	e7f4      	b.n	800948e <__swsetup_r+0x8e>
 80094a4:	2000      	movs	r0, #0
 80094a6:	e7f7      	b.n	8009498 <__swsetup_r+0x98>
 80094a8:	20000018 	.word	0x20000018

080094ac <_raise_r>:
 80094ac:	291f      	cmp	r1, #31
 80094ae:	b538      	push	{r3, r4, r5, lr}
 80094b0:	4605      	mov	r5, r0
 80094b2:	460c      	mov	r4, r1
 80094b4:	d904      	bls.n	80094c0 <_raise_r+0x14>
 80094b6:	2316      	movs	r3, #22
 80094b8:	6003      	str	r3, [r0, #0]
 80094ba:	f04f 30ff 	mov.w	r0, #4294967295
 80094be:	bd38      	pop	{r3, r4, r5, pc}
 80094c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80094c2:	b112      	cbz	r2, 80094ca <_raise_r+0x1e>
 80094c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094c8:	b94b      	cbnz	r3, 80094de <_raise_r+0x32>
 80094ca:	4628      	mov	r0, r5
 80094cc:	f000 f830 	bl	8009530 <_getpid_r>
 80094d0:	4622      	mov	r2, r4
 80094d2:	4601      	mov	r1, r0
 80094d4:	4628      	mov	r0, r5
 80094d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094da:	f000 b817 	b.w	800950c <_kill_r>
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d00a      	beq.n	80094f8 <_raise_r+0x4c>
 80094e2:	1c59      	adds	r1, r3, #1
 80094e4:	d103      	bne.n	80094ee <_raise_r+0x42>
 80094e6:	2316      	movs	r3, #22
 80094e8:	6003      	str	r3, [r0, #0]
 80094ea:	2001      	movs	r0, #1
 80094ec:	e7e7      	b.n	80094be <_raise_r+0x12>
 80094ee:	2100      	movs	r1, #0
 80094f0:	4620      	mov	r0, r4
 80094f2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80094f6:	4798      	blx	r3
 80094f8:	2000      	movs	r0, #0
 80094fa:	e7e0      	b.n	80094be <_raise_r+0x12>

080094fc <raise>:
 80094fc:	4b02      	ldr	r3, [pc, #8]	@ (8009508 <raise+0xc>)
 80094fe:	4601      	mov	r1, r0
 8009500:	6818      	ldr	r0, [r3, #0]
 8009502:	f7ff bfd3 	b.w	80094ac <_raise_r>
 8009506:	bf00      	nop
 8009508:	20000018 	.word	0x20000018

0800950c <_kill_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	2300      	movs	r3, #0
 8009510:	4d06      	ldr	r5, [pc, #24]	@ (800952c <_kill_r+0x20>)
 8009512:	4604      	mov	r4, r0
 8009514:	4608      	mov	r0, r1
 8009516:	4611      	mov	r1, r2
 8009518:	602b      	str	r3, [r5, #0]
 800951a:	f7f7 ff8a 	bl	8001432 <_kill>
 800951e:	1c43      	adds	r3, r0, #1
 8009520:	d102      	bne.n	8009528 <_kill_r+0x1c>
 8009522:	682b      	ldr	r3, [r5, #0]
 8009524:	b103      	cbz	r3, 8009528 <_kill_r+0x1c>
 8009526:	6023      	str	r3, [r4, #0]
 8009528:	bd38      	pop	{r3, r4, r5, pc}
 800952a:	bf00      	nop
 800952c:	200004cc 	.word	0x200004cc

08009530 <_getpid_r>:
 8009530:	f7f7 bf78 	b.w	8001424 <_getpid>

08009534 <__swhatbuf_r>:
 8009534:	b570      	push	{r4, r5, r6, lr}
 8009536:	460c      	mov	r4, r1
 8009538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800953c:	4615      	mov	r5, r2
 800953e:	2900      	cmp	r1, #0
 8009540:	461e      	mov	r6, r3
 8009542:	b096      	sub	sp, #88	@ 0x58
 8009544:	da0c      	bge.n	8009560 <__swhatbuf_r+0x2c>
 8009546:	89a3      	ldrh	r3, [r4, #12]
 8009548:	2100      	movs	r1, #0
 800954a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800954e:	bf14      	ite	ne
 8009550:	2340      	movne	r3, #64	@ 0x40
 8009552:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009556:	2000      	movs	r0, #0
 8009558:	6031      	str	r1, [r6, #0]
 800955a:	602b      	str	r3, [r5, #0]
 800955c:	b016      	add	sp, #88	@ 0x58
 800955e:	bd70      	pop	{r4, r5, r6, pc}
 8009560:	466a      	mov	r2, sp
 8009562:	f000 f849 	bl	80095f8 <_fstat_r>
 8009566:	2800      	cmp	r0, #0
 8009568:	dbed      	blt.n	8009546 <__swhatbuf_r+0x12>
 800956a:	9901      	ldr	r1, [sp, #4]
 800956c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009570:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009574:	4259      	negs	r1, r3
 8009576:	4159      	adcs	r1, r3
 8009578:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800957c:	e7eb      	b.n	8009556 <__swhatbuf_r+0x22>

0800957e <__smakebuf_r>:
 800957e:	898b      	ldrh	r3, [r1, #12]
 8009580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009582:	079d      	lsls	r5, r3, #30
 8009584:	4606      	mov	r6, r0
 8009586:	460c      	mov	r4, r1
 8009588:	d507      	bpl.n	800959a <__smakebuf_r+0x1c>
 800958a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800958e:	6023      	str	r3, [r4, #0]
 8009590:	6123      	str	r3, [r4, #16]
 8009592:	2301      	movs	r3, #1
 8009594:	6163      	str	r3, [r4, #20]
 8009596:	b003      	add	sp, #12
 8009598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800959a:	466a      	mov	r2, sp
 800959c:	ab01      	add	r3, sp, #4
 800959e:	f7ff ffc9 	bl	8009534 <__swhatbuf_r>
 80095a2:	9f00      	ldr	r7, [sp, #0]
 80095a4:	4605      	mov	r5, r0
 80095a6:	4639      	mov	r1, r7
 80095a8:	4630      	mov	r0, r6
 80095aa:	f7fd fbdb 	bl	8006d64 <_malloc_r>
 80095ae:	b948      	cbnz	r0, 80095c4 <__smakebuf_r+0x46>
 80095b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095b4:	059a      	lsls	r2, r3, #22
 80095b6:	d4ee      	bmi.n	8009596 <__smakebuf_r+0x18>
 80095b8:	f023 0303 	bic.w	r3, r3, #3
 80095bc:	f043 0302 	orr.w	r3, r3, #2
 80095c0:	81a3      	strh	r3, [r4, #12]
 80095c2:	e7e2      	b.n	800958a <__smakebuf_r+0xc>
 80095c4:	89a3      	ldrh	r3, [r4, #12]
 80095c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80095ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095ce:	81a3      	strh	r3, [r4, #12]
 80095d0:	9b01      	ldr	r3, [sp, #4]
 80095d2:	6020      	str	r0, [r4, #0]
 80095d4:	b15b      	cbz	r3, 80095ee <__smakebuf_r+0x70>
 80095d6:	4630      	mov	r0, r6
 80095d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095dc:	f000 f81e 	bl	800961c <_isatty_r>
 80095e0:	b128      	cbz	r0, 80095ee <__smakebuf_r+0x70>
 80095e2:	89a3      	ldrh	r3, [r4, #12]
 80095e4:	f023 0303 	bic.w	r3, r3, #3
 80095e8:	f043 0301 	orr.w	r3, r3, #1
 80095ec:	81a3      	strh	r3, [r4, #12]
 80095ee:	89a3      	ldrh	r3, [r4, #12]
 80095f0:	431d      	orrs	r5, r3
 80095f2:	81a5      	strh	r5, [r4, #12]
 80095f4:	e7cf      	b.n	8009596 <__smakebuf_r+0x18>
	...

080095f8 <_fstat_r>:
 80095f8:	b538      	push	{r3, r4, r5, lr}
 80095fa:	2300      	movs	r3, #0
 80095fc:	4d06      	ldr	r5, [pc, #24]	@ (8009618 <_fstat_r+0x20>)
 80095fe:	4604      	mov	r4, r0
 8009600:	4608      	mov	r0, r1
 8009602:	4611      	mov	r1, r2
 8009604:	602b      	str	r3, [r5, #0]
 8009606:	f7f7 ff73 	bl	80014f0 <_fstat>
 800960a:	1c43      	adds	r3, r0, #1
 800960c:	d102      	bne.n	8009614 <_fstat_r+0x1c>
 800960e:	682b      	ldr	r3, [r5, #0]
 8009610:	b103      	cbz	r3, 8009614 <_fstat_r+0x1c>
 8009612:	6023      	str	r3, [r4, #0]
 8009614:	bd38      	pop	{r3, r4, r5, pc}
 8009616:	bf00      	nop
 8009618:	200004cc 	.word	0x200004cc

0800961c <_isatty_r>:
 800961c:	b538      	push	{r3, r4, r5, lr}
 800961e:	2300      	movs	r3, #0
 8009620:	4d05      	ldr	r5, [pc, #20]	@ (8009638 <_isatty_r+0x1c>)
 8009622:	4604      	mov	r4, r0
 8009624:	4608      	mov	r0, r1
 8009626:	602b      	str	r3, [r5, #0]
 8009628:	f7f7 ff71 	bl	800150e <_isatty>
 800962c:	1c43      	adds	r3, r0, #1
 800962e:	d102      	bne.n	8009636 <_isatty_r+0x1a>
 8009630:	682b      	ldr	r3, [r5, #0]
 8009632:	b103      	cbz	r3, 8009636 <_isatty_r+0x1a>
 8009634:	6023      	str	r3, [r4, #0]
 8009636:	bd38      	pop	{r3, r4, r5, pc}
 8009638:	200004cc 	.word	0x200004cc

0800963c <_init>:
 800963c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963e:	bf00      	nop
 8009640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009642:	bc08      	pop	{r3}
 8009644:	469e      	mov	lr, r3
 8009646:	4770      	bx	lr

08009648 <_fini>:
 8009648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800964a:	bf00      	nop
 800964c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800964e:	bc08      	pop	{r3}
 8009650:	469e      	mov	lr, r3
 8009652:	4770      	bx	lr
